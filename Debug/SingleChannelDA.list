
SingleChannelDA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007310  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134dc  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a97c  0801a97c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  0801a97c  0801a97c  0002a97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a984  0801a984  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a984  0801a984  0002a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a988  0801a988  0002a988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0801a98c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000085d8  20000078  0801aa04  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008650  0801aa04  00038650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166cb  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b4a  00000000  00000000  00046773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  000492c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  0004a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002824b  00000000  00000000  0004aff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ce7  00000000  00000000  0007323b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe131  00000000  00000000  00084f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  00183053  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004338  00000000  00000000  00183118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  00187450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007488 	.word	0x08007488

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007488 	.word	0x08007488

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b96e 	b.w	8000634 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	4604      	mov	r4, r0
 8000378:	468c      	mov	ip, r1
 800037a:	2b00      	cmp	r3, #0
 800037c:	f040 8083 	bne.w	8000486 <__udivmoddi4+0x116>
 8000380:	428a      	cmp	r2, r1
 8000382:	4617      	mov	r7, r2
 8000384:	d947      	bls.n	8000416 <__udivmoddi4+0xa6>
 8000386:	fab2 f282 	clz	r2, r2
 800038a:	b142      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038c:	f1c2 0020 	rsb	r0, r2, #32
 8000390:	fa24 f000 	lsr.w	r0, r4, r0
 8000394:	4091      	lsls	r1, r2
 8000396:	4097      	lsls	r7, r2
 8000398:	ea40 0c01 	orr.w	ip, r0, r1
 800039c:	4094      	lsls	r4, r2
 800039e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fbbc f6f8 	udiv	r6, ip, r8
 80003a8:	fa1f fe87 	uxth.w	lr, r7
 80003ac:	fb08 c116 	mls	r1, r8, r6, ip
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f10e 	mul.w	r1, r6, lr
 80003b8:	4299      	cmp	r1, r3
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x60>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 30ff 	add.w	r0, r6, #4294967295
 80003c2:	f080 8119 	bcs.w	80005f8 <__udivmoddi4+0x288>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 8116 	bls.w	80005f8 <__udivmoddi4+0x288>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x8c>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ee:	f080 8105 	bcs.w	80005fc <__udivmoddi4+0x28c>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f240 8102 	bls.w	80005fc <__udivmoddi4+0x28c>
 80003f8:	3802      	subs	r0, #2
 80003fa:	443c      	add	r4, r7
 80003fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	2600      	movs	r6, #0
 8000406:	b11d      	cbz	r5, 8000410 <__udivmoddi4+0xa0>
 8000408:	40d4      	lsrs	r4, r2
 800040a:	2300      	movs	r3, #0
 800040c:	e9c5 4300 	strd	r4, r3, [r5]
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	b902      	cbnz	r2, 800041a <__udivmoddi4+0xaa>
 8000418:	deff      	udf	#255	; 0xff
 800041a:	fab2 f282 	clz	r2, r2
 800041e:	2a00      	cmp	r2, #0
 8000420:	d150      	bne.n	80004c4 <__udivmoddi4+0x154>
 8000422:	1bcb      	subs	r3, r1, r7
 8000424:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000428:	fa1f f887 	uxth.w	r8, r7
 800042c:	2601      	movs	r6, #1
 800042e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000432:	0c21      	lsrs	r1, r4, #16
 8000434:	fb0e 331c 	mls	r3, lr, ip, r3
 8000438:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043c:	fb08 f30c 	mul.w	r3, r8, ip
 8000440:	428b      	cmp	r3, r1
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0xe4>
 8000444:	1879      	adds	r1, r7, r1
 8000446:	f10c 30ff 	add.w	r0, ip, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0xe2>
 800044c:	428b      	cmp	r3, r1
 800044e:	f200 80e9 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 8000452:	4684      	mov	ip, r0
 8000454:	1ac9      	subs	r1, r1, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb1 f0fe 	udiv	r0, r1, lr
 800045c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000460:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000464:	fb08 f800 	mul.w	r8, r8, r0
 8000468:	45a0      	cmp	r8, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x10c>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x10a>
 8000474:	45a0      	cmp	r8, r4
 8000476:	f200 80d9 	bhi.w	800062c <__udivmoddi4+0x2bc>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 0408 	sub.w	r4, r4, r8
 8000480:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000484:	e7bf      	b.n	8000406 <__udivmoddi4+0x96>
 8000486:	428b      	cmp	r3, r1
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x12e>
 800048a:	2d00      	cmp	r5, #0
 800048c:	f000 80b1 	beq.w	80005f2 <__udivmoddi4+0x282>
 8000490:	2600      	movs	r6, #0
 8000492:	e9c5 0100 	strd	r0, r1, [r5]
 8000496:	4630      	mov	r0, r6
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	fab3 f683 	clz	r6, r3
 80004a2:	2e00      	cmp	r6, #0
 80004a4:	d14a      	bne.n	800053c <__udivmoddi4+0x1cc>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0x140>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	f200 80b8 	bhi.w	8000620 <__udivmoddi4+0x2b0>
 80004b0:	1a84      	subs	r4, r0, r2
 80004b2:	eb61 0103 	sbc.w	r1, r1, r3
 80004b6:	2001      	movs	r0, #1
 80004b8:	468c      	mov	ip, r1
 80004ba:	2d00      	cmp	r5, #0
 80004bc:	d0a8      	beq.n	8000410 <__udivmoddi4+0xa0>
 80004be:	e9c5 4c00 	strd	r4, ip, [r5]
 80004c2:	e7a5      	b.n	8000410 <__udivmoddi4+0xa0>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f603 	lsr.w	r6, r0, r3
 80004cc:	4097      	lsls	r7, r2
 80004ce:	fa01 f002 	lsl.w	r0, r1, r2
 80004d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d6:	40d9      	lsrs	r1, r3
 80004d8:	4330      	orrs	r0, r6
 80004da:	0c03      	lsrs	r3, r0, #16
 80004dc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004e0:	fa1f f887 	uxth.w	r8, r7
 80004e4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb06 f108 	mul.w	r1, r6, r8
 80004f0:	4299      	cmp	r1, r3
 80004f2:	fa04 f402 	lsl.w	r4, r4, r2
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x19c>
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004fe:	f080 808d 	bcs.w	800061c <__udivmoddi4+0x2ac>
 8000502:	4299      	cmp	r1, r3
 8000504:	f240 808a 	bls.w	800061c <__udivmoddi4+0x2ac>
 8000508:	3e02      	subs	r6, #2
 800050a:	443b      	add	r3, r7
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b281      	uxth	r1, r0
 8000510:	fbb3 f0fe 	udiv	r0, r3, lr
 8000514:	fb0e 3310 	mls	r3, lr, r0, r3
 8000518:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051c:	fb00 f308 	mul.w	r3, r0, r8
 8000520:	428b      	cmp	r3, r1
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x1c4>
 8000524:	1879      	adds	r1, r7, r1
 8000526:	f100 3cff 	add.w	ip, r0, #4294967295
 800052a:	d273      	bcs.n	8000614 <__udivmoddi4+0x2a4>
 800052c:	428b      	cmp	r3, r1
 800052e:	d971      	bls.n	8000614 <__udivmoddi4+0x2a4>
 8000530:	3802      	subs	r0, #2
 8000532:	4439      	add	r1, r7
 8000534:	1acb      	subs	r3, r1, r3
 8000536:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800053a:	e778      	b.n	800042e <__udivmoddi4+0xbe>
 800053c:	f1c6 0c20 	rsb	ip, r6, #32
 8000540:	fa03 f406 	lsl.w	r4, r3, r6
 8000544:	fa22 f30c 	lsr.w	r3, r2, ip
 8000548:	431c      	orrs	r4, r3
 800054a:	fa20 f70c 	lsr.w	r7, r0, ip
 800054e:	fa01 f306 	lsl.w	r3, r1, r6
 8000552:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000556:	fa21 f10c 	lsr.w	r1, r1, ip
 800055a:	431f      	orrs	r7, r3
 800055c:	0c3b      	lsrs	r3, r7, #16
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fa1f f884 	uxth.w	r8, r4
 8000566:	fb0e 1119 	mls	r1, lr, r9, r1
 800056a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800056e:	fb09 fa08 	mul.w	sl, r9, r8
 8000572:	458a      	cmp	sl, r1
 8000574:	fa02 f206 	lsl.w	r2, r2, r6
 8000578:	fa00 f306 	lsl.w	r3, r0, r6
 800057c:	d908      	bls.n	8000590 <__udivmoddi4+0x220>
 800057e:	1861      	adds	r1, r4, r1
 8000580:	f109 30ff 	add.w	r0, r9, #4294967295
 8000584:	d248      	bcs.n	8000618 <__udivmoddi4+0x2a8>
 8000586:	458a      	cmp	sl, r1
 8000588:	d946      	bls.n	8000618 <__udivmoddi4+0x2a8>
 800058a:	f1a9 0902 	sub.w	r9, r9, #2
 800058e:	4421      	add	r1, r4
 8000590:	eba1 010a 	sub.w	r1, r1, sl
 8000594:	b2bf      	uxth	r7, r7
 8000596:	fbb1 f0fe 	udiv	r0, r1, lr
 800059a:	fb0e 1110 	mls	r1, lr, r0, r1
 800059e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005a2:	fb00 f808 	mul.w	r8, r0, r8
 80005a6:	45b8      	cmp	r8, r7
 80005a8:	d907      	bls.n	80005ba <__udivmoddi4+0x24a>
 80005aa:	19e7      	adds	r7, r4, r7
 80005ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80005b0:	d22e      	bcs.n	8000610 <__udivmoddi4+0x2a0>
 80005b2:	45b8      	cmp	r8, r7
 80005b4:	d92c      	bls.n	8000610 <__udivmoddi4+0x2a0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4427      	add	r7, r4
 80005ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005be:	eba7 0708 	sub.w	r7, r7, r8
 80005c2:	fba0 8902 	umull	r8, r9, r0, r2
 80005c6:	454f      	cmp	r7, r9
 80005c8:	46c6      	mov	lr, r8
 80005ca:	4649      	mov	r1, r9
 80005cc:	d31a      	bcc.n	8000604 <__udivmoddi4+0x294>
 80005ce:	d017      	beq.n	8000600 <__udivmoddi4+0x290>
 80005d0:	b15d      	cbz	r5, 80005ea <__udivmoddi4+0x27a>
 80005d2:	ebb3 020e 	subs.w	r2, r3, lr
 80005d6:	eb67 0701 	sbc.w	r7, r7, r1
 80005da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005de:	40f2      	lsrs	r2, r6
 80005e0:	ea4c 0202 	orr.w	r2, ip, r2
 80005e4:	40f7      	lsrs	r7, r6
 80005e6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ea:	2600      	movs	r6, #0
 80005ec:	4631      	mov	r1, r6
 80005ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e70b      	b.n	8000410 <__udivmoddi4+0xa0>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e9      	b.n	80003d0 <__udivmoddi4+0x60>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6fd      	b.n	80003fc <__udivmoddi4+0x8c>
 8000600:	4543      	cmp	r3, r8
 8000602:	d2e5      	bcs.n	80005d0 <__udivmoddi4+0x260>
 8000604:	ebb8 0e02 	subs.w	lr, r8, r2
 8000608:	eb69 0104 	sbc.w	r1, r9, r4
 800060c:	3801      	subs	r0, #1
 800060e:	e7df      	b.n	80005d0 <__udivmoddi4+0x260>
 8000610:	4608      	mov	r0, r1
 8000612:	e7d2      	b.n	80005ba <__udivmoddi4+0x24a>
 8000614:	4660      	mov	r0, ip
 8000616:	e78d      	b.n	8000534 <__udivmoddi4+0x1c4>
 8000618:	4681      	mov	r9, r0
 800061a:	e7b9      	b.n	8000590 <__udivmoddi4+0x220>
 800061c:	4666      	mov	r6, ip
 800061e:	e775      	b.n	800050c <__udivmoddi4+0x19c>
 8000620:	4630      	mov	r0, r6
 8000622:	e74a      	b.n	80004ba <__udivmoddi4+0x14a>
 8000624:	f1ac 0c02 	sub.w	ip, ip, #2
 8000628:	4439      	add	r1, r7
 800062a:	e713      	b.n	8000454 <__udivmoddi4+0xe4>
 800062c:	3802      	subs	r0, #2
 800062e:	443c      	add	r4, r7
 8000630:	e724      	b.n	800047c <__udivmoddi4+0x10c>
 8000632:	bf00      	nop

08000634 <__aeabi_idiv0>:
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800063e:	f000 fd8d 	bl	800115c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000642:	f000 f9c9 	bl	80009d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000646:	f000 faf5 	bl	8000c34 <MX_GPIO_Init>
	MX_DMA_Init();
 800064a:	f000 facd 	bl	8000be8 <MX_DMA_Init>
	MX_ADC1_Init();
 800064e:	f000 fa25 	bl	8000a9c <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000652:	f000 fa99 	bl	8000b88 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	//HAL_UART_Receive(&huart2, Rx, sizeof(Rx), HAL_MAX_DELAY);

	arm_rfft_fast_init_f32(&fftHandler, 2048);
 8000656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065a:	4827      	ldr	r0, [pc, #156]	; (80006f8 <main+0xc0>)
 800065c:	f005 f91e 	bl	800589c <arm_rfft_fast_init_f32>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000664:	4925      	ldr	r1, [pc, #148]	; (80006fc <main+0xc4>)
 8000666:	4826      	ldr	r0, [pc, #152]	; (8000700 <main+0xc8>)
 8000668:	f001 f920 	bl	80018ac <HAL_ADC_Start_DMA>

		/* USER CODE BEGIN 3 */



		int fft_in_ptr = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]

		if(callback_state == 1){
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <main+0xcc>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d11c      	bne.n	80006b2 <main+0x7a>
			for(int i =0; i<2048; i++){
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	e013      	b.n	80006a6 <main+0x6e>

				fftBufIn[fft_in_ptr] = (float32_t) adc_buf[i];
 800067e:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <main+0xc4>)
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000686:	ee07 3a90 	vmov	s15, r3
 800068a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800068e:	4a1e      	ldr	r2, [pc, #120]	; (8000708 <main+0xd0>)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	edc3 7a00 	vstr	s15, [r3]
				fft_in_ptr++;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	3301      	adds	r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
			for(int i =0; i<2048; i++){
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	3301      	adds	r3, #1
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006ac:	dbe7      	blt.n	800067e <main+0x46>
			}

			DoFFT();
 80006ae:	f000 f849 	bl	8000744 <DoFFT>
		}

		if(callback_state == 2){
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <main+0xcc>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d1d8      	bne.n	800066c <main+0x34>
			for(int i =2048; i<4096; i++){
 80006ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	e013      	b.n	80006ea <main+0xb2>

				fftBufIn[fft_in_ptr] = (float32_t) adc_buf[i];
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <main+0xc4>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ca:	ee07 3a90 	vmov	s15, r3
 80006ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006d2:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <main+0xd0>)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4413      	add	r3, r2
 80006da:	edc3 7a00 	vstr	s15, [r3]
				fft_in_ptr++;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	3301      	adds	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
			for(int i =2048; i<4096; i++){
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3301      	adds	r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006f0:	dbe7      	blt.n	80006c2 <main+0x8a>
			}

			DoFFT();
 80006f2:	f000 f827 	bl	8000744 <DoFFT>
	{
 80006f6:	e7b9      	b.n	800066c <main+0x34>
 80006f8:	200000a8 	.word	0x200000a8
 80006fc:	200025b8 	.word	0x200025b8
 8000700:	200000c4 	.word	0x200000c4
 8000704:	20000098 	.word	0x20000098
 8000708:	200005b8 	.word	0x200005b8

0800070c <complexABS>:


	/* USER CODE END 3 */
}

float complexABS(float real, float compl) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	ed87 0a01 	vstr	s0, [r7, #4]
 8000716:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real + compl*compl);
 800071a:	edd7 7a01 	vldr	s15, [r7, #4]
 800071e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000722:	edd7 7a00 	vldr	s15, [r7]
 8000726:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800072a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072e:	eeb0 0a67 	vmov.f32	s0, s15
 8000732:	f006 fd31 	bl	8007198 <sqrtf>
 8000736:	eef0 7a40 	vmov.f32	s15, s0
}
 800073a:	eeb0 0a67 	vmov.f32	s0, s15
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <DoFFT>:

void DoFFT() {
 8000744:	b580      	push	{r7, lr}
 8000746:	f5ad 5d87 	sub.w	sp, sp, #4320	; 0x10e0
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0

	arm_rfft_fast_f32(&fftHandler, &fftBufIn, &fftBufOut, 0);
 800074e:	2300      	movs	r3, #0
 8000750:	4a97      	ldr	r2, [pc, #604]	; (80009b0 <DoFFT+0x26c>)
 8000752:	4998      	ldr	r1, [pc, #608]	; (80009b4 <DoFFT+0x270>)
 8000754:	4898      	ldr	r0, [pc, #608]	; (80009b8 <DoFFT+0x274>)
 8000756:	f005 f925 	bl	80059a4 <arm_rfft_fast_f32>

	int freqs[1024];
	int freqpoint = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000760:	f102 0204 	add.w	r2, r2, #4
 8000764:	6013      	str	r3, [r2, #0]
	int offset = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800076c:	f102 0210 	add.w	r2, r2, #16
 8000770:	6013      	str	r3, [r2, #0]
	int j = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000778:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < 2048; i = i+2) {
 800077a:	2300      	movs	r3, #0
 800077c:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8000780:	f102 021c 	add.w	r2, r2, #28
 8000784:	6013      	str	r3, [r2, #0]
 8000786:	e08a      	b.n	800089e <DoFFT+0x15a>
		freqs[freqpoint] = (int)(20*log10f(complexABS(fftBufOut[i], fftBufOut[i+1]))) - offset;
 8000788:	4a89      	ldr	r2, [pc, #548]	; (80009b0 <DoFFT+0x26c>)
 800078a:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800078e:	f103 031c 	add.w	r3, r3, #28
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80007a0:	f103 031c 	add.w	r3, r3, #28
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a81      	ldr	r2, [pc, #516]	; (80009b0 <DoFFT+0x26c>)
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	ed93 7a00 	vldr	s14, [r3]
 80007b2:	eef0 0a47 	vmov.f32	s1, s14
 80007b6:	eeb0 0a67 	vmov.f32	s0, s15
 80007ba:	f7ff ffa7 	bl	800070c <complexABS>
 80007be:	eef0 7a40 	vmov.f32	s15, s0
 80007c2:	eeb0 0a67 	vmov.f32	s0, s15
 80007c6:	f006 fcb1 	bl	800712c <log10f>
 80007ca:	eef0 7a40 	vmov.f32	s15, s0
 80007ce:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80007d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007da:	ee17 2a90 	vmov	r2, s15
 80007de:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80007e2:	f103 0310 	add.w	r3, r3, #16
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1ad1      	subs	r1, r2, r3
 80007ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80007ee:	3b1c      	subs	r3, #28
 80007f0:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 80007f4:	f102 0204 	add.w	r2, r2, #4
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(freqs[freqpoint] < 0) freqs[freqpoint] = 0;
 80007fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000802:	3b1c      	subs	r3, #28
 8000804:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000808:	f102 0204 	add.w	r2, r2, #4
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da0a      	bge.n	800082c <DoFFT+0xe8>
 8000816:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800081a:	3b1c      	subs	r3, #28
 800081c:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000820:	f102 0204 	add.w	r2, r2, #4
 8000824:	6812      	ldr	r2, [r2, #0]
 8000826:	2100      	movs	r1, #0
 8000828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		freqs[0] = 0;
 800082c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000830:	3b1c      	subs	r3, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
		freqs[1] = 0;
 8000836:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800083a:	3b1c      	subs	r3, #28
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]

		outarray[j] = (uint8_t)freqs[freqpoint];
 8000840:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000844:	3b1c      	subs	r3, #28
 8000846:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 800084a:	f102 0204 	add.w	r2, r2, #4
 800084e:	6812      	ldr	r2, [r2, #0]
 8000850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000854:	b2d9      	uxtb	r1, r3
 8000856:	4a59      	ldr	r2, [pc, #356]	; (80009bc <DoFFT+0x278>)
 8000858:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	460a      	mov	r2, r1
 8000862:	701a      	strb	r2, [r3, #0]
		freqpoint++;
 8000864:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8000868:	f103 0304 	add.w	r3, r3, #4
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000874:	f102 0204 	add.w	r2, r2, #4
 8000878:	6013      	str	r3, [r2, #0]
		j++;
 800087a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000886:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 2048; i = i+2) {
 8000888:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800088c:	f103 031c 	add.w	r3, r3, #28
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3302      	adds	r3, #2
 8000894:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8000898:	f102 021c 	add.w	r2, r2, #28
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80008a2:	f103 031c 	add.w	r3, r3, #28
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008ac:	f6ff af6c 	blt.w	8000788 <DoFFT+0x44>
	}

	int max,temp = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80008b6:	f102 0218 	add.w	r2, r2, #24
 80008ba:	6013      	str	r3, [r2, #0]

	for(int k = 0; k < 1024; k++){
 80008bc:	2300      	movs	r3, #0
 80008be:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80008c2:	f102 0214 	add.w	r2, r2, #20
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	e026      	b.n	8000918 <DoFFT+0x1d4>

		if(outarray[k] > outarray[temp]){
 80008ca:	4a3c      	ldr	r2, [pc, #240]	; (80009bc <DoFFT+0x278>)
 80008cc:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80008d0:	f103 0314 	add.w	r3, r3, #20
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	781a      	ldrb	r2, [r3, #0]
 80008da:	4938      	ldr	r1, [pc, #224]	; (80009bc <DoFFT+0x278>)
 80008dc:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80008e0:	f103 0318 	add.w	r3, r3, #24
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	440b      	add	r3, r1
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d909      	bls.n	8000902 <DoFFT+0x1be>

			temp = k;
 80008ee:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80008f2:	f103 0314 	add.w	r3, r3, #20
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80008fc:	f102 0218 	add.w	r2, r2, #24
 8000900:	6013      	str	r3, [r2, #0]
	for(int k = 0; k < 1024; k++){
 8000902:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8000906:	f103 0314 	add.w	r3, r3, #20
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8000912:	f102 0214 	add.w	r2, r2, #20
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800091c:	f103 0314 	add.w	r3, r3, #20
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000926:	dbd0      	blt.n	80008ca <DoFFT+0x186>
		}
	}

	max = outarray[temp];
 8000928:	4a24      	ldr	r2, [pc, #144]	; (80009bc <DoFFT+0x278>)
 800092a:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800092e:	f103 0318 	add.w	r3, r3, #24
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4413      	add	r3, r2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800093c:	f102 020c 	add.w	r2, r2, #12
 8000940:	6013      	str	r3, [r2, #0]

	frequency = (temp * 2666666) / 1024;
 8000942:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8000946:	f103 0318 	add.w	r3, r3, #24
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <DoFFT+0x27c>)
 800094e:	fb02 f303 	mul.w	r3, r2, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	da01      	bge.n	800095a <DoFFT+0x216>
 8000956:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800095a:	129b      	asrs	r3, r3, #10
 800095c:	461a      	mov	r2, r3
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <DoFFT+0x280>)
 8000960:	601a      	str	r2, [r3, #0]

	char temp_buf[200];

	if (uartfree == 1){
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <DoFFT+0x284>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d118      	bne.n	800099c <DoFFT+0x258>

		snprintf(temp_buf, sizeof(temp_buf), "%d\r\n", frequency);
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <DoFFT+0x280>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f107 0008 	add.w	r0, r7, #8
 8000972:	3804      	subs	r0, #4
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <DoFFT+0x288>)
 8000976:	21c8      	movs	r1, #200	; 0xc8
 8000978:	f005 ff96 	bl	80068a8 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)temp_buf, strlen(temp_buf), HAL_MAX_DELAY);
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	3b04      	subs	r3, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fc84 	bl	8000290 <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	f107 0108 	add.w	r1, r7, #8
 8000990:	3904      	subs	r1, #4
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <DoFFT+0x28c>)
 8000998:	f003 ff04 	bl	80047a4 <HAL_UART_Transmit>

	}

	//uartfree = 0
	callback_state = 0;
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <DoFFT+0x290>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
}
 80009a2:	bf00      	nop
 80009a4:	f507 5787 	add.w	r7, r7, #4320	; 0x10e0
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200065b8 	.word	0x200065b8
 80009b4:	200005b8 	.word	0x200005b8
 80009b8:	200000a8 	.word	0x200000a8
 80009bc:	20000170 	.word	0x20000170
 80009c0:	0028b0aa 	.word	0x0028b0aa
 80009c4:	20000094 	.word	0x20000094
 80009c8:	20000000 	.word	0x20000000
 80009cc:	080074a0 	.word	0x080074a0
 80009d0:	200085b8 	.word	0x200085b8
 80009d4:	20000098 	.word	0x20000098

080009d8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b096      	sub	sp, #88	; 0x58
 80009dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2244      	movs	r2, #68	; 0x44
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f005 ff56 	bl	8006898 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	463b      	mov	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009fe:	f002 fb63 	bl	80030c8 <HAL_PWREx_ControlVoltageScaling>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000a08:	f000 f99a 	bl	8000d40 <Error_Handler>
	}
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000a0c:	f002 fb3e 	bl	800308c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a10:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <SystemClock_Config+0xc0>)
 8000a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a16:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <SystemClock_Config+0xc0>)
 8000a18:	f023 0318 	bic.w	r3, r3, #24
 8000a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a20:	2314      	movs	r3, #20
 8000a22:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a30:	2360      	movs	r3, #96	; 0x60
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a34:	2302      	movs	r3, #2
 8000a36:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000a40:	2328      	movs	r3, #40	; 0x28
 8000a42:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a44:	2307      	movs	r3, #7
 8000a46:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 fb8d 	bl	8003174 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8000a60:	f000 f96e 	bl	8000d40 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 ff53 	bl	8003928 <HAL_RCC_ClockConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000a88:	f000 f95a 	bl	8000d40 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000a8c:	f003 fc5a 	bl	8004344 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a90:	bf00      	nop
 8000a92:	3758      	adds	r7, #88	; 0x58
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40021000 	.word	0x40021000

08000a9c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000ac0:	4a2f      	ldr	r2, [pc, #188]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ac2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aca:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000ade:	2204      	movs	r2, #4
 8000ae0:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000aee:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af4:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b1e:	4817      	ldr	r0, [pc, #92]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000b20:	f000 fd6e 	bl	8001600 <HAL_ADC_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 8000b2a:	f000 f909 	bl	8000d40 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4810      	ldr	r0, [pc, #64]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000b3a:	f001 fcad 	bl	8002498 <HAL_ADCEx_MultiModeConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8000b44:	f000 f8fc 	bl	8000d40 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_ADC1_Init+0xe8>)
 8000b4a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b54:	237f      	movs	r3, #127	; 0x7f
 8000b56:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_ADC1_Init+0xe0>)
 8000b66:	f000 ff67 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC1_Init+0xd8>
	{
		Error_Handler();
 8000b70:	f000 f8e6 	bl	8000d40 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000c4 	.word	0x200000c4
 8000b80:	50040000 	.word	0x50040000
 8000b84:	14f00020 	.word	0x14f00020

08000b88 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000b8e:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <MX_USART2_UART_Init+0x5c>)
 8000b90:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bcc:	f003 fd9c 	bl	8004708 <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000bd6:	f000 f8b3 	bl	8000d40 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200085b8 	.word	0x200085b8
 8000be4:	40004400 	.word	0x40004400

08000be8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_DMA_Init+0x48>)
 8000bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <MX_DMA_Init+0x48>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6493      	str	r3, [r2, #72]	; 0x48
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <MX_DMA_Init+0x48>)
 8000bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	200b      	movs	r0, #11
 8000c0c:	f001 fdcf 	bl	80027ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c10:	200b      	movs	r0, #11
 8000c12:	f001 fde8 	bl	80027e6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2011      	movs	r0, #17
 8000c1c:	f001 fdc7 	bl	80027ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c20:	2011      	movs	r0, #17
 8000c22:	f001 fde0 	bl	80027e6 <HAL_NVIC_EnableIRQ>

}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000

08000c34 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a2a      	ldr	r2, [pc, #168]	; (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	4a24      	ldr	r2, [pc, #144]	; (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_GPIO_Init+0xc4>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2120      	movs	r1, #32
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f002 f9d3 	bl	800305c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cbc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cc0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <MX_GPIO_Init+0xc8>)
 8000cce:	f002 f81b 	bl	8002d08 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000cd2:	2320      	movs	r3, #32
 8000cd4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cec:	f002 f80c 	bl	8002d08 <HAL_GPIO_Init>

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	48000800 	.word	0x48000800

08000d00 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]


	callback_state = 1;
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
//		}
//
//		DoFFT();
//	}
//	NVIC_SystemReset();
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000098 	.word	0x20000098

08000d20 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]


	callback_state = 2;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	701a      	strb	r2, [r3, #0]
//		}
//
//		DoFFT();
//	}

}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000098 	.word	0x20000098

08000d40 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_MspInit+0x44>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_MspInit+0x44>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_MspInit+0x44>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x44>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x44>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6593      	str	r3, [r2, #88]	; 0x58
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x44>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0ac      	sub	sp, #176	; 0xb0
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2288      	movs	r2, #136	; 0x88
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f005 fd6f 	bl	8006898 <memset>
  if(hadc->Instance==ADC1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a3d      	ldr	r2, [pc, #244]	; (8000eb4 <HAL_ADC_MspInit+0x120>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d172      	bne.n	8000eaa <HAL_ADC_MspInit+0x116>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 40;
 8000dda:	2328      	movs	r3, #40	; 0x28
 8000ddc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000dde:	2307      	movs	r3, #7
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000de2:	2304      	movs	r3, #4
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000dea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4618      	mov	r0, r3
 8000df6:	f002 ffbb 	bl	8003d70 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000e00:	f7ff ff9e 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <HAL_ADC_MspInit+0x124>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	4a2b      	ldr	r2, [pc, #172]	; (8000eb8 <HAL_ADC_MspInit+0x124>)
 8000e0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <HAL_ADC_MspInit+0x124>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <HAL_ADC_MspInit+0x124>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <HAL_ADC_MspInit+0x124>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e28:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <HAL_ADC_MspInit+0x124>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e34:	2301      	movs	r3, #1
 8000e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e3a:	230b      	movs	r3, #11
 8000e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f001 ff5a 	bl	8002d08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_ADC_MspInit+0x128>)
 8000e56:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <HAL_ADC_MspInit+0x12c>)
 8000e58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_ADC_MspInit+0x128>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <HAL_ADC_MspInit+0x128>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_ADC_MspInit+0x128>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <HAL_ADC_MspInit+0x128>)
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_ADC_MspInit+0x128>)
 8000e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_ADC_MspInit+0x128>)
 8000e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_ADC_MspInit+0x128>)
 8000e84:	2220      	movs	r2, #32
 8000e86:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_ADC_MspInit+0x128>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <HAL_ADC_MspInit+0x128>)
 8000e90:	f001 fcc4 	bl	800281c <HAL_DMA_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000e9a:	f7ff ff51 	bl	8000d40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_ADC_MspInit+0x128>)
 8000ea2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ea4:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <HAL_ADC_MspInit+0x128>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	37b0      	adds	r7, #176	; 0xb0
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	50040000 	.word	0x50040000
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	20000570 	.word	0x20000570
 8000ec0:	40020008 	.word	0x40020008

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0ac      	sub	sp, #176	; 0xb0
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2288      	movs	r2, #136	; 0x88
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f005 fcd7 	bl	8006898 <memset>
  if(huart->Instance==USART2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <HAL_UART_MspInit+0x114>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d16c      	bne.n	8000fce <HAL_UART_MspInit+0x10a>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 ff35 	bl	8003d70 <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f0c:	f7ff ff18 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <HAL_UART_MspInit+0x118>)
 8000f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f14:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <HAL_UART_MspInit+0x118>)
 8000f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_UART_MspInit+0x118>)
 8000f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <HAL_UART_MspInit+0x118>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	4a2b      	ldr	r2, [pc, #172]	; (8000fdc <HAL_UART_MspInit+0x118>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <HAL_UART_MspInit+0x118>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f40:	230c      	movs	r3, #12
 8000f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f001 fece 	bl	8002d08 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <HAL_UART_MspInit+0x120>)
 8000f70:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000fa2:	480f      	ldr	r0, [pc, #60]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000fa4:	f001 fc3a 	bl	800281c <HAL_DMA_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000fae:	f7ff fec7 	bl	8000d40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000fb6:	66da      	str	r2, [r3, #108]	; 0x6c
 8000fb8:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2026      	movs	r0, #38	; 0x26
 8000fc4:	f001 fbf3 	bl	80027ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fc8:	2026      	movs	r0, #38	; 0x26
 8000fca:	f001 fc0c 	bl	80027e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	37b0      	adds	r7, #176	; 0xb0
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	20000128 	.word	0x20000128
 8000fe4:	40020080 	.word	0x40020080

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <NMI_Handler+0x4>

08000fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <UsageFault_Handler+0x4>

08001006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 f8ee 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <DMA1_Channel1_IRQHandler+0x10>)
 8001042:	f001 fd82 	bl	8002b4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000570 	.word	0x20000570

08001050 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <DMA1_Channel7_IRQHandler+0x10>)
 8001056:	f001 fd78 	bl	8002b4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000128 	.word	0x20000128

08001064 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <USART2_IRQHandler+0x10>)
 800106a:	f003 fc2f 	bl	80048cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200085b8 	.word	0x200085b8

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f005 fbcc 	bl	8006844 <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20018000 	.word	0x20018000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	2000009c 	.word	0x2000009c
 80010e0:	20008650 	.word	0x20008650

080010e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800110c:	f7ff ffea 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	; (8001148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	; (8001154 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001136:	f005 fb8b 	bl	8006850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113a:	f7ff fa7d 	bl	8000638 <main>

0800113e <LoopForever>:

LoopForever:
    b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001140:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800114c:	0801a98c 	.word	0x0801a98c
  ldr r2, =_sbss
 8001150:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001154:	20008650 	.word	0x20008650

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>
	...

0800115c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <HAL_Init+0x3c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <HAL_Init+0x3c>)
 800116c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001170:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001172:	2003      	movs	r0, #3
 8001174:	f001 fb10 	bl	8002798 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001178:	2000      	movs	r0, #0
 800117a:	f000 f80f 	bl	800119c <HAL_InitTick>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	e001      	b.n	800118e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800118a:	f7ff fddf 	bl	8000d4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118e:	79fb      	ldrb	r3, [r7, #7]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_InitTick+0x6c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d023      	beq.n	80011f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_InitTick+0x70>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_InitTick+0x6c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fb1b 	bl	8002802 <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10f      	bne.n	80011f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d809      	bhi.n	80011ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f001 fae5 	bl	80027ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e4:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <HAL_InitTick+0x74>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e007      	b.n	80011fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	e004      	b.n	80011fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	e001      	b.n	80011fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000000c 	.word	0x2000000c
 800120c:	20000004 	.word	0x20000004
 8001210:	20000008 	.word	0x20000008

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	2000000c 	.word	0x2000000c
 8001238:	2000863c 	.word	0x2000863c

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	2000863c 	.word	0x2000863c

08001254 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	609a      	str	r2, [r3, #8]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3360      	adds	r3, #96	; 0x60
 80012ce:	461a      	mov	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <LL_ADC_SetOffset+0x44>)
 80012de:	4013      	ands	r3, r2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	4313      	orrs	r3, r2
 80012ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012f4:	bf00      	nop
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	03fff000 	.word	0x03fff000

08001304 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3360      	adds	r3, #96	; 0x60
 8001312:	461a      	mov	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3360      	adds	r3, #96	; 0x60
 8001340:	461a      	mov	r2, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800135a:	bf00      	nop
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3330      	adds	r3, #48	; 0x30
 800139c:	461a      	mov	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	4413      	add	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	211f      	movs	r1, #31
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	401a      	ands	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	0e9b      	lsrs	r3, r3, #26
 80013c4:	f003 011f 	and.w	r1, r3, #31
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	431a      	orrs	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3314      	adds	r3, #20
 80013f4:	461a      	mov	r2, r3
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	0e5b      	lsrs	r3, r3, #25
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	4413      	add	r3, r2
 8001402:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	0d1b      	lsrs	r3, r3, #20
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	2107      	movs	r1, #7
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	401a      	ands	r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	0d1b      	lsrs	r3, r3, #20
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	431a      	orrs	r2, r3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001454:	43db      	mvns	r3, r3
 8001456:	401a      	ands	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0318 	and.w	r3, r3, #24
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001460:	40d9      	lsrs	r1, r3
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	400b      	ands	r3, r1
 8001466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800146a:	431a      	orrs	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	0007ffff 	.word	0x0007ffff

08001484 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 031f 	and.w	r3, r3, #31
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6093      	str	r3, [r2, #8]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014d8:	d101      	bne.n	80014de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001500:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001524:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001528:	d101      	bne.n	800152e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800154c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <LL_ADC_IsEnabled+0x18>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <LL_ADC_IsEnabled+0x1a>
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800159a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800159e:	f043 0204 	orr.w	r2, r3, #4
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d101      	bne.n	80015ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d101      	bne.n	80015f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e136      	b.n	8001888 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001624:	2b00      	cmp	r3, #0
 8001626:	d109      	bne.n	800163c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fbb3 	bl	8000d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff3f 	bl	80014c4 <LL_ADC_IsDeepPowerDownEnabled>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d004      	beq.n	8001656 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff25 	bl	80014a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff5a 	bl	8001514 <LL_ADC_IsInternalRegulatorEnabled>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d115      	bne.n	8001692 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff3e 	bl	80014ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001670:	4b87      	ldr	r3, [pc, #540]	; (8001890 <HAL_ADC_Init+0x290>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	4a87      	ldr	r2, [pc, #540]	; (8001894 <HAL_ADC_Init+0x294>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	099b      	lsrs	r3, r3, #6
 800167e:	3301      	adds	r3, #1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001684:	e002      	b.n	800168c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3b01      	subs	r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f9      	bne.n	8001686 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff3c 	bl	8001514 <LL_ADC_IsInternalRegulatorEnabled>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10d      	bne.n	80016be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a6:	f043 0210 	orr.w	r2, r3, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	f043 0201 	orr.w	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff75 	bl	80015b2 <LL_ADC_REG_IsConversionOngoing>
 80016c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80cf 	bne.w	8001876 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 80cb 	bne.w	8001876 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016e8:	f043 0202 	orr.w	r2, r3, #2
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff35 	bl	8001564 <LL_ADC_IsEnabled>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d115      	bne.n	800172c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001700:	4865      	ldr	r0, [pc, #404]	; (8001898 <HAL_ADC_Init+0x298>)
 8001702:	f7ff ff2f 	bl	8001564 <LL_ADC_IsEnabled>
 8001706:	4604      	mov	r4, r0
 8001708:	4864      	ldr	r0, [pc, #400]	; (800189c <HAL_ADC_Init+0x29c>)
 800170a:	f7ff ff2b 	bl	8001564 <LL_ADC_IsEnabled>
 800170e:	4603      	mov	r3, r0
 8001710:	431c      	orrs	r4, r3
 8001712:	4863      	ldr	r0, [pc, #396]	; (80018a0 <HAL_ADC_Init+0x2a0>)
 8001714:	f7ff ff26 	bl	8001564 <LL_ADC_IsEnabled>
 8001718:	4603      	mov	r3, r0
 800171a:	4323      	orrs	r3, r4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d105      	bne.n	800172c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4619      	mov	r1, r3
 8001726:	485f      	ldr	r0, [pc, #380]	; (80018a4 <HAL_ADC_Init+0x2a4>)
 8001728:	f7ff fd94 	bl	8001254 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7e5b      	ldrb	r3, [r3, #25]
 8001730:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001736:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800173c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001742:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800174a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d106      	bne.n	8001768 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	3b01      	subs	r3, #1
 8001760:	045b      	lsls	r3, r3, #17
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	2b00      	cmp	r3, #0
 800176e:	d009      	beq.n	8001784 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_ADC_Init+0x2a8>)
 800178c:	4013      	ands	r3, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	69b9      	ldr	r1, [r7, #24]
 8001794:	430b      	orrs	r3, r1
 8001796:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff08 	bl	80015b2 <LL_ADC_REG_IsConversionOngoing>
 80017a2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff15 	bl	80015d8 <LL_ADC_INJ_IsConversionOngoing>
 80017ae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d13d      	bne.n	8001832 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d13a      	bne.n	8001832 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017c0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017c8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017d8:	f023 0302 	bic.w	r3, r3, #2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	69b9      	ldr	r1, [r7, #24]
 80017e2:	430b      	orrs	r3, r1
 80017e4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d118      	bne.n	8001822 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017fa:	f023 0304 	bic.w	r3, r3, #4
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800180c:	4311      	orrs	r1, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001812:	430a      	orrs	r2, r1
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0201 	orr.w	r2, r2, #1
 800181e:	611a      	str	r2, [r3, #16]
 8001820:	e007      	b.n	8001832 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0201 	bic.w	r2, r2, #1
 8001830:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d10c      	bne.n	8001854 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f023 010f 	bic.w	r1, r3, #15
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	631a      	str	r2, [r3, #48]	; 0x30
 8001852:	e007      	b.n	8001864 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 020f 	bic.w	r2, r2, #15
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001868:	f023 0303 	bic.w	r3, r3, #3
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	655a      	str	r2, [r3, #84]	; 0x54
 8001874:	e007      	b.n	8001886 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187a:	f043 0210 	orr.w	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001886:	7ffb      	ldrb	r3, [r7, #31]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3724      	adds	r7, #36	; 0x24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	20000004 	.word	0x20000004
 8001894:	053e2d63 	.word	0x053e2d63
 8001898:	50040000 	.word	0x50040000
 800189c:	50040100 	.word	0x50040100
 80018a0:	50040200 	.word	0x50040200
 80018a4:	50040300 	.word	0x50040300
 80018a8:	fff0c007 	.word	0xfff0c007

080018ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018b8:	4853      	ldr	r0, [pc, #332]	; (8001a08 <HAL_ADC_Start_DMA+0x15c>)
 80018ba:	f7ff fde3 	bl	8001484 <LL_ADC_GetMultimode>
 80018be:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fe74 	bl	80015b2 <LL_ADC_REG_IsConversionOngoing>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f040 8093 	bne.w	80019f8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_Start_DMA+0x34>
 80018dc:	2302      	movs	r3, #2
 80018de:	e08e      	b.n	80019fe <HAL_ADC_Start_DMA+0x152>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a47      	ldr	r2, [pc, #284]	; (8001a0c <HAL_ADC_Start_DMA+0x160>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d008      	beq.n	8001904 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d002      	beq.n	8001904 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	2b09      	cmp	r3, #9
 8001902:	d172      	bne.n	80019ea <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 fc87 	bl	8002218 <ADC_Enable>
 800190a:	4603      	mov	r3, r0
 800190c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d165      	bne.n	80019e0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001918:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a38      	ldr	r2, [pc, #224]	; (8001a10 <HAL_ADC_Start_DMA+0x164>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d002      	beq.n	8001938 <HAL_ADC_Start_DMA+0x8c>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	e000      	b.n	800193a <HAL_ADC_Start_DMA+0x8e>
 8001938:	4b36      	ldr	r3, [pc, #216]	; (8001a14 <HAL_ADC_Start_DMA+0x168>)
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	4293      	cmp	r3, r2
 8001940:	d002      	beq.n	8001948 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	f023 0206 	bic.w	r2, r3, #6
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	659a      	str	r2, [r3, #88]	; 0x58
 800196c:	e002      	b.n	8001974 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001978:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <HAL_ADC_Start_DMA+0x16c>)
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001980:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <HAL_ADC_Start_DMA+0x170>)
 8001982:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001988:	4a25      	ldr	r2, [pc, #148]	; (8001a20 <HAL_ADC_Start_DMA+0x174>)
 800198a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	221c      	movs	r2, #28
 8001992:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0210 	orr.w	r2, r2, #16
 80019aa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3340      	adds	r3, #64	; 0x40
 80019c6:	4619      	mov	r1, r3
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f000 ffde 	bl	800298c <HAL_DMA_Start_IT>
 80019d0:	4603      	mov	r3, r0
 80019d2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fdd6 	bl	800158a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80019de:	e00d      	b.n	80019fc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80019e8:	e008      	b.n	80019fc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80019f6:	e001      	b.n	80019fc <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
 80019fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	50040300 	.word	0x50040300
 8001a0c:	50040200 	.word	0x50040200
 8001a10:	50040100 	.word	0x50040100
 8001a14:	50040000 	.word	0x50040000
 8001a18:	08002325 	.word	0x08002325
 8001a1c:	080023fd 	.word	0x080023fd
 8001a20:	08002419 	.word	0x08002419

08001a24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0b6      	sub	sp, #216	; 0xd8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x22>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e3c7      	b.n	80021ea <HAL_ADC_ConfigChannel+0x7b2>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fda3 	bl	80015b2 <LL_ADC_REG_IsConversionOngoing>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 83a8 	bne.w	80021c4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d824      	bhi.n	8001ac6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	3b02      	subs	r3, #2
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d81b      	bhi.n	8001abe <HAL_ADC_ConfigChannel+0x86>
 8001a86:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <HAL_ADC_ConfigChannel+0x54>)
 8001a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8c:	08001a9d 	.word	0x08001a9d
 8001a90:	08001aa5 	.word	0x08001aa5
 8001a94:	08001aad 	.word	0x08001aad
 8001a98:	08001ab5 	.word	0x08001ab5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	605a      	str	r2, [r3, #4]
          break;
 8001aa2:	e011      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2212      	movs	r2, #18
 8001aa8:	605a      	str	r2, [r3, #4]
          break;
 8001aaa:	e00d      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2218      	movs	r2, #24
 8001ab0:	605a      	str	r2, [r3, #4]
          break;
 8001ab2:	e009      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aba:	605a      	str	r2, [r3, #4]
          break;
 8001abc:	e004      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2206      	movs	r2, #6
 8001ac2:	605a      	str	r2, [r3, #4]
          break;
 8001ac4:	e000      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ac6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f7ff fc59 	bl	800138c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fd67 	bl	80015b2 <LL_ADC_REG_IsConversionOngoing>
 8001ae4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fd73 	bl	80015d8 <LL_ADC_INJ_IsConversionOngoing>
 8001af2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001af6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 81a6 	bne.w	8001e4c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f040 81a1 	bne.w	8001e4c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6819      	ldr	r1, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	461a      	mov	r2, r3
 8001b18:	f7ff fc64 	bl	80013e4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	08db      	lsrs	r3, r3, #3
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d00a      	beq.n	8001b54 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6919      	ldr	r1, [r3, #16]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b4e:	f7ff fbb5 	bl	80012bc <LL_ADC_SetOffset>
 8001b52:	e17b      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fbd2 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10a      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x148>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fbc7 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	0e9b      	lsrs	r3, r3, #26
 8001b7a:	f003 021f 	and.w	r2, r3, #31
 8001b7e:	e01e      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x186>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fbbc 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ba6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	e004      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001bb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d105      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x19e>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	0e9b      	lsrs	r3, r3, #26
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	e018      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x1d0>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001bf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	e004      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001bfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d106      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fb8b 	bl	8001330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fb6f 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10a      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x20e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2101      	movs	r1, #1
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fb64 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	0e9b      	lsrs	r3, r3, #26
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	e01e      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x24c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fb59 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001c74:	2320      	movs	r3, #32
 8001c76:	e004      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x264>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	e018      	b.n	8001cce <HAL_ADC_ConfigChannel+0x296>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001cb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	e004      	b.n	8001cce <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d106      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fb28 	bl	8001330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fb0c 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10a      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x2d4>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2102      	movs	r1, #2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fb01 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	0e9b      	lsrs	r3, r3, #26
 8001d06:	f003 021f 	and.w	r2, r3, #31
 8001d0a:	e01e      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x312>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2102      	movs	r1, #2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff faf6 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	e004      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d105      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x32a>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	0e9b      	lsrs	r3, r3, #26
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	e016      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x358>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e004      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d106      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fac7 	bl	8001330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2103      	movs	r1, #3
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff faab 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x396>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff faa0 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	0e9b      	lsrs	r3, r3, #26
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	e017      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x3c6>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fa95 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001de8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001df0:	2320      	movs	r3, #32
 8001df2:	e003      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d105      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x3de>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0e9b      	lsrs	r3, r3, #26
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	e011      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x402>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e26:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001e2e:	2320      	movs	r3, #32
 8001e30:	e003      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d106      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2200      	movs	r2, #0
 8001e44:	2103      	movs	r1, #3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fa72 	bl	8001330 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fb87 	bl	8001564 <LL_ADC_IsEnabled>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f040 813f 	bne.w	80020dc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f7ff fae6 	bl	800143c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a8e      	ldr	r2, [pc, #568]	; (80020b0 <HAL_ADC_ConfigChannel+0x678>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	f040 8130 	bne.w	80020dc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x46c>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0e9b      	lsrs	r3, r3, #26
 8001e92:	3301      	adds	r3, #1
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2b09      	cmp	r3, #9
 8001e9a:	bf94      	ite	ls
 8001e9c:	2301      	movls	r3, #1
 8001e9e:	2300      	movhi	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e019      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x4a0>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eb4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	e003      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	2b09      	cmp	r3, #9
 8001ed0:	bf94      	ite	ls
 8001ed2:	2301      	movls	r3, #1
 8001ed4:	2300      	movhi	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d079      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x4c0>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0e9b      	lsrs	r3, r3, #26
 8001eee:	3301      	adds	r3, #1
 8001ef0:	069b      	lsls	r3, r3, #26
 8001ef2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ef6:	e015      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x4ec>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f08:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e003      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	069b      	lsls	r3, r3, #26
 8001f20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x50c>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	3301      	adds	r3, #1
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	e017      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x53c>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f54:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e003      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	ea42 0103 	orr.w	r1, r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10a      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x562>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	051b      	lsls	r3, r3, #20
 8001f98:	e018      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x594>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001fb2:	2320      	movs	r3, #32
 8001fb4:	e003      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	e080      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x5b4>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	069b      	lsls	r3, r3, #26
 8001fe6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fea:	e015      	b.n	8002018 <HAL_ADC_ConfigChannel+0x5e0>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e003      	b.n	8002010 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	3301      	adds	r3, #1
 8002012:	069b      	lsls	r3, r3, #26
 8002014:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x600>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0e9b      	lsrs	r3, r3, #26
 800202a:	3301      	adds	r3, #1
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	e017      	b.n	8002068 <HAL_ADC_ConfigChannel+0x630>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	61fb      	str	r3, [r7, #28]
  return result;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e003      	b.n	800205c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	3301      	adds	r3, #1
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	2101      	movs	r1, #1
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	ea42 0103 	orr.w	r1, r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10d      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x65c>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0e9b      	lsrs	r3, r3, #26
 800207e:	3301      	adds	r3, #1
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	3b1e      	subs	r3, #30
 800208c:	051b      	lsls	r3, r3, #20
 800208e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002092:	e01d      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x698>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	613b      	str	r3, [r7, #16]
  return result;
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e005      	b.n	80020bc <HAL_ADC_ConfigChannel+0x684>
 80020b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f003 021f 	and.w	r2, r3, #31
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	3b1e      	subs	r3, #30
 80020ca:	051b      	lsls	r3, r3, #20
 80020cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d0:	430b      	orrs	r3, r1
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	6892      	ldr	r2, [r2, #8]
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7ff f984 	bl	80013e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <HAL_ADC_ConfigChannel+0x7bc>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d07a      	beq.n	80021de <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020e8:	4843      	ldr	r0, [pc, #268]	; (80021f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80020ea:	f7ff f8d9 	bl	80012a0 <LL_ADC_GetCommonPathInternalCh>
 80020ee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a41      	ldr	r2, [pc, #260]	; (80021fc <HAL_ADC_ConfigChannel+0x7c4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d12c      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d126      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a3c      	ldr	r2, [pc, #240]	; (8002200 <HAL_ADC_ConfigChannel+0x7c8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d004      	beq.n	800211c <HAL_ADC_ConfigChannel+0x6e4>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <HAL_ADC_ConfigChannel+0x7cc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d15d      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800211c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002120:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002124:	4619      	mov	r1, r3
 8002126:	4834      	ldr	r0, [pc, #208]	; (80021f8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002128:	f7ff f8a7 	bl	800127a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800212c:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_ADC_ConfigChannel+0x7d0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	4a36      	ldr	r2, [pc, #216]	; (800220c <HAL_ADC_ConfigChannel+0x7d4>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002146:	e002      	b.n	800214e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3b01      	subs	r3, #1
 800214c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f9      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002154:	e040      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <HAL_ADC_ConfigChannel+0x7d8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d118      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x75a>
 8002160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d112      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a23      	ldr	r2, [pc, #140]	; (8002200 <HAL_ADC_ConfigChannel+0x7c8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <HAL_ADC_ConfigChannel+0x748>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a22      	ldr	r2, [pc, #136]	; (8002204 <HAL_ADC_ConfigChannel+0x7cc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d12d      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002188:	4619      	mov	r1, r3
 800218a:	481b      	ldr	r0, [pc, #108]	; (80021f8 <HAL_ADC_ConfigChannel+0x7c0>)
 800218c:	f7ff f875 	bl	800127a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002190:	e024      	b.n	80021dc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_ADC_ConfigChannel+0x7dc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d120      	bne.n	80021de <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800219c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d11a      	bne.n	80021de <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <HAL_ADC_ConfigChannel+0x7c8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d115      	bne.n	80021de <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ba:	4619      	mov	r1, r3
 80021bc:	480e      	ldr	r0, [pc, #56]	; (80021f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80021be:	f7ff f85c 	bl	800127a <LL_ADC_SetCommonPathInternalCh>
 80021c2:	e00c      	b.n	80021de <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	f043 0220 	orr.w	r2, r3, #32
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80021d6:	e002      	b.n	80021de <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021d8:	bf00      	nop
 80021da:	e000      	b.n	80021de <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	37d8      	adds	r7, #216	; 0xd8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	80080000 	.word	0x80080000
 80021f8:	50040300 	.word	0x50040300
 80021fc:	c7520000 	.word	0xc7520000
 8002200:	50040000 	.word	0x50040000
 8002204:	50040200 	.word	0x50040200
 8002208:	20000004 	.word	0x20000004
 800220c:	053e2d63 	.word	0x053e2d63
 8002210:	cb840000 	.word	0xcb840000
 8002214:	80000001 	.word	0x80000001

08002218 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f99b 	bl	8001564 <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d169      	bne.n	8002308 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	4b36      	ldr	r3, [pc, #216]	; (8002314 <ADC_Enable+0xfc>)
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00d      	beq.n	800225e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	f043 0210 	orr.w	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e055      	b.n	800230a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f96a 	bl	800153c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002268:	482b      	ldr	r0, [pc, #172]	; (8002318 <ADC_Enable+0x100>)
 800226a:	f7ff f819 	bl	80012a0 <LL_ADC_GetCommonPathInternalCh>
 800226e:	4603      	mov	r3, r0
 8002270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <ADC_Enable+0x104>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	4a28      	ldr	r2, [pc, #160]	; (8002320 <ADC_Enable+0x108>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	099b      	lsrs	r3, r3, #6
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002292:	e002      	b.n	800229a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3b01      	subs	r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f9      	bne.n	8002294 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022a0:	f7fe ffcc 	bl	800123c <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a6:	e028      	b.n	80022fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f959 	bl	8001564 <LL_ADC_IsEnabled>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d104      	bne.n	80022c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff f93d 	bl	800153c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022c2:	f7fe ffbb 	bl	800123c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d914      	bls.n	80022fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d00d      	beq.n	80022fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f043 0210 	orr.w	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e007      	b.n	800230a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d1cf      	bne.n	80022a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	8000003f 	.word	0x8000003f
 8002318:	50040300 	.word	0x50040300
 800231c:	20000004 	.word	0x20000004
 8002320:	053e2d63 	.word	0x053e2d63

08002324 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800233a:	2b00      	cmp	r3, #0
 800233c:	d14b      	bne.n	80023d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d021      	beq.n	800239c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff f802 	bl	8001366 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d032      	beq.n	80023ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d12b      	bne.n	80023ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d11f      	bne.n	80023ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	f043 0201 	orr.w	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
 800239a:	e018      	b.n	80023ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d111      	bne.n	80023ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f7fe fca6 	bl	8000d20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023d4:	e00e      	b.n	80023f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f7ff fb1e 	bl	8001a24 <HAL_ADC_ErrorCallback>
}
 80023e8:	e004      	b.n	80023f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f7fe fc78 	bl	8000d00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	f043 0204 	orr.w	r2, r3, #4
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f7ff faf0 	bl	8001a24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <LL_ADC_IsEnabled>:
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <LL_ADC_IsEnabled+0x18>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <LL_ADC_IsEnabled+0x1a>
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <LL_ADC_REG_IsConversionOngoing>:
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b04      	cmp	r3, #4
 8002484:	d101      	bne.n	800248a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b09f      	sub	sp, #124	; 0x7c
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e093      	b.n	80025de <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80024be:	2300      	movs	r3, #0
 80024c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80024c2:	2300      	movs	r3, #0
 80024c4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a47      	ldr	r2, [pc, #284]	; (80025e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d102      	bne.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024d0:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	e001      	b.n	80024da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10b      	bne.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e072      	b.n	80025de <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff ffb9 	bl	8002472 <LL_ADC_REG_IsConversionOngoing>
 8002500:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ffb3 	bl	8002472 <LL_ADC_REG_IsConversionOngoing>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d154      	bne.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002514:	2b00      	cmp	r3, #0
 8002516:	d151      	bne.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002518:	4b35      	ldr	r3, [pc, #212]	; (80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800251a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d02c      	beq.n	800257e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002536:	035b      	lsls	r3, r3, #13
 8002538:	430b      	orrs	r3, r1
 800253a:	431a      	orrs	r2, r3
 800253c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002540:	4829      	ldr	r0, [pc, #164]	; (80025e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002542:	f7ff ff83 	bl	800244c <LL_ADC_IsEnabled>
 8002546:	4604      	mov	r4, r0
 8002548:	4828      	ldr	r0, [pc, #160]	; (80025ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800254a:	f7ff ff7f 	bl	800244c <LL_ADC_IsEnabled>
 800254e:	4603      	mov	r3, r0
 8002550:	431c      	orrs	r4, r3
 8002552:	4828      	ldr	r0, [pc, #160]	; (80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002554:	f7ff ff7a 	bl	800244c <LL_ADC_IsEnabled>
 8002558:	4603      	mov	r3, r0
 800255a:	4323      	orrs	r3, r4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d137      	bne.n	80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002568:	f023 030f 	bic.w	r3, r3, #15
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	6811      	ldr	r1, [r2, #0]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	6892      	ldr	r2, [r2, #8]
 8002574:	430a      	orrs	r2, r1
 8002576:	431a      	orrs	r2, r3
 8002578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800257c:	e028      	b.n	80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800257e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002588:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800258a:	4817      	ldr	r0, [pc, #92]	; (80025e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800258c:	f7ff ff5e 	bl	800244c <LL_ADC_IsEnabled>
 8002590:	4604      	mov	r4, r0
 8002592:	4816      	ldr	r0, [pc, #88]	; (80025ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002594:	f7ff ff5a 	bl	800244c <LL_ADC_IsEnabled>
 8002598:	4603      	mov	r3, r0
 800259a:	431c      	orrs	r4, r3
 800259c:	4815      	ldr	r0, [pc, #84]	; (80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800259e:	f7ff ff55 	bl	800244c <LL_ADC_IsEnabled>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4323      	orrs	r3, r4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d112      	bne.n	80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025b2:	f023 030f 	bic.w	r3, r3, #15
 80025b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025ba:	e009      	b.n	80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	f043 0220 	orr.w	r2, r3, #32
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80025ce:	e000      	b.n	80025d2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80025de:	4618      	mov	r0, r3
 80025e0:	377c      	adds	r7, #124	; 0x7c
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}
 80025e6:	bf00      	nop
 80025e8:	50040000 	.word	0x50040000
 80025ec:	50040100 	.word	0x50040100
 80025f0:	50040300 	.word	0x50040300
 80025f4:	50040200 	.word	0x50040200

080025f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <__NVIC_SetPriorityGrouping+0x44>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002614:	4013      	ands	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262a:	4a04      	ldr	r2, [pc, #16]	; (800263c <__NVIC_SetPriorityGrouping+0x44>)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	60d3      	str	r3, [r2, #12]
}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <__NVIC_GetPriorityGrouping+0x18>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	f003 0307 	and.w	r3, r3, #7
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	2b00      	cmp	r3, #0
 800266c:	db0b      	blt.n	8002686 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	4907      	ldr	r1, [pc, #28]	; (8002694 <__NVIC_EnableIRQ+0x38>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2001      	movs	r0, #1
 800267e:	fa00 f202 	lsl.w	r2, r0, r2
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000e100 	.word	0xe000e100

08002698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	db0a      	blt.n	80026c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	490c      	ldr	r1, [pc, #48]	; (80026e4 <__NVIC_SetPriority+0x4c>)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	440b      	add	r3, r1
 80026bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c0:	e00a      	b.n	80026d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4908      	ldr	r1, [pc, #32]	; (80026e8 <__NVIC_SetPriority+0x50>)
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	3b04      	subs	r3, #4
 80026d0:	0112      	lsls	r2, r2, #4
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	440b      	add	r3, r1
 80026d6:	761a      	strb	r2, [r3, #24]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000e100 	.word	0xe000e100
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f1c3 0307 	rsb	r3, r3, #7
 8002706:	2b04      	cmp	r3, #4
 8002708:	bf28      	it	cs
 800270a:	2304      	movcs	r3, #4
 800270c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3304      	adds	r3, #4
 8002712:	2b06      	cmp	r3, #6
 8002714:	d902      	bls.n	800271c <NVIC_EncodePriority+0x30>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3b03      	subs	r3, #3
 800271a:	e000      	b.n	800271e <NVIC_EncodePriority+0x32>
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	f04f 32ff 	mov.w	r2, #4294967295
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	401a      	ands	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002734:	f04f 31ff 	mov.w	r1, #4294967295
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	43d9      	mvns	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	4313      	orrs	r3, r2
         );
}
 8002746:	4618      	mov	r0, r3
 8002748:	3724      	adds	r7, #36	; 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002764:	d301      	bcc.n	800276a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002766:	2301      	movs	r3, #1
 8002768:	e00f      	b.n	800278a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <SysTick_Config+0x40>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002772:	210f      	movs	r1, #15
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	f7ff ff8e 	bl	8002698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <SysTick_Config+0x40>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002782:	4b04      	ldr	r3, [pc, #16]	; (8002794 <SysTick_Config+0x40>)
 8002784:	2207      	movs	r2, #7
 8002786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	e000e010 	.word	0xe000e010

08002798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ff29 	bl	80025f8 <__NVIC_SetPriorityGrouping>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027c0:	f7ff ff3e 	bl	8002640 <__NVIC_GetPriorityGrouping>
 80027c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	6978      	ldr	r0, [r7, #20]
 80027cc:	f7ff ff8e 	bl	80026ec <NVIC_EncodePriority>
 80027d0:	4602      	mov	r2, r0
 80027d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff5d 	bl	8002698 <__NVIC_SetPriority>
}
 80027de:	bf00      	nop
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff31 	bl	800265c <__NVIC_EnableIRQ>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ffa2 	bl	8002754 <SysTick_Config>
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e098      	b.n	8002960 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	4b4d      	ldr	r3, [pc, #308]	; (800296c <HAL_DMA_Init+0x150>)
 8002836:	429a      	cmp	r2, r3
 8002838:	d80f      	bhi.n	800285a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	4b4b      	ldr	r3, [pc, #300]	; (8002970 <HAL_DMA_Init+0x154>)
 8002842:	4413      	add	r3, r2
 8002844:	4a4b      	ldr	r2, [pc, #300]	; (8002974 <HAL_DMA_Init+0x158>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	009a      	lsls	r2, r3, #2
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a48      	ldr	r2, [pc, #288]	; (8002978 <HAL_DMA_Init+0x15c>)
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
 8002858:	e00e      	b.n	8002878 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	4b46      	ldr	r3, [pc, #280]	; (800297c <HAL_DMA_Init+0x160>)
 8002862:	4413      	add	r3, r2
 8002864:	4a43      	ldr	r2, [pc, #268]	; (8002974 <HAL_DMA_Init+0x158>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	009a      	lsls	r2, r3, #2
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a42      	ldr	r2, [pc, #264]	; (8002980 <HAL_DMA_Init+0x164>)
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800288e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002892:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800289c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028d2:	d039      	beq.n	8002948 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_DMA_Init+0x15c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d11a      	bne.n	8002914 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028de:	4b29      	ldr	r3, [pc, #164]	; (8002984 <HAL_DMA_Init+0x168>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f003 031c 	and.w	r3, r3, #28
 80028ea:	210f      	movs	r1, #15
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	4924      	ldr	r1, [pc, #144]	; (8002984 <HAL_DMA_Init+0x168>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <HAL_DMA_Init+0x168>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f003 031c 	and.w	r3, r3, #28
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	491d      	ldr	r1, [pc, #116]	; (8002984 <HAL_DMA_Init+0x168>)
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]
 8002912:	e019      	b.n	8002948 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002914:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <HAL_DMA_Init+0x16c>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	f003 031c 	and.w	r3, r3, #28
 8002920:	210f      	movs	r1, #15
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	4917      	ldr	r1, [pc, #92]	; (8002988 <HAL_DMA_Init+0x16c>)
 800292a:	4013      	ands	r3, r2
 800292c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_DMA_Init+0x16c>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6859      	ldr	r1, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f003 031c 	and.w	r3, r3, #28
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	4911      	ldr	r1, [pc, #68]	; (8002988 <HAL_DMA_Init+0x16c>)
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40020407 	.word	0x40020407
 8002970:	bffdfff8 	.word	0xbffdfff8
 8002974:	cccccccd 	.word	0xcccccccd
 8002978:	40020000 	.word	0x40020000
 800297c:	bffdfbf8 	.word	0xbffdfbf8
 8002980:	40020400 	.word	0x40020400
 8002984:	400200a8 	.word	0x400200a8
 8002988:	400204a8 	.word	0x400204a8

0800298c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_DMA_Start_IT+0x20>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e04b      	b.n	8002a44 <HAL_DMA_Start_IT+0xb8>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d13a      	bne.n	8002a36 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0201 	bic.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f95f 	bl	8002ca8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 020e 	orr.w	r2, r2, #14
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e00f      	b.n	8002a24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0204 	bic.w	r2, r2, #4
 8002a12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 020a 	orr.w	r2, r2, #10
 8002a22:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	e005      	b.n	8002a42 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d008      	beq.n	8002a76 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2204      	movs	r2, #4
 8002a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e022      	b.n	8002abc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 020e 	bic.w	r2, r2, #14
 8002a84:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 021c 	and.w	r2, r3, #28
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d005      	beq.n	8002aec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	e029      	b.n	8002b40 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 020e 	bic.w	r2, r2, #14
 8002afa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	f003 021c 	and.w	r2, r3, #28
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	2101      	movs	r1, #1
 8002b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
    }
  }
  return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f003 031c 	and.w	r3, r3, #28
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d026      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x7a>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d021      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d107      	bne.n	8002b9e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0204 	bic.w	r2, r2, #4
 8002b9c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f003 021c 	and.w	r2, r3, #28
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2104      	movs	r1, #4
 8002bac:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d071      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002bc2:	e06c      	b.n	8002c9e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	f003 031c 	and.w	r3, r3, #28
 8002bcc:	2202      	movs	r2, #2
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d02e      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xec>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d029      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 020a 	bic.w	r2, r2, #10
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	f003 021c 	and.w	r2, r3, #28
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	2102      	movs	r1, #2
 8002c16:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d038      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c34:	e033      	b.n	8002c9e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f003 031c 	and.w	r3, r3, #28
 8002c3e:	2208      	movs	r2, #8
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d02a      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x156>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d025      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 020e 	bic.w	r2, r2, #14
 8002c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	f003 021c 	and.w	r2, r3, #28
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
}
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f003 021c 	and.w	r2, r3, #28
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d108      	bne.n	8002cec <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cea:	e007      	b.n	8002cfc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	60da      	str	r2, [r3, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d16:	e17f      	b.n	8003018 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8171 	beq.w	8003012 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d005      	beq.n	8002d48 <HAL_GPIO_Init+0x40>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d130      	bne.n	8002daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d7e:	2201      	movs	r2, #1
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f003 0201 	and.w	r2, r3, #1
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d118      	bne.n	8002de8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	f003 0201 	and.w	r2, r3, #1
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d017      	beq.n	8002e24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d123      	bne.n	8002e78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	08da      	lsrs	r2, r3, #3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3208      	adds	r2, #8
 8002e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	220f      	movs	r2, #15
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	08da      	lsrs	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3208      	adds	r2, #8
 8002e72:	6939      	ldr	r1, [r7, #16]
 8002e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0203 	and.w	r2, r3, #3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80ac 	beq.w	8003012 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eba:	4b5f      	ldr	r3, [pc, #380]	; (8003038 <HAL_GPIO_Init+0x330>)
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebe:	4a5e      	ldr	r2, [pc, #376]	; (8003038 <HAL_GPIO_Init+0x330>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <HAL_GPIO_Init+0x330>)
 8002ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ed2:	4a5a      	ldr	r2, [pc, #360]	; (800303c <HAL_GPIO_Init+0x334>)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002efc:	d025      	beq.n	8002f4a <HAL_GPIO_Init+0x242>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4f      	ldr	r2, [pc, #316]	; (8003040 <HAL_GPIO_Init+0x338>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01f      	beq.n	8002f46 <HAL_GPIO_Init+0x23e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4e      	ldr	r2, [pc, #312]	; (8003044 <HAL_GPIO_Init+0x33c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d019      	beq.n	8002f42 <HAL_GPIO_Init+0x23a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4d      	ldr	r2, [pc, #308]	; (8003048 <HAL_GPIO_Init+0x340>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_GPIO_Init+0x236>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4c      	ldr	r2, [pc, #304]	; (800304c <HAL_GPIO_Init+0x344>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00d      	beq.n	8002f3a <HAL_GPIO_Init+0x232>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4b      	ldr	r2, [pc, #300]	; (8003050 <HAL_GPIO_Init+0x348>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d007      	beq.n	8002f36 <HAL_GPIO_Init+0x22e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4a      	ldr	r2, [pc, #296]	; (8003054 <HAL_GPIO_Init+0x34c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_GPIO_Init+0x22a>
 8002f2e:	2306      	movs	r3, #6
 8002f30:	e00c      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f32:	2307      	movs	r3, #7
 8002f34:	e00a      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f36:	2305      	movs	r3, #5
 8002f38:	e008      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e004      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	f002 0203 	and.w	r2, r2, #3
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	4093      	lsls	r3, r2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f5c:	4937      	ldr	r1, [pc, #220]	; (800303c <HAL_GPIO_Init+0x334>)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f8e:	4a32      	ldr	r2, [pc, #200]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f94:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fbe:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fe2:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800300c:	4a12      	ldr	r2, [pc, #72]	; (8003058 <HAL_GPIO_Init+0x350>)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3301      	adds	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa22 f303 	lsr.w	r3, r2, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	f47f ae78 	bne.w	8002d18 <HAL_GPIO_Init+0x10>
  }
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	40010000 	.word	0x40010000
 8003040:	48000400 	.word	0x48000400
 8003044:	48000800 	.word	0x48000800
 8003048:	48000c00 	.word	0x48000c00
 800304c:	48001000 	.word	0x48001000
 8003050:	48001400 	.word	0x48001400
 8003054:	48001800 	.word	0x48001800
 8003058:	40010400 	.word	0x40010400

0800305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003078:	e002      	b.n	8003080 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40007000 	.word	0x40007000

080030ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40007000 	.word	0x40007000

080030c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d6:	d130      	bne.n	800313a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d8:	4b23      	ldr	r3, [pc, #140]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e4:	d038      	beq.n	8003158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030ee:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2232      	movs	r2, #50	; 0x32
 80030fc:	fb02 f303 	mul.w	r3, r2, r3
 8003100:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0c9b      	lsrs	r3, r3, #18
 8003108:	3301      	adds	r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800310c:	e002      	b.n	8003114 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3b01      	subs	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003114:	4b14      	ldr	r3, [pc, #80]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003120:	d102      	bne.n	8003128 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f2      	bne.n	800310e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003134:	d110      	bne.n	8003158 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e00f      	b.n	800315a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003146:	d007      	beq.n	8003158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003150:	4a05      	ldr	r2, [pc, #20]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003156:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40007000 	.word	0x40007000
 800316c:	20000004 	.word	0x20000004
 8003170:	431bde83 	.word	0x431bde83

08003174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e3c6      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003186:	4ba1      	ldr	r3, [pc, #644]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003190:	4b9e      	ldr	r3, [pc, #632]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80e4 	beq.w	8003370 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <HAL_RCC_OscConfig+0x4a>
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	f040 808b 	bne.w	80032cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	f040 8087 	bne.w	80032cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031be:	4b93      	ldr	r3, [pc, #588]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_RCC_OscConfig+0x62>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e39e      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1a      	ldr	r2, [r3, #32]
 80031da:	4b8c      	ldr	r3, [pc, #560]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_RCC_OscConfig+0x7c>
 80031e6:	4b89      	ldr	r3, [pc, #548]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ee:	e005      	b.n	80031fc <HAL_RCC_OscConfig+0x88>
 80031f0:	4b86      	ldr	r3, [pc, #536]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80031f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d223      	bcs.n	8003248 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fd53 	bl	8003cb0 <RCC_SetFlashLatencyFromMSIRange>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e37f      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003214:	4b7d      	ldr	r3, [pc, #500]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a7c      	ldr	r2, [pc, #496]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800321a:	f043 0308 	orr.w	r3, r3, #8
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b7a      	ldr	r3, [pc, #488]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4977      	ldr	r1, [pc, #476]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003232:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	4972      	ldr	r1, [pc, #456]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
 8003246:	e025      	b.n	8003294 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003248:	4b70      	ldr	r3, [pc, #448]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6f      	ldr	r2, [pc, #444]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800324e:	f043 0308 	orr.w	r3, r3, #8
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b6d      	ldr	r3, [pc, #436]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	496a      	ldr	r1, [pc, #424]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003266:	4b69      	ldr	r3, [pc, #420]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	4965      	ldr	r1, [pc, #404]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d109      	bne.n	8003294 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fd13 	bl	8003cb0 <RCC_SetFlashLatencyFromMSIRange>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e33f      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003294:	f000 fc48 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b5c      	ldr	r3, [pc, #368]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	495a      	ldr	r1, [pc, #360]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
 80032b0:	4a58      	ldr	r2, [pc, #352]	; (8003414 <HAL_RCC_OscConfig+0x2a0>)
 80032b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032b4:	4b58      	ldr	r3, [pc, #352]	; (8003418 <HAL_RCC_OscConfig+0x2a4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd ff6f 	bl	800119c <HAL_InitTick>
 80032be:	4603      	mov	r3, r0
 80032c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d052      	beq.n	800336e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	e323      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d032      	beq.n	800333a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032d4:	4b4d      	ldr	r3, [pc, #308]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a4c      	ldr	r2, [pc, #304]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032e0:	f7fd ffac 	bl	800123c <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e8:	f7fd ffa8 	bl	800123c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e30c      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032fa:	4b44      	ldr	r3, [pc, #272]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a40      	ldr	r2, [pc, #256]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800330c:	f043 0308 	orr.w	r3, r3, #8
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b3e      	ldr	r3, [pc, #248]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	493b      	ldr	r1, [pc, #236]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003324:	4b39      	ldr	r3, [pc, #228]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	4936      	ldr	r1, [pc, #216]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
 8003338:	e01a      	b.n	8003370 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800333a:	4b34      	ldr	r3, [pc, #208]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a33      	ldr	r2, [pc, #204]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003346:	f7fd ff79 	bl	800123c <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800334e:	f7fd ff75 	bl	800123c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e2d9      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003360:	4b2a      	ldr	r3, [pc, #168]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x1da>
 800336c:	e000      	b.n	8003370 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800336e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d074      	beq.n	8003466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b08      	cmp	r3, #8
 8003380:	d005      	beq.n	800338e <HAL_RCC_OscConfig+0x21a>
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d10e      	bne.n	80033a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d10b      	bne.n	80033a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338e:	4b1f      	ldr	r3, [pc, #124]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d064      	beq.n	8003464 <HAL_RCC_OscConfig+0x2f0>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d160      	bne.n	8003464 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e2b6      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x24a>
 80033b0:	4b16      	ldr	r3, [pc, #88]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a15      	ldr	r2, [pc, #84]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	e01d      	b.n	80033fa <HAL_RCC_OscConfig+0x286>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCC_OscConfig+0x26e>
 80033c8:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0f      	ldr	r2, [pc, #60]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a0c      	ldr	r2, [pc, #48]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	e00b      	b.n	80033fa <HAL_RCC_OscConfig+0x286>
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a09      	ldr	r2, [pc, #36]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a06      	ldr	r2, [pc, #24]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01c      	beq.n	800343c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fd ff1b 	bl	800123c <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003408:	e011      	b.n	800342e <HAL_RCC_OscConfig+0x2ba>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	080074a8 	.word	0x080074a8
 8003414:	20000004 	.word	0x20000004
 8003418:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd ff0e 	bl	800123c <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e272      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342e:	4baf      	ldr	r3, [pc, #700]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x2a8>
 800343a:	e014      	b.n	8003466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fd fefe 	bl	800123c <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003444:	f7fd fefa 	bl	800123c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e25e      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003456:	4ba5      	ldr	r3, [pc, #660]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x2d0>
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d060      	beq.n	8003534 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d005      	beq.n	8003484 <HAL_RCC_OscConfig+0x310>
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d119      	bne.n	80034b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d116      	bne.n	80034b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003484:	4b99      	ldr	r3, [pc, #612]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_OscConfig+0x328>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e23b      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b93      	ldr	r3, [pc, #588]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	4990      	ldr	r1, [pc, #576]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b0:	e040      	b.n	8003534 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d023      	beq.n	8003502 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ba:	4b8c      	ldr	r3, [pc, #560]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a8b      	ldr	r2, [pc, #556]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fd feb9 	bl	800123c <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fd feb5 	bl	800123c <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e219      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e0:	4b82      	ldr	r3, [pc, #520]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	497c      	ldr	r1, [pc, #496]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
 8003500:	e018      	b.n	8003534 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b7a      	ldr	r3, [pc, #488]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a79      	ldr	r2, [pc, #484]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fd fe95 	bl	800123c <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003516:	f7fd fe91 	bl	800123c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e1f5      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003528:	4b70      	ldr	r3, [pc, #448]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d03c      	beq.n	80035ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01c      	beq.n	8003582 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003548:	4b68      	ldr	r3, [pc, #416]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800354a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354e:	4a67      	ldr	r2, [pc, #412]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fd fe70 	bl	800123c <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003560:	f7fd fe6c 	bl	800123c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e1d0      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003572:	4b5e      	ldr	r3, [pc, #376]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ef      	beq.n	8003560 <HAL_RCC_OscConfig+0x3ec>
 8003580:	e01b      	b.n	80035ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003582:	4b5a      	ldr	r3, [pc, #360]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003588:	4a58      	ldr	r2, [pc, #352]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7fd fe53 	bl	800123c <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800359a:	f7fd fe4f 	bl	800123c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1b3      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ac:	4b4f      	ldr	r3, [pc, #316]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ef      	bne.n	800359a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80a6 	beq.w	8003714 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035cc:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d8:	4b44      	ldr	r3, [pc, #272]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	4a43      	ldr	r2, [pc, #268]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80035de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e2:	6593      	str	r3, [r2, #88]	; 0x58
 80035e4:	4b41      	ldr	r3, [pc, #260]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f0:	2301      	movs	r3, #1
 80035f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f4:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <HAL_RCC_OscConfig+0x57c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d118      	bne.n	8003632 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003600:	4b3b      	ldr	r3, [pc, #236]	; (80036f0 <HAL_RCC_OscConfig+0x57c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a3a      	ldr	r2, [pc, #232]	; (80036f0 <HAL_RCC_OscConfig+0x57c>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360c:	f7fd fe16 	bl	800123c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003614:	f7fd fe12 	bl	800123c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e176      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003626:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <HAL_RCC_OscConfig+0x57c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d108      	bne.n	800364c <HAL_RCC_OscConfig+0x4d8>
 800363a:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	4a2a      	ldr	r2, [pc, #168]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800364a:	e024      	b.n	8003696 <HAL_RCC_OscConfig+0x522>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b05      	cmp	r3, #5
 8003652:	d110      	bne.n	8003676 <HAL_RCC_OscConfig+0x502>
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	4a24      	ldr	r2, [pc, #144]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003664:	4b21      	ldr	r3, [pc, #132]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	4a20      	ldr	r2, [pc, #128]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003674:	e00f      	b.n	8003696 <HAL_RCC_OscConfig+0x522>
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	4a17      	ldr	r2, [pc, #92]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800368e:	f023 0304 	bic.w	r3, r3, #4
 8003692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369e:	f7fd fdcd 	bl	800123c <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a4:	e00a      	b.n	80036bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7fd fdc9 	bl	800123c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e12b      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0ed      	beq.n	80036a6 <HAL_RCC_OscConfig+0x532>
 80036ca:	e01a      	b.n	8003702 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fd fdb6 	bl	800123c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d2:	e00f      	b.n	80036f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fd fdb2 	bl	800123c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d906      	bls.n	80036f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e114      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f4:	4b89      	ldr	r3, [pc, #548]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e8      	bne.n	80036d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003702:	7ffb      	ldrb	r3, [r7, #31]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003708:	4b84      	ldr	r3, [pc, #528]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	4a83      	ldr	r2, [pc, #524]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 800370e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003712:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80fa 	beq.w	8003912 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	2b02      	cmp	r3, #2
 8003724:	f040 80d0 	bne.w	80038c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003728:	4b7c      	ldr	r3, [pc, #496]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f003 0203 	and.w	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	429a      	cmp	r2, r3
 800373a:	d130      	bne.n	800379e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	3b01      	subs	r3, #1
 8003748:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d127      	bne.n	800379e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003758:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d11f      	bne.n	800379e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003768:	2a07      	cmp	r2, #7
 800376a:	bf14      	ite	ne
 800376c:	2201      	movne	r2, #1
 800376e:	2200      	moveq	r2, #0
 8003770:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003772:	4293      	cmp	r3, r2
 8003774:	d113      	bne.n	800379e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d109      	bne.n	800379e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	3b01      	subs	r3, #1
 8003798:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d06e      	beq.n	800387c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b0c      	cmp	r3, #12
 80037a2:	d069      	beq.n	8003878 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037a4:	4b5d      	ldr	r3, [pc, #372]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037b0:	4b5a      	ldr	r3, [pc, #360]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0a9      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037c0:	4b56      	ldr	r3, [pc, #344]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a55      	ldr	r2, [pc, #340]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 80037c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037cc:	f7fd fd36 	bl	800123c <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fd fd32 	bl	800123c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e096      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e6:	4b4d      	ldr	r3, [pc, #308]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f2:	4b4a      	ldr	r3, [pc, #296]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	4b4a      	ldr	r3, [pc, #296]	; (8003920 <HAL_RCC_OscConfig+0x7ac>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003802:	3a01      	subs	r2, #1
 8003804:	0112      	lsls	r2, r2, #4
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800380c:	0212      	lsls	r2, r2, #8
 800380e:	4311      	orrs	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003814:	0852      	lsrs	r2, r2, #1
 8003816:	3a01      	subs	r2, #1
 8003818:	0552      	lsls	r2, r2, #21
 800381a:	4311      	orrs	r1, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003820:	0852      	lsrs	r2, r2, #1
 8003822:	3a01      	subs	r2, #1
 8003824:	0652      	lsls	r2, r2, #25
 8003826:	4311      	orrs	r1, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800382c:	0912      	lsrs	r2, r2, #4
 800382e:	0452      	lsls	r2, r2, #17
 8003830:	430a      	orrs	r2, r1
 8003832:	493a      	ldr	r1, [pc, #232]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 8003834:	4313      	orrs	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003838:	4b38      	ldr	r3, [pc, #224]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a37      	ldr	r2, [pc, #220]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003842:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003844:	4b35      	ldr	r3, [pc, #212]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4a34      	ldr	r2, [pc, #208]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 800384a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003850:	f7fd fcf4 	bl	800123c <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fd fcf0 	bl	800123c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e054      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386a:	4b2c      	ldr	r3, [pc, #176]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003876:	e04c      	b.n	8003912 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e04b      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387c:	4b27      	ldr	r3, [pc, #156]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d144      	bne.n	8003912 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003888:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a23      	ldr	r2, [pc, #140]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 800388e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003892:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003894:	4b21      	ldr	r3, [pc, #132]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a20      	ldr	r2, [pc, #128]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 800389a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038a0:	f7fd fccc 	bl	800123c <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fd fcc8 	bl	800123c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e02c      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	4b18      	ldr	r3, [pc, #96]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x734>
 80038c6:	e024      	b.n	8003912 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d01f      	beq.n	800390e <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b13      	ldr	r3, [pc, #76]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a12      	ldr	r2, [pc, #72]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 80038d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fd fcaf 	bl	800123c <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e2:	f7fd fcab 	bl	800123c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e00f      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f0      	bne.n	80038e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	4905      	ldr	r1, [pc, #20]	; (800391c <HAL_RCC_OscConfig+0x7a8>)
 8003906:	4b07      	ldr	r3, [pc, #28]	; (8003924 <HAL_RCC_OscConfig+0x7b0>)
 8003908:	4013      	ands	r3, r2
 800390a:	60cb      	str	r3, [r1, #12]
 800390c:	e001      	b.n	8003912 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40021000 	.word	0x40021000
 8003920:	f99d808c 	.word	0xf99d808c
 8003924:	feeefffc 	.word	0xfeeefffc

08003928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0e7      	b.n	8003b0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800393c:	4b75      	ldr	r3, [pc, #468]	; (8003b14 <HAL_RCC_ClockConfig+0x1ec>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d910      	bls.n	800396c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <HAL_RCC_ClockConfig+0x1ec>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 0207 	bic.w	r2, r3, #7
 8003952:	4970      	ldr	r1, [pc, #448]	; (8003b14 <HAL_RCC_ClockConfig+0x1ec>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b6e      	ldr	r3, [pc, #440]	; (8003b14 <HAL_RCC_ClockConfig+0x1ec>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0cf      	b.n	8003b0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d010      	beq.n	800399a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	4b66      	ldr	r3, [pc, #408]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003984:	429a      	cmp	r2, r3
 8003986:	d908      	bls.n	800399a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003988:	4b63      	ldr	r3, [pc, #396]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4960      	ldr	r1, [pc, #384]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d04c      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ae:	4b5a      	ldr	r3, [pc, #360]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d121      	bne.n	80039fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e0a6      	b.n	8003b0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c6:	4b54      	ldr	r3, [pc, #336]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d115      	bne.n	80039fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e09a      	b.n	8003b0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039de:	4b4e      	ldr	r3, [pc, #312]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e08e      	b.n	8003b0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ee:	4b4a      	ldr	r3, [pc, #296]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e086      	b.n	8003b0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039fe:	4b46      	ldr	r3, [pc, #280]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4943      	ldr	r1, [pc, #268]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a10:	f7fd fc14 	bl	800123c <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a18:	f7fd fc10 	bl	800123c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e06e      	b.n	8003b0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	4b3a      	ldr	r3, [pc, #232]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 020c 	and.w	r2, r3, #12
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d1eb      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d010      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	4b31      	ldr	r3, [pc, #196]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d208      	bcs.n	8003a6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b2e      	ldr	r3, [pc, #184]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	492b      	ldr	r1, [pc, #172]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a6e:	4b29      	ldr	r3, [pc, #164]	; (8003b14 <HAL_RCC_ClockConfig+0x1ec>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d210      	bcs.n	8003a9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7c:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <HAL_RCC_ClockConfig+0x1ec>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 0207 	bic.w	r2, r3, #7
 8003a84:	4923      	ldr	r1, [pc, #140]	; (8003b14 <HAL_RCC_ClockConfig+0x1ec>)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8c:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <HAL_RCC_ClockConfig+0x1ec>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d001      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e036      	b.n	8003b0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aaa:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	4918      	ldr	r1, [pc, #96]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ac8:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4910      	ldr	r1, [pc, #64]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003adc:	f000 f824 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	490b      	ldr	r1, [pc, #44]	; (8003b1c <HAL_RCC_ClockConfig+0x1f4>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
 8003af8:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1f8>)
 8003afa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCC_ClockConfig+0x1fc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd fb4b 	bl	800119c <HAL_InitTick>
 8003b06:	4603      	mov	r3, r0
 8003b08:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40022000 	.word	0x40022000
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	080074a8 	.word	0x080074a8
 8003b20:	20000004 	.word	0x20000004
 8003b24:	20000008 	.word	0x20000008

08003b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b089      	sub	sp, #36	; 0x24
 8003b2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b36:	4b3e      	ldr	r3, [pc, #248]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b40:	4b3b      	ldr	r3, [pc, #236]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x34>
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d121      	bne.n	8003b9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d11e      	bne.n	8003b9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b5c:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b68:	4b31      	ldr	r3, [pc, #196]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	e005      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b78:	4b2d      	ldr	r3, [pc, #180]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b84:	4a2b      	ldr	r2, [pc, #172]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10d      	bne.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b98:	e00a      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ba0:	4b25      	ldr	r3, [pc, #148]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	e004      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bac:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8003bae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b0c      	cmp	r3, #12
 8003bb4:	d134      	bne.n	8003c20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d003      	beq.n	8003bce <HAL_RCC_GetSysClockFreq+0xa6>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d003      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xac>
 8003bcc:	e005      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bce:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bd0:	617b      	str	r3, [r7, #20]
      break;
 8003bd2:	e005      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8003bd6:	617b      	str	r3, [r7, #20]
      break;
 8003bd8:	e002      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	617b      	str	r3, [r7, #20]
      break;
 8003bde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	3301      	adds	r3, #1
 8003bec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bee:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	fb02 f203 	mul.w	r2, r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	0e5b      	lsrs	r3, r3, #25
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	3301      	adds	r3, #1
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c20:	69bb      	ldr	r3, [r7, #24]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3724      	adds	r7, #36	; 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40021000 	.word	0x40021000
 8003c34:	080074c0 	.word	0x080074c0
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	003d0900 	.word	0x003d0900

08003c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c44:	4b03      	ldr	r3, [pc, #12]	; (8003c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000004 	.word	0x20000004

08003c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c5c:	f7ff fff0 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0a1b      	lsrs	r3, r3, #8
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4904      	ldr	r1, [pc, #16]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	080074b8 	.word	0x080074b8

08003c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c88:	f7ff ffda 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	0adb      	lsrs	r3, r3, #11
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	4904      	ldr	r1, [pc, #16]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	080074b8 	.word	0x080074b8

08003cb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cb8:	2300      	movs	r3, #0
 8003cba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cbc:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cc8:	f7ff f9f0 	bl	80030ac <HAL_PWREx_GetVoltageRange>
 8003ccc:	6178      	str	r0, [r7, #20]
 8003cce:	e014      	b.n	8003cfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	4a24      	ldr	r2, [pc, #144]	; (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cda:	6593      	str	r3, [r2, #88]	; 0x58
 8003cdc:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ce8:	f7ff f9e0 	bl	80030ac <HAL_PWREx_GetVoltageRange>
 8003cec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cee:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d00:	d10b      	bne.n	8003d1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d919      	bls.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2ba0      	cmp	r3, #160	; 0xa0
 8003d0c:	d902      	bls.n	8003d14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d0e:	2302      	movs	r3, #2
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	e013      	b.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d14:	2301      	movs	r3, #1
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	e010      	b.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b80      	cmp	r3, #128	; 0x80
 8003d1e:	d902      	bls.n	8003d26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d20:	2303      	movs	r3, #3
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	e00a      	b.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b80      	cmp	r3, #128	; 0x80
 8003d2a:	d102      	bne.n	8003d32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	e004      	b.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b70      	cmp	r3, #112	; 0x70
 8003d36:	d101      	bne.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d38:	2301      	movs	r3, #1
 8003d3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f023 0207 	bic.w	r2, r3, #7
 8003d44:	4909      	ldr	r1, [pc, #36]	; (8003d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d001      	beq.n	8003d5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40022000 	.word	0x40022000

08003d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d041      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d94:	d02a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d9a:	d824      	bhi.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003da0:	d008      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003da2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003da6:	d81e      	bhi.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db0:	d010      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003db2:	e018      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003db4:	4b86      	ldr	r3, [pc, #536]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a85      	ldr	r2, [pc, #532]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dc0:	e015      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 facb 	bl	8004364 <RCCEx_PLLSAI1_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dd2:	e00c      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3320      	adds	r3, #32
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fbb6 	bl	800454c <RCCEx_PLLSAI2_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	74fb      	strb	r3, [r7, #19]
      break;
 8003dea:	e000      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dee:	7cfb      	ldrb	r3, [r7, #19]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10b      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df4:	4b76      	ldr	r3, [pc, #472]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e02:	4973      	ldr	r1, [pc, #460]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e0a:	e001      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d041      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e24:	d02a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e2a:	d824      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e30:	d008      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e36:	d81e      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e40:	d010      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e42:	e018      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e44:	4b62      	ldr	r3, [pc, #392]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4a61      	ldr	r2, [pc, #388]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e50:	e015      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fa83 	bl	8004364 <RCCEx_PLLSAI1_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e62:	e00c      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3320      	adds	r3, #32
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fb6e 	bl	800454c <RCCEx_PLLSAI2_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e74:	e003      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	74fb      	strb	r3, [r7, #19]
      break;
 8003e7a:	e000      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e7e:	7cfb      	ldrb	r3, [r7, #19]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10b      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e84:	4b52      	ldr	r3, [pc, #328]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e92:	494f      	ldr	r1, [pc, #316]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e9a:	e001      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80a0 	beq.w	8003fee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003eb2:	4b47      	ldr	r3, [pc, #284]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec8:	4b41      	ldr	r3, [pc, #260]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	4a40      	ldr	r2, [pc, #256]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed4:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a3a      	ldr	r2, [pc, #232]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ef0:	f7fd f9a4 	bl	800123c <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ef6:	e009      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef8:	f7fd f9a0 	bl	800123c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d902      	bls.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	74fb      	strb	r3, [r7, #19]
        break;
 8003f0a:	e005      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f0c:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0ef      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d15c      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f1e:	4b2c      	ldr	r3, [pc, #176]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01f      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d019      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f3c:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f48:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f58:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	4a1c      	ldr	r2, [pc, #112]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f68:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d016      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7fd f95f 	bl	800123c <HAL_GetTick>
 8003f7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f80:	e00b      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f82:	f7fd f95b 	bl	800123c <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d902      	bls.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	74fb      	strb	r3, [r7, #19]
            break;
 8003f98:	e006      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0ec      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fae:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fbe:	4904      	ldr	r1, [pc, #16]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fc6:	e009      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	74bb      	strb	r3, [r7, #18]
 8003fcc:	e006      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fdc:	7c7b      	ldrb	r3, [r7, #17]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe2:	4b9e      	ldr	r3, [pc, #632]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	4a9d      	ldr	r2, [pc, #628]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ffa:	4b98      	ldr	r3, [pc, #608]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f023 0203 	bic.w	r2, r3, #3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	4994      	ldr	r1, [pc, #592]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800401c:	4b8f      	ldr	r3, [pc, #572]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f023 020c 	bic.w	r2, r3, #12
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	498c      	ldr	r1, [pc, #560]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800403e:	4b87      	ldr	r3, [pc, #540]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	4983      	ldr	r1, [pc, #524]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004060:	4b7e      	ldr	r3, [pc, #504]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	497b      	ldr	r1, [pc, #492]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004082:	4b76      	ldr	r3, [pc, #472]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004090:	4972      	ldr	r1, [pc, #456]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040a4:	4b6d      	ldr	r3, [pc, #436]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	496a      	ldr	r1, [pc, #424]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040c6:	4b65      	ldr	r3, [pc, #404]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d4:	4961      	ldr	r1, [pc, #388]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040e8:	4b5c      	ldr	r3, [pc, #368]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f6:	4959      	ldr	r1, [pc, #356]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800410a:	4b54      	ldr	r3, [pc, #336]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004118:	4950      	ldr	r1, [pc, #320]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800412c:	4b4b      	ldr	r3, [pc, #300]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	4948      	ldr	r1, [pc, #288]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800414e:	4b43      	ldr	r3, [pc, #268]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	493f      	ldr	r1, [pc, #252]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d028      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004170:	4b3a      	ldr	r3, [pc, #232]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417e:	4937      	ldr	r1, [pc, #220]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800418e:	d106      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004190:	4b32      	ldr	r3, [pc, #200]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4a31      	ldr	r2, [pc, #196]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800419a:	60d3      	str	r3, [r2, #12]
 800419c:	e011      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041a6:	d10c      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	2101      	movs	r1, #1
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f8d8 	bl	8004364 <RCCEx_PLLSAI1_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80041be:	7cfb      	ldrb	r3, [r7, #19]
 80041c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d028      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	491f      	ldr	r1, [pc, #124]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ec:	d106      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ee:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	4a1a      	ldr	r2, [pc, #104]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f8:	60d3      	str	r3, [r2, #12]
 80041fa:	e011      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004204:	d10c      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3304      	adds	r3, #4
 800420a:	2101      	movs	r1, #1
 800420c:	4618      	mov	r0, r3
 800420e:	f000 f8a9 	bl	8004364 <RCCEx_PLLSAI1_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004216:	7cfb      	ldrb	r3, [r7, #19]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d02b      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423a:	4908      	ldr	r1, [pc, #32]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800424a:	d109      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a02      	ldr	r2, [pc, #8]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004256:	60d3      	str	r3, [r2, #12]
 8004258:	e014      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004268:	d10c      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	2101      	movs	r1, #1
 8004270:	4618      	mov	r0, r3
 8004272:	f000 f877 	bl	8004364 <RCCEx_PLLSAI1_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800427a:	7cfb      	ldrb	r3, [r7, #19]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02f      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004290:	4b2b      	ldr	r3, [pc, #172]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429e:	4928      	ldr	r1, [pc, #160]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ae:	d10d      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	2102      	movs	r1, #2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 f854 	bl	8004364 <RCCEx_PLLSAI1_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d014      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042c6:	7cfb      	ldrb	r3, [r7, #19]
 80042c8:	74bb      	strb	r3, [r7, #18]
 80042ca:	e011      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d4:	d10c      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3320      	adds	r3, #32
 80042da:	2102      	movs	r1, #2
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 f935 	bl	800454c <RCCEx_PLLSAI2_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042fc:	4b10      	ldr	r3, [pc, #64]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800430a:	490d      	ldr	r1, [pc, #52]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800431e:	4b08      	ldr	r3, [pc, #32]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800432e:	4904      	ldr	r1, [pc, #16]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004336:	7cbb      	ldrb	r3, [r7, #18]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000

08004344 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a04      	ldr	r2, [pc, #16]	; (8004360 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000

08004364 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004372:	4b75      	ldr	r3, [pc, #468]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d018      	beq.n	80043b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800437e:	4b72      	ldr	r3, [pc, #456]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0203 	and.w	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d10d      	bne.n	80043aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
       ||
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004396:	4b6c      	ldr	r3, [pc, #432]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
       ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d047      	beq.n	800443a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
 80043ae:	e044      	b.n	800443a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d018      	beq.n	80043ea <RCCEx_PLLSAI1_Config+0x86>
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d825      	bhi.n	8004408 <RCCEx_PLLSAI1_Config+0xa4>
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d002      	beq.n	80043c6 <RCCEx_PLLSAI1_Config+0x62>
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d009      	beq.n	80043d8 <RCCEx_PLLSAI1_Config+0x74>
 80043c4:	e020      	b.n	8004408 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043c6:	4b60      	ldr	r3, [pc, #384]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d11d      	bne.n	800440e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d6:	e01a      	b.n	800440e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043d8:	4b5b      	ldr	r3, [pc, #364]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d116      	bne.n	8004412 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e8:	e013      	b.n	8004412 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ea:	4b57      	ldr	r3, [pc, #348]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10f      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043f6:	4b54      	ldr	r3, [pc, #336]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004406:	e006      	b.n	8004416 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
      break;
 800440c:	e004      	b.n	8004418 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800440e:	bf00      	nop
 8004410:	e002      	b.n	8004418 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004412:	bf00      	nop
 8004414:	e000      	b.n	8004418 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004416:	bf00      	nop
    }

    if(status == HAL_OK)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800441e:	4b4a      	ldr	r3, [pc, #296]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	3b01      	subs	r3, #1
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	430b      	orrs	r3, r1
 8004434:	4944      	ldr	r1, [pc, #272]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004436:	4313      	orrs	r3, r2
 8004438:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d17d      	bne.n	800453c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004440:	4b41      	ldr	r3, [pc, #260]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a40      	ldr	r2, [pc, #256]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004446:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800444a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444c:	f7fc fef6 	bl	800123c <HAL_GetTick>
 8004450:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004452:	e009      	b.n	8004468 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004454:	f7fc fef2 	bl	800123c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d902      	bls.n	8004468 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	73fb      	strb	r3, [r7, #15]
        break;
 8004466:	e005      	b.n	8004474 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004468:	4b37      	ldr	r3, [pc, #220]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1ef      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d160      	bne.n	800453c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d111      	bne.n	80044a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004480:	4b31      	ldr	r3, [pc, #196]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6892      	ldr	r2, [r2, #8]
 8004490:	0211      	lsls	r1, r2, #8
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68d2      	ldr	r2, [r2, #12]
 8004496:	0912      	lsrs	r2, r2, #4
 8004498:	0452      	lsls	r2, r2, #17
 800449a:	430a      	orrs	r2, r1
 800449c:	492a      	ldr	r1, [pc, #168]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	610b      	str	r3, [r1, #16]
 80044a2:	e027      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d112      	bne.n	80044d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044aa:	4b27      	ldr	r3, [pc, #156]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6892      	ldr	r2, [r2, #8]
 80044ba:	0211      	lsls	r1, r2, #8
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6912      	ldr	r2, [r2, #16]
 80044c0:	0852      	lsrs	r2, r2, #1
 80044c2:	3a01      	subs	r2, #1
 80044c4:	0552      	lsls	r2, r2, #21
 80044c6:	430a      	orrs	r2, r1
 80044c8:	491f      	ldr	r1, [pc, #124]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	610b      	str	r3, [r1, #16]
 80044ce:	e011      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044d0:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6892      	ldr	r2, [r2, #8]
 80044e0:	0211      	lsls	r1, r2, #8
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6952      	ldr	r2, [r2, #20]
 80044e6:	0852      	lsrs	r2, r2, #1
 80044e8:	3a01      	subs	r2, #1
 80044ea:	0652      	lsls	r2, r2, #25
 80044ec:	430a      	orrs	r2, r1
 80044ee:	4916      	ldr	r1, [pc, #88]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044f4:	4b14      	ldr	r3, [pc, #80]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a13      	ldr	r2, [pc, #76]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fc fe9c 	bl	800123c <HAL_GetTick>
 8004504:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004506:	e009      	b.n	800451c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004508:	f7fc fe98 	bl	800123c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d902      	bls.n	800451c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	73fb      	strb	r3, [r7, #15]
          break;
 800451a:	e005      	b.n	8004528 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ef      	beq.n	8004508 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	4904      	ldr	r1, [pc, #16]	; (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004538:	4313      	orrs	r3, r2
 800453a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800453c:	7bfb      	ldrb	r3, [r7, #15]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000

0800454c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800455a:	4b6a      	ldr	r3, [pc, #424]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d018      	beq.n	8004598 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004566:	4b67      	ldr	r3, [pc, #412]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0203 	and.w	r2, r3, #3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d10d      	bne.n	8004592 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
       ||
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800457e:	4b61      	ldr	r3, [pc, #388]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
       ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d047      	beq.n	8004622 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	e044      	b.n	8004622 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d018      	beq.n	80045d2 <RCCEx_PLLSAI2_Config+0x86>
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d825      	bhi.n	80045f0 <RCCEx_PLLSAI2_Config+0xa4>
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d002      	beq.n	80045ae <RCCEx_PLLSAI2_Config+0x62>
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d009      	beq.n	80045c0 <RCCEx_PLLSAI2_Config+0x74>
 80045ac:	e020      	b.n	80045f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045ae:	4b55      	ldr	r3, [pc, #340]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d11d      	bne.n	80045f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045be:	e01a      	b.n	80045f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045c0:	4b50      	ldr	r3, [pc, #320]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d116      	bne.n	80045fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d0:	e013      	b.n	80045fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045d2:	4b4c      	ldr	r3, [pc, #304]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10f      	bne.n	80045fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045de:	4b49      	ldr	r3, [pc, #292]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045ee:	e006      	b.n	80045fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
      break;
 80045f4:	e004      	b.n	8004600 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045f6:	bf00      	nop
 80045f8:	e002      	b.n	8004600 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10d      	bne.n	8004622 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004606:	4b3f      	ldr	r3, [pc, #252]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	3b01      	subs	r3, #1
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	430b      	orrs	r3, r1
 800461c:	4939      	ldr	r1, [pc, #228]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800461e:	4313      	orrs	r3, r2
 8004620:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d167      	bne.n	80046f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004628:	4b36      	ldr	r3, [pc, #216]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a35      	ldr	r2, [pc, #212]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004634:	f7fc fe02 	bl	800123c <HAL_GetTick>
 8004638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800463a:	e009      	b.n	8004650 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800463c:	f7fc fdfe 	bl	800123c <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d902      	bls.n	8004650 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	73fb      	strb	r3, [r7, #15]
        break;
 800464e:	e005      	b.n	800465c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004650:	4b2c      	ldr	r3, [pc, #176]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1ef      	bne.n	800463c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d14a      	bne.n	80046f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d111      	bne.n	800468c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004668:	4b26      	ldr	r3, [pc, #152]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6892      	ldr	r2, [r2, #8]
 8004678:	0211      	lsls	r1, r2, #8
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68d2      	ldr	r2, [r2, #12]
 800467e:	0912      	lsrs	r2, r2, #4
 8004680:	0452      	lsls	r2, r2, #17
 8004682:	430a      	orrs	r2, r1
 8004684:	491f      	ldr	r1, [pc, #124]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004686:	4313      	orrs	r3, r2
 8004688:	614b      	str	r3, [r1, #20]
 800468a:	e011      	b.n	80046b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800468c:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004694:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6892      	ldr	r2, [r2, #8]
 800469c:	0211      	lsls	r1, r2, #8
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6912      	ldr	r2, [r2, #16]
 80046a2:	0852      	lsrs	r2, r2, #1
 80046a4:	3a01      	subs	r2, #1
 80046a6:	0652      	lsls	r2, r2, #25
 80046a8:	430a      	orrs	r2, r1
 80046aa:	4916      	ldr	r1, [pc, #88]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046b0:	4b14      	ldr	r3, [pc, #80]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a13      	ldr	r2, [pc, #76]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7fc fdbe 	bl	800123c <HAL_GetTick>
 80046c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046c2:	e009      	b.n	80046d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046c4:	f7fc fdba 	bl	800123c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d902      	bls.n	80046d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	73fb      	strb	r3, [r7, #15]
          break;
 80046d6:	e005      	b.n	80046e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0ef      	beq.n	80046c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	4904      	ldr	r1, [pc, #16]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40021000 	.word	0x40021000

08004708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e040      	b.n	800479c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fc fbca 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2224      	movs	r2, #36	; 0x24
 8004734:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fbc2 	bl	8004ed0 <UART_SetConfig>
 800474c:	4603      	mov	r3, r0
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e022      	b.n	800479c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fe40 	bl	80053e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fec7 	bl	8005528 <UART_CheckIdleState>
 800479a:	4603      	mov	r3, r0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08a      	sub	sp, #40	; 0x28
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	f040 8082 	bne.w	80048c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_UART_Transmit+0x26>
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07a      	b.n	80048c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Transmit+0x38>
 80047d8:	2302      	movs	r3, #2
 80047da:	e073      	b.n	80048c4 <HAL_UART_Transmit+0x120>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2221      	movs	r2, #33	; 0x21
 80047f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f2:	f7fc fd23 	bl	800123c <HAL_GetTick>
 80047f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004810:	d108      	bne.n	8004824 <HAL_UART_Transmit+0x80>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	e003      	b.n	800482c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004834:	e02d      	b.n	8004892 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2200      	movs	r2, #0
 800483e:	2180      	movs	r1, #128	; 0x80
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 feba 	bl	80055ba <UART_WaitOnFlagUntilTimeout>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e039      	b.n	80048c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10b      	bne.n	800486e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	881a      	ldrh	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004862:	b292      	uxth	r2, r2
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	3302      	adds	r3, #2
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	e008      	b.n	8004880 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	781a      	ldrb	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	b292      	uxth	r2, r2
 8004878:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3301      	adds	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1cb      	bne.n	8004836 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2200      	movs	r2, #0
 80048a6:	2140      	movs	r1, #64	; 0x40
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 fe86 	bl	80055ba <UART_WaitOnFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e005      	b.n	80048c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	e000      	b.n	80048c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80048c2:	2302      	movs	r3, #2
  }
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3720      	adds	r7, #32
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b0ba      	sub	sp, #232	; 0xe8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80048f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80048fa:	4013      	ands	r3, r2
 80048fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d115      	bne.n	8004934 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00f      	beq.n	8004934 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d009      	beq.n	8004934 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 82a6 	beq.w	8004e76 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
      }
      return;
 8004932:	e2a0      	b.n	8004e76 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8117 	beq.w	8004b6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800493e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800494a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800494e:	4b85      	ldr	r3, [pc, #532]	; (8004b64 <HAL_UART_IRQHandler+0x298>)
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 810a 	beq.w	8004b6c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d011      	beq.n	8004988 <HAL_UART_IRQHandler+0xbc>
 8004964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00b      	beq.n	8004988 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2201      	movs	r2, #1
 8004976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800497e:	f043 0201 	orr.w	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d011      	beq.n	80049b8 <HAL_UART_IRQHandler+0xec>
 8004994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2202      	movs	r2, #2
 80049a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ae:	f043 0204 	orr.w	r2, r3, #4
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d011      	beq.n	80049e8 <HAL_UART_IRQHandler+0x11c>
 80049c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00b      	beq.n	80049e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2204      	movs	r2, #4
 80049d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049de:	f043 0202 	orr.w	r2, r3, #2
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d017      	beq.n	8004a24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00b      	beq.n	8004a24 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2208      	movs	r2, #8
 8004a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a1a:	f043 0208 	orr.w	r2, r3, #8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d012      	beq.n	8004a56 <HAL_UART_IRQHandler+0x18a>
 8004a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00c      	beq.n	8004a56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a4c:	f043 0220 	orr.w	r2, r3, #32
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 820c 	beq.w	8004e7a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00d      	beq.n	8004a8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	d005      	beq.n	8004aae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d04f      	beq.n	8004b4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fe47 	bl	8005742 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d141      	bne.n	8004b46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ad0:	e853 3f00 	ldrex	r3, [r3]
 8004ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1d9      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d013      	beq.n	8004b3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1a:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <HAL_UART_IRQHandler+0x29c>)
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fd ffd0 	bl	8002ac8 <HAL_DMA_Abort_IT>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d017      	beq.n	8004b5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3c:	e00f      	b.n	8004b5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f9b0 	bl	8004ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b44:	e00b      	b.n	8004b5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f9ac 	bl	8004ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b4c:	e007      	b.n	8004b5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f9a8 	bl	8004ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004b5c:	e18d      	b.n	8004e7a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5e:	bf00      	nop
    return;
 8004b60:	e18b      	b.n	8004e7a <HAL_UART_IRQHandler+0x5ae>
 8004b62:	bf00      	nop
 8004b64:	04000120 	.word	0x04000120
 8004b68:	08005809 	.word	0x08005809

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	f040 8146 	bne.w	8004e02 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 813f 	beq.w	8004e02 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8138 	beq.w	8004e02 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2210      	movs	r2, #16
 8004b98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	f040 80b4 	bne.w	8004d12 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 815f 	beq.w	8004e7e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	f080 8157 	bcs.w	8004e7e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f040 8085 	bne.w	8004cf6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1da      	bne.n	8004bec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e1      	bne.n	8004c36 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3308      	adds	r3, #8
 8004c78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3308      	adds	r3, #8
 8004c92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e3      	bne.n	8004c72 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc6:	f023 0310 	bic.w	r3, r3, #16
 8004cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cda:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e4      	bne.n	8004cb6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fd feab 	bl	8002a4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f8d4 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d10:	e0b5      	b.n	8004e7e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80a7 	beq.w	8004e82 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80a2 	beq.w	8004e82 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d60:	647b      	str	r3, [r7, #68]	; 0x44
 8004d62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e4      	bne.n	8004d3e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	623b      	str	r3, [r7, #32]
   return(result);
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	f023 0301 	bic.w	r3, r3, #1
 8004d8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3308      	adds	r3, #8
 8004d94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d98:	633a      	str	r2, [r7, #48]	; 0x30
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da0:	e841 2300 	strex	r3, r2, [r1]
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e3      	bne.n	8004d74 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0310 	bic.w	r3, r3, #16
 8004dd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	69b9      	ldr	r1, [r7, #24]
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	617b      	str	r3, [r7, #20]
   return(result);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e4      	bne.n	8004dbe <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004df8:	4619      	mov	r1, r3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f85c 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e00:	e03f      	b.n	8004e82 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00e      	beq.n	8004e2c <HAL_UART_IRQHandler+0x560>
 8004e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fd2f 	bl	8005888 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e2a:	e02d      	b.n	8004e88 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00e      	beq.n	8004e56 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01c      	beq.n	8004e86 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
    }
    return;
 8004e54:	e017      	b.n	8004e86 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d012      	beq.n	8004e88 <HAL_UART_IRQHandler+0x5bc>
 8004e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00c      	beq.n	8004e88 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fce0 	bl	8005834 <UART_EndTransmit_IT>
    return;
 8004e74:	e008      	b.n	8004e88 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004e76:	bf00      	nop
 8004e78:	e006      	b.n	8004e88 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004e7a:	bf00      	nop
 8004e7c:	e004      	b.n	8004e88 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004e7e:	bf00      	nop
 8004e80:	e002      	b.n	8004e88 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004e82:	bf00      	nop
 8004e84:	e000      	b.n	8004e88 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004e86:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e88:	37e8      	adds	r7, #232	; 0xe8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop

08004e90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed0:	b5b0      	push	{r4, r5, r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4bad      	ldr	r3, [pc, #692]	; (80051b0 <UART_SetConfig+0x2e0>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	69f9      	ldr	r1, [r7, #28]
 8004f04:	430b      	orrs	r3, r1
 8004f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4aa2      	ldr	r2, [pc, #648]	; (80051b4 <UART_SetConfig+0x2e4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a99      	ldr	r2, [pc, #612]	; (80051b8 <UART_SetConfig+0x2e8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d121      	bne.n	8004f9a <UART_SetConfig+0xca>
 8004f56:	4b99      	ldr	r3, [pc, #612]	; (80051bc <UART_SetConfig+0x2ec>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d817      	bhi.n	8004f94 <UART_SetConfig+0xc4>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <UART_SetConfig+0x9c>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004f7d 	.word	0x08004f7d
 8004f70:	08004f89 	.word	0x08004f89
 8004f74:	08004f83 	.word	0x08004f83
 8004f78:	08004f8f 	.word	0x08004f8f
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	76fb      	strb	r3, [r7, #27]
 8004f80:	e0e7      	b.n	8005152 <UART_SetConfig+0x282>
 8004f82:	2302      	movs	r3, #2
 8004f84:	76fb      	strb	r3, [r7, #27]
 8004f86:	e0e4      	b.n	8005152 <UART_SetConfig+0x282>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	76fb      	strb	r3, [r7, #27]
 8004f8c:	e0e1      	b.n	8005152 <UART_SetConfig+0x282>
 8004f8e:	2308      	movs	r3, #8
 8004f90:	76fb      	strb	r3, [r7, #27]
 8004f92:	e0de      	b.n	8005152 <UART_SetConfig+0x282>
 8004f94:	2310      	movs	r3, #16
 8004f96:	76fb      	strb	r3, [r7, #27]
 8004f98:	e0db      	b.n	8005152 <UART_SetConfig+0x282>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a88      	ldr	r2, [pc, #544]	; (80051c0 <UART_SetConfig+0x2f0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d132      	bne.n	800500a <UART_SetConfig+0x13a>
 8004fa4:	4b85      	ldr	r3, [pc, #532]	; (80051bc <UART_SetConfig+0x2ec>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d828      	bhi.n	8005004 <UART_SetConfig+0x134>
 8004fb2:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <UART_SetConfig+0xe8>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	08004fed 	.word	0x08004fed
 8004fbc:	08005005 	.word	0x08005005
 8004fc0:	08005005 	.word	0x08005005
 8004fc4:	08005005 	.word	0x08005005
 8004fc8:	08004ff9 	.word	0x08004ff9
 8004fcc:	08005005 	.word	0x08005005
 8004fd0:	08005005 	.word	0x08005005
 8004fd4:	08005005 	.word	0x08005005
 8004fd8:	08004ff3 	.word	0x08004ff3
 8004fdc:	08005005 	.word	0x08005005
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	08005005 	.word	0x08005005
 8004fe8:	08004fff 	.word	0x08004fff
 8004fec:	2300      	movs	r3, #0
 8004fee:	76fb      	strb	r3, [r7, #27]
 8004ff0:	e0af      	b.n	8005152 <UART_SetConfig+0x282>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	76fb      	strb	r3, [r7, #27]
 8004ff6:	e0ac      	b.n	8005152 <UART_SetConfig+0x282>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	76fb      	strb	r3, [r7, #27]
 8004ffc:	e0a9      	b.n	8005152 <UART_SetConfig+0x282>
 8004ffe:	2308      	movs	r3, #8
 8005000:	76fb      	strb	r3, [r7, #27]
 8005002:	e0a6      	b.n	8005152 <UART_SetConfig+0x282>
 8005004:	2310      	movs	r3, #16
 8005006:	76fb      	strb	r3, [r7, #27]
 8005008:	e0a3      	b.n	8005152 <UART_SetConfig+0x282>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a6d      	ldr	r2, [pc, #436]	; (80051c4 <UART_SetConfig+0x2f4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d120      	bne.n	8005056 <UART_SetConfig+0x186>
 8005014:	4b69      	ldr	r3, [pc, #420]	; (80051bc <UART_SetConfig+0x2ec>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800501e:	2b30      	cmp	r3, #48	; 0x30
 8005020:	d013      	beq.n	800504a <UART_SetConfig+0x17a>
 8005022:	2b30      	cmp	r3, #48	; 0x30
 8005024:	d814      	bhi.n	8005050 <UART_SetConfig+0x180>
 8005026:	2b20      	cmp	r3, #32
 8005028:	d009      	beq.n	800503e <UART_SetConfig+0x16e>
 800502a:	2b20      	cmp	r3, #32
 800502c:	d810      	bhi.n	8005050 <UART_SetConfig+0x180>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <UART_SetConfig+0x168>
 8005032:	2b10      	cmp	r3, #16
 8005034:	d006      	beq.n	8005044 <UART_SetConfig+0x174>
 8005036:	e00b      	b.n	8005050 <UART_SetConfig+0x180>
 8005038:	2300      	movs	r3, #0
 800503a:	76fb      	strb	r3, [r7, #27]
 800503c:	e089      	b.n	8005152 <UART_SetConfig+0x282>
 800503e:	2302      	movs	r3, #2
 8005040:	76fb      	strb	r3, [r7, #27]
 8005042:	e086      	b.n	8005152 <UART_SetConfig+0x282>
 8005044:	2304      	movs	r3, #4
 8005046:	76fb      	strb	r3, [r7, #27]
 8005048:	e083      	b.n	8005152 <UART_SetConfig+0x282>
 800504a:	2308      	movs	r3, #8
 800504c:	76fb      	strb	r3, [r7, #27]
 800504e:	e080      	b.n	8005152 <UART_SetConfig+0x282>
 8005050:	2310      	movs	r3, #16
 8005052:	76fb      	strb	r3, [r7, #27]
 8005054:	e07d      	b.n	8005152 <UART_SetConfig+0x282>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a5b      	ldr	r2, [pc, #364]	; (80051c8 <UART_SetConfig+0x2f8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d120      	bne.n	80050a2 <UART_SetConfig+0x1d2>
 8005060:	4b56      	ldr	r3, [pc, #344]	; (80051bc <UART_SetConfig+0x2ec>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005066:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800506a:	2bc0      	cmp	r3, #192	; 0xc0
 800506c:	d013      	beq.n	8005096 <UART_SetConfig+0x1c6>
 800506e:	2bc0      	cmp	r3, #192	; 0xc0
 8005070:	d814      	bhi.n	800509c <UART_SetConfig+0x1cc>
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d009      	beq.n	800508a <UART_SetConfig+0x1ba>
 8005076:	2b80      	cmp	r3, #128	; 0x80
 8005078:	d810      	bhi.n	800509c <UART_SetConfig+0x1cc>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <UART_SetConfig+0x1b4>
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	d006      	beq.n	8005090 <UART_SetConfig+0x1c0>
 8005082:	e00b      	b.n	800509c <UART_SetConfig+0x1cc>
 8005084:	2300      	movs	r3, #0
 8005086:	76fb      	strb	r3, [r7, #27]
 8005088:	e063      	b.n	8005152 <UART_SetConfig+0x282>
 800508a:	2302      	movs	r3, #2
 800508c:	76fb      	strb	r3, [r7, #27]
 800508e:	e060      	b.n	8005152 <UART_SetConfig+0x282>
 8005090:	2304      	movs	r3, #4
 8005092:	76fb      	strb	r3, [r7, #27]
 8005094:	e05d      	b.n	8005152 <UART_SetConfig+0x282>
 8005096:	2308      	movs	r3, #8
 8005098:	76fb      	strb	r3, [r7, #27]
 800509a:	e05a      	b.n	8005152 <UART_SetConfig+0x282>
 800509c:	2310      	movs	r3, #16
 800509e:	76fb      	strb	r3, [r7, #27]
 80050a0:	e057      	b.n	8005152 <UART_SetConfig+0x282>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a49      	ldr	r2, [pc, #292]	; (80051cc <UART_SetConfig+0x2fc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d125      	bne.n	80050f8 <UART_SetConfig+0x228>
 80050ac:	4b43      	ldr	r3, [pc, #268]	; (80051bc <UART_SetConfig+0x2ec>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ba:	d017      	beq.n	80050ec <UART_SetConfig+0x21c>
 80050bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c0:	d817      	bhi.n	80050f2 <UART_SetConfig+0x222>
 80050c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c6:	d00b      	beq.n	80050e0 <UART_SetConfig+0x210>
 80050c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050cc:	d811      	bhi.n	80050f2 <UART_SetConfig+0x222>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <UART_SetConfig+0x20a>
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d6:	d006      	beq.n	80050e6 <UART_SetConfig+0x216>
 80050d8:	e00b      	b.n	80050f2 <UART_SetConfig+0x222>
 80050da:	2300      	movs	r3, #0
 80050dc:	76fb      	strb	r3, [r7, #27]
 80050de:	e038      	b.n	8005152 <UART_SetConfig+0x282>
 80050e0:	2302      	movs	r3, #2
 80050e2:	76fb      	strb	r3, [r7, #27]
 80050e4:	e035      	b.n	8005152 <UART_SetConfig+0x282>
 80050e6:	2304      	movs	r3, #4
 80050e8:	76fb      	strb	r3, [r7, #27]
 80050ea:	e032      	b.n	8005152 <UART_SetConfig+0x282>
 80050ec:	2308      	movs	r3, #8
 80050ee:	76fb      	strb	r3, [r7, #27]
 80050f0:	e02f      	b.n	8005152 <UART_SetConfig+0x282>
 80050f2:	2310      	movs	r3, #16
 80050f4:	76fb      	strb	r3, [r7, #27]
 80050f6:	e02c      	b.n	8005152 <UART_SetConfig+0x282>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a2d      	ldr	r2, [pc, #180]	; (80051b4 <UART_SetConfig+0x2e4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d125      	bne.n	800514e <UART_SetConfig+0x27e>
 8005102:	4b2e      	ldr	r3, [pc, #184]	; (80051bc <UART_SetConfig+0x2ec>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005108:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800510c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005110:	d017      	beq.n	8005142 <UART_SetConfig+0x272>
 8005112:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005116:	d817      	bhi.n	8005148 <UART_SetConfig+0x278>
 8005118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511c:	d00b      	beq.n	8005136 <UART_SetConfig+0x266>
 800511e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005122:	d811      	bhi.n	8005148 <UART_SetConfig+0x278>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <UART_SetConfig+0x260>
 8005128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800512c:	d006      	beq.n	800513c <UART_SetConfig+0x26c>
 800512e:	e00b      	b.n	8005148 <UART_SetConfig+0x278>
 8005130:	2300      	movs	r3, #0
 8005132:	76fb      	strb	r3, [r7, #27]
 8005134:	e00d      	b.n	8005152 <UART_SetConfig+0x282>
 8005136:	2302      	movs	r3, #2
 8005138:	76fb      	strb	r3, [r7, #27]
 800513a:	e00a      	b.n	8005152 <UART_SetConfig+0x282>
 800513c:	2304      	movs	r3, #4
 800513e:	76fb      	strb	r3, [r7, #27]
 8005140:	e007      	b.n	8005152 <UART_SetConfig+0x282>
 8005142:	2308      	movs	r3, #8
 8005144:	76fb      	strb	r3, [r7, #27]
 8005146:	e004      	b.n	8005152 <UART_SetConfig+0x282>
 8005148:	2310      	movs	r3, #16
 800514a:	76fb      	strb	r3, [r7, #27]
 800514c:	e001      	b.n	8005152 <UART_SetConfig+0x282>
 800514e:	2310      	movs	r3, #16
 8005150:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <UART_SetConfig+0x2e4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	f040 8087 	bne.w	800526c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800515e:	7efb      	ldrb	r3, [r7, #27]
 8005160:	2b08      	cmp	r3, #8
 8005162:	d837      	bhi.n	80051d4 <UART_SetConfig+0x304>
 8005164:	a201      	add	r2, pc, #4	; (adr r2, 800516c <UART_SetConfig+0x29c>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	08005191 	.word	0x08005191
 8005170:	080051d5 	.word	0x080051d5
 8005174:	08005199 	.word	0x08005199
 8005178:	080051d5 	.word	0x080051d5
 800517c:	0800519f 	.word	0x0800519f
 8005180:	080051d5 	.word	0x080051d5
 8005184:	080051d5 	.word	0x080051d5
 8005188:	080051d5 	.word	0x080051d5
 800518c:	080051a7 	.word	0x080051a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005190:	f7fe fd62 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8005194:	6178      	str	r0, [r7, #20]
        break;
 8005196:	e022      	b.n	80051de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005198:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <UART_SetConfig+0x300>)
 800519a:	617b      	str	r3, [r7, #20]
        break;
 800519c:	e01f      	b.n	80051de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800519e:	f7fe fcc3 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 80051a2:	6178      	str	r0, [r7, #20]
        break;
 80051a4:	e01b      	b.n	80051de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051aa:	617b      	str	r3, [r7, #20]
        break;
 80051ac:	e017      	b.n	80051de <UART_SetConfig+0x30e>
 80051ae:	bf00      	nop
 80051b0:	efff69f3 	.word	0xefff69f3
 80051b4:	40008000 	.word	0x40008000
 80051b8:	40013800 	.word	0x40013800
 80051bc:	40021000 	.word	0x40021000
 80051c0:	40004400 	.word	0x40004400
 80051c4:	40004800 	.word	0x40004800
 80051c8:	40004c00 	.word	0x40004c00
 80051cc:	40005000 	.word	0x40005000
 80051d0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	76bb      	strb	r3, [r7, #26]
        break;
 80051dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80f1 	beq.w	80053c8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4413      	add	r3, r2
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d305      	bcc.n	8005202 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d902      	bls.n	8005208 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	76bb      	strb	r3, [r7, #26]
 8005206:	e0df      	b.n	80053c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	4618      	mov	r0, r3
 800520c:	f04f 0100 	mov.w	r1, #0
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	020b      	lsls	r3, r1, #8
 800521a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800521e:	0202      	lsls	r2, r0, #8
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	6849      	ldr	r1, [r1, #4]
 8005224:	0849      	lsrs	r1, r1, #1
 8005226:	4608      	mov	r0, r1
 8005228:	f04f 0100 	mov.w	r1, #0
 800522c:	1814      	adds	r4, r2, r0
 800522e:	eb43 0501 	adc.w	r5, r3, r1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	461a      	mov	r2, r3
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	4620      	mov	r0, r4
 800523e:	4629      	mov	r1, r5
 8005240:	f7fb f87e 	bl	8000340 <__aeabi_uldivmod>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4613      	mov	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005252:	d308      	bcc.n	8005266 <UART_SetConfig+0x396>
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800525a:	d204      	bcs.n	8005266 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	60da      	str	r2, [r3, #12]
 8005264:	e0b0      	b.n	80053c8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	76bb      	strb	r3, [r7, #26]
 800526a:	e0ad      	b.n	80053c8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005274:	d15b      	bne.n	800532e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005276:	7efb      	ldrb	r3, [r7, #27]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d828      	bhi.n	80052ce <UART_SetConfig+0x3fe>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x3b4>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b9 	.word	0x080052b9
 8005290:	080052cf 	.word	0x080052cf
 8005294:	080052bf 	.word	0x080052bf
 8005298:	080052cf 	.word	0x080052cf
 800529c:	080052cf 	.word	0x080052cf
 80052a0:	080052cf 	.word	0x080052cf
 80052a4:	080052c7 	.word	0x080052c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a8:	f7fe fcd6 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 80052ac:	6178      	str	r0, [r7, #20]
        break;
 80052ae:	e013      	b.n	80052d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b0:	f7fe fce8 	bl	8003c84 <HAL_RCC_GetPCLK2Freq>
 80052b4:	6178      	str	r0, [r7, #20]
        break;
 80052b6:	e00f      	b.n	80052d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b8:	4b49      	ldr	r3, [pc, #292]	; (80053e0 <UART_SetConfig+0x510>)
 80052ba:	617b      	str	r3, [r7, #20]
        break;
 80052bc:	e00c      	b.n	80052d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052be:	f7fe fc33 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 80052c2:	6178      	str	r0, [r7, #20]
        break;
 80052c4:	e008      	b.n	80052d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ca:	617b      	str	r3, [r7, #20]
        break;
 80052cc:	e004      	b.n	80052d8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	76bb      	strb	r3, [r7, #26]
        break;
 80052d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d074      	beq.n	80053c8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	005a      	lsls	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	085b      	lsrs	r3, r3, #1
 80052e8:	441a      	add	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	d916      	bls.n	8005328 <UART_SetConfig+0x458>
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005300:	d212      	bcs.n	8005328 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	b29b      	uxth	r3, r3
 8005306:	f023 030f 	bic.w	r3, r3, #15
 800530a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	b29b      	uxth	r3, r3
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	b29a      	uxth	r2, r3
 8005318:	89fb      	ldrh	r3, [r7, #14]
 800531a:	4313      	orrs	r3, r2
 800531c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	89fa      	ldrh	r2, [r7, #14]
 8005324:	60da      	str	r2, [r3, #12]
 8005326:	e04f      	b.n	80053c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	76bb      	strb	r3, [r7, #26]
 800532c:	e04c      	b.n	80053c8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800532e:	7efb      	ldrb	r3, [r7, #27]
 8005330:	2b08      	cmp	r3, #8
 8005332:	d828      	bhi.n	8005386 <UART_SetConfig+0x4b6>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <UART_SetConfig+0x46c>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005361 	.word	0x08005361
 8005340:	08005369 	.word	0x08005369
 8005344:	08005371 	.word	0x08005371
 8005348:	08005387 	.word	0x08005387
 800534c:	08005377 	.word	0x08005377
 8005350:	08005387 	.word	0x08005387
 8005354:	08005387 	.word	0x08005387
 8005358:	08005387 	.word	0x08005387
 800535c:	0800537f 	.word	0x0800537f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005360:	f7fe fc7a 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8005364:	6178      	str	r0, [r7, #20]
        break;
 8005366:	e013      	b.n	8005390 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005368:	f7fe fc8c 	bl	8003c84 <HAL_RCC_GetPCLK2Freq>
 800536c:	6178      	str	r0, [r7, #20]
        break;
 800536e:	e00f      	b.n	8005390 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005370:	4b1b      	ldr	r3, [pc, #108]	; (80053e0 <UART_SetConfig+0x510>)
 8005372:	617b      	str	r3, [r7, #20]
        break;
 8005374:	e00c      	b.n	8005390 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005376:	f7fe fbd7 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 800537a:	6178      	str	r0, [r7, #20]
        break;
 800537c:	e008      	b.n	8005390 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005382:	617b      	str	r3, [r7, #20]
        break;
 8005384:	e004      	b.n	8005390 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	76bb      	strb	r3, [r7, #26]
        break;
 800538e:	bf00      	nop
    }

    if (pclk != 0U)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d018      	beq.n	80053c8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	085a      	lsrs	r2, r3, #1
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	441a      	add	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b0f      	cmp	r3, #15
 80053ae:	d909      	bls.n	80053c4 <UART_SetConfig+0x4f4>
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b6:	d205      	bcs.n	80053c4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60da      	str	r2, [r3, #12]
 80053c2:	e001      	b.n	80053c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053d4:	7ebb      	ldrb	r3, [r7, #26]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3720      	adds	r7, #32
 80053da:	46bd      	mov	sp, r7
 80053dc:	bdb0      	pop	{r4, r5, r7, pc}
 80053de:	bf00      	nop
 80053e0:	00f42400 	.word	0x00f42400

080053e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01a      	beq.n	80054fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e2:	d10a      	bne.n	80054fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	605a      	str	r2, [r3, #4]
  }
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af02      	add	r7, sp, #8
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005538:	f7fb fe80 	bl	800123c <HAL_GetTick>
 800553c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b08      	cmp	r3, #8
 800554a:	d10e      	bne.n	800556a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800554c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f82d 	bl	80055ba <UART_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e023      	b.n	80055b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b04      	cmp	r3, #4
 8005576:	d10e      	bne.n	8005596 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f817 	bl	80055ba <UART_WaitOnFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e00d      	b.n	80055b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b09c      	sub	sp, #112	; 0x70
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	4613      	mov	r3, r2
 80055c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ca:	e0a5      	b.n	8005718 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	f000 80a1 	beq.w	8005718 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d6:	f7fb fe31 	bl	800123c <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <UART_WaitOnFlagUntilTimeout+0x32>
 80055e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d13e      	bne.n	800566a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005600:	667b      	str	r3, [r7, #100]	; 0x64
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800560a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800560c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005610:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e6      	bne.n	80055ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3308      	adds	r3, #8
 8005624:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	663b      	str	r3, [r7, #96]	; 0x60
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3308      	adds	r3, #8
 800563c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800563e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005640:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800564c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e5      	bne.n	800561e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e067      	b.n	800573a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d04f      	beq.n	8005718 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005686:	d147      	bne.n	8005718 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005690:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
 80056b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e6      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	613b      	str	r3, [r7, #16]
   return(result);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	66bb      	str	r3, [r7, #104]	; 0x68
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3308      	adds	r3, #8
 80056e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056e4:	623a      	str	r2, [r7, #32]
 80056e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	69f9      	ldr	r1, [r7, #28]
 80056ea:	6a3a      	ldr	r2, [r7, #32]
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e5      	bne.n	80056c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e010      	b.n	800573a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69da      	ldr	r2, [r3, #28]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4013      	ands	r3, r2
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	429a      	cmp	r2, r3
 8005726:	bf0c      	ite	eq
 8005728:	2301      	moveq	r3, #1
 800572a:	2300      	movne	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	429a      	cmp	r2, r3
 8005734:	f43f af4a 	beq.w	80055cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3770      	adds	r7, #112	; 0x70
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005742:	b480      	push	{r7}
 8005744:	b095      	sub	sp, #84	; 0x54
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800575e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005768:	643b      	str	r3, [r7, #64]	; 0x40
 800576a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800576e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005770:	e841 2300 	strex	r3, r2, [r1]
 8005774:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e6      	bne.n	800574a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3308      	adds	r3, #8
 8005782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	61fb      	str	r3, [r7, #28]
   return(result);
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	64bb      	str	r3, [r7, #72]	; 0x48
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3308      	adds	r3, #8
 800579a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800579c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e5      	bne.n	800577c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d118      	bne.n	80057ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f023 0310 	bic.w	r3, r3, #16
 80057cc:	647b      	str	r3, [r7, #68]	; 0x44
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6979      	ldr	r1, [r7, #20]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	613b      	str	r3, [r7, #16]
   return(result);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e6      	bne.n	80057b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80057fc:	bf00      	nop
 80057fe:	3754      	adds	r7, #84	; 0x54
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f7ff fb3c 	bl	8004ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	60bb      	str	r3, [r7, #8]
   return(result);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005850:	61fb      	str	r3, [r7, #28]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6979      	ldr	r1, [r7, #20]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	613b      	str	r3, [r7, #16]
   return(result);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e6      	bne.n	800583c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff fb08 	bl	8004e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005880:	bf00      	nop
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <arm_rfft_fast_init_f32>:
 800589c:	084b      	lsrs	r3, r1, #1
 800589e:	2b80      	cmp	r3, #128	; 0x80
 80058a0:	b410      	push	{r4}
 80058a2:	8201      	strh	r1, [r0, #16]
 80058a4:	8003      	strh	r3, [r0, #0]
 80058a6:	d047      	beq.n	8005938 <arm_rfft_fast_init_f32+0x9c>
 80058a8:	d917      	bls.n	80058da <arm_rfft_fast_init_f32+0x3e>
 80058aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ae:	d03d      	beq.n	800592c <arm_rfft_fast_init_f32+0x90>
 80058b0:	d929      	bls.n	8005906 <arm_rfft_fast_init_f32+0x6a>
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b6:	d020      	beq.n	80058fa <arm_rfft_fast_init_f32+0x5e>
 80058b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058bc:	d113      	bne.n	80058e6 <arm_rfft_fast_init_f32+0x4a>
 80058be:	4921      	ldr	r1, [pc, #132]	; (8005944 <arm_rfft_fast_init_f32+0xa8>)
 80058c0:	4a21      	ldr	r2, [pc, #132]	; (8005948 <arm_rfft_fast_init_f32+0xac>)
 80058c2:	4b22      	ldr	r3, [pc, #136]	; (800594c <arm_rfft_fast_init_f32+0xb0>)
 80058c4:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80058c8:	8184      	strh	r4, [r0, #12]
 80058ca:	6081      	str	r1, [r0, #8]
 80058cc:	6042      	str	r2, [r0, #4]
 80058ce:	6143      	str	r3, [r0, #20]
 80058d0:	2000      	movs	r0, #0
 80058d2:	b240      	sxtb	r0, r0
 80058d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d01c      	beq.n	8005918 <arm_rfft_fast_init_f32+0x7c>
 80058de:	2b40      	cmp	r3, #64	; 0x40
 80058e0:	d006      	beq.n	80058f0 <arm_rfft_fast_init_f32+0x54>
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d01d      	beq.n	8005922 <arm_rfft_fast_init_f32+0x86>
 80058e6:	20ff      	movs	r0, #255	; 0xff
 80058e8:	b240      	sxtb	r0, r0
 80058ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	2438      	movs	r4, #56	; 0x38
 80058f2:	4917      	ldr	r1, [pc, #92]	; (8005950 <arm_rfft_fast_init_f32+0xb4>)
 80058f4:	4a17      	ldr	r2, [pc, #92]	; (8005954 <arm_rfft_fast_init_f32+0xb8>)
 80058f6:	4b18      	ldr	r3, [pc, #96]	; (8005958 <arm_rfft_fast_init_f32+0xbc>)
 80058f8:	e7e6      	b.n	80058c8 <arm_rfft_fast_init_f32+0x2c>
 80058fa:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80058fe:	4917      	ldr	r1, [pc, #92]	; (800595c <arm_rfft_fast_init_f32+0xc0>)
 8005900:	4a17      	ldr	r2, [pc, #92]	; (8005960 <arm_rfft_fast_init_f32+0xc4>)
 8005902:	4b18      	ldr	r3, [pc, #96]	; (8005964 <arm_rfft_fast_init_f32+0xc8>)
 8005904:	e7e0      	b.n	80058c8 <arm_rfft_fast_init_f32+0x2c>
 8005906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590a:	d1ec      	bne.n	80058e6 <arm_rfft_fast_init_f32+0x4a>
 800590c:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8005910:	4915      	ldr	r1, [pc, #84]	; (8005968 <arm_rfft_fast_init_f32+0xcc>)
 8005912:	4a16      	ldr	r2, [pc, #88]	; (800596c <arm_rfft_fast_init_f32+0xd0>)
 8005914:	4b16      	ldr	r3, [pc, #88]	; (8005970 <arm_rfft_fast_init_f32+0xd4>)
 8005916:	e7d7      	b.n	80058c8 <arm_rfft_fast_init_f32+0x2c>
 8005918:	2430      	movs	r4, #48	; 0x30
 800591a:	4916      	ldr	r1, [pc, #88]	; (8005974 <arm_rfft_fast_init_f32+0xd8>)
 800591c:	4a16      	ldr	r2, [pc, #88]	; (8005978 <arm_rfft_fast_init_f32+0xdc>)
 800591e:	4b17      	ldr	r3, [pc, #92]	; (800597c <arm_rfft_fast_init_f32+0xe0>)
 8005920:	e7d2      	b.n	80058c8 <arm_rfft_fast_init_f32+0x2c>
 8005922:	2414      	movs	r4, #20
 8005924:	4916      	ldr	r1, [pc, #88]	; (8005980 <arm_rfft_fast_init_f32+0xe4>)
 8005926:	4a17      	ldr	r2, [pc, #92]	; (8005984 <arm_rfft_fast_init_f32+0xe8>)
 8005928:	4b17      	ldr	r3, [pc, #92]	; (8005988 <arm_rfft_fast_init_f32+0xec>)
 800592a:	e7cd      	b.n	80058c8 <arm_rfft_fast_init_f32+0x2c>
 800592c:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8005930:	4916      	ldr	r1, [pc, #88]	; (800598c <arm_rfft_fast_init_f32+0xf0>)
 8005932:	4a17      	ldr	r2, [pc, #92]	; (8005990 <arm_rfft_fast_init_f32+0xf4>)
 8005934:	4b17      	ldr	r3, [pc, #92]	; (8005994 <arm_rfft_fast_init_f32+0xf8>)
 8005936:	e7c7      	b.n	80058c8 <arm_rfft_fast_init_f32+0x2c>
 8005938:	24d0      	movs	r4, #208	; 0xd0
 800593a:	4917      	ldr	r1, [pc, #92]	; (8005998 <arm_rfft_fast_init_f32+0xfc>)
 800593c:	4a17      	ldr	r2, [pc, #92]	; (800599c <arm_rfft_fast_init_f32+0x100>)
 800593e:	4b18      	ldr	r3, [pc, #96]	; (80059a0 <arm_rfft_fast_init_f32+0x104>)
 8005940:	e7c2      	b.n	80058c8 <arm_rfft_fast_init_f32+0x2c>
 8005942:	bf00      	nop
 8005944:	080162f8 	.word	0x080162f8
 8005948:	080074f0 	.word	0x080074f0
 800594c:	0800d660 	.word	0x0800d660
 8005950:	0800b5f0 	.word	0x0800b5f0
 8005954:	080180b8 	.word	0x080180b8
 8005958:	0801a5a8 	.word	0x0801a5a8
 800595c:	08013fe0 	.word	0x08013fe0
 8005960:	08011ee0 	.word	0x08011ee0
 8005964:	0800b660 	.word	0x0800b660
 8005968:	0801a238 	.word	0x0801a238
 800596c:	08011660 	.word	0x08011660
 8005970:	080182b8 	.word	0x080182b8
 8005974:	08014e98 	.word	0x08014e98
 8005978:	08013ee0 	.word	0x08013ee0
 800597c:	0800b4f0 	.word	0x0800b4f0
 8005980:	08014df0 	.word	0x08014df0
 8005984:	08011e60 	.word	0x08011e60
 8005988:	08014e18 	.word	0x08014e18
 800598c:	08018ab8 	.word	0x08018ab8
 8005990:	080152f8 	.word	0x080152f8
 8005994:	08018e38 	.word	0x08018e38
 8005998:	0801a7a8 	.word	0x0801a7a8
 800599c:	08014ef8 	.word	0x08014ef8
 80059a0:	08019e38 	.word	0x08019e38

080059a4 <arm_rfft_fast_f32>:
 80059a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a8:	8a06      	ldrh	r6, [r0, #16]
 80059aa:	0876      	lsrs	r6, r6, #1
 80059ac:	4607      	mov	r7, r0
 80059ae:	4615      	mov	r5, r2
 80059b0:	8006      	strh	r6, [r0, #0]
 80059b2:	460c      	mov	r4, r1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d15c      	bne.n	8005a72 <arm_rfft_fast_f32+0xce>
 80059b8:	461a      	mov	r2, r3
 80059ba:	2301      	movs	r3, #1
 80059bc:	f000 fbe6 	bl	800618c <arm_cfft_f32>
 80059c0:	edd4 7a00 	vldr	s15, [r4]
 80059c4:	ed94 7a01 	vldr	s14, [r4, #4]
 80059c8:	883e      	ldrh	r6, [r7, #0]
 80059ca:	6978      	ldr	r0, [r7, #20]
 80059cc:	ee37 7a07 	vadd.f32	s14, s14, s14
 80059d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059d4:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80059d8:	ee77 6a87 	vadd.f32	s13, s15, s14
 80059dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059e0:	3e01      	subs	r6, #1
 80059e2:	ee26 7aa3 	vmul.f32	s14, s13, s7
 80059e6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80059ea:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80059ee:	ed85 7a00 	vstr	s14, [r5]
 80059f2:	edc5 7a01 	vstr	s15, [r5, #4]
 80059f6:	3010      	adds	r0, #16
 80059f8:	f105 0210 	add.w	r2, r5, #16
 80059fc:	3b08      	subs	r3, #8
 80059fe:	f104 0110 	add.w	r1, r4, #16
 8005a02:	ed51 4a02 	vldr	s9, [r1, #-8]
 8005a06:	ed93 5a02 	vldr	s10, [r3, #8]
 8005a0a:	ed11 7a01 	vldr	s14, [r1, #-4]
 8005a0e:	ed10 6a02 	vldr	s12, [r0, #-8]
 8005a12:	edd3 5a03 	vldr	s11, [r3, #12]
 8005a16:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005a1a:	ee75 7a64 	vsub.f32	s15, s10, s9
 8005a1e:	ee35 4a87 	vadd.f32	s8, s11, s14
 8005a22:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005a26:	ee77 5a65 	vsub.f32	s11, s14, s11
 8005a2a:	ee66 4a27 	vmul.f32	s9, s12, s15
 8005a2e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8005a32:	ee34 5a85 	vadd.f32	s10, s9, s10
 8005a36:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005a3a:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005a3e:	ee77 7a25 	vadd.f32	s15, s14, s11
 8005a42:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005a46:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005a4a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005a4e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005a52:	3e01      	subs	r6, #1
 8005a54:	ed42 6a02 	vstr	s13, [r2, #-8]
 8005a58:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005a5c:	f1a3 0308 	sub.w	r3, r3, #8
 8005a60:	f101 0108 	add.w	r1, r1, #8
 8005a64:	f100 0008 	add.w	r0, r0, #8
 8005a68:	f102 0208 	add.w	r2, r2, #8
 8005a6c:	d1c9      	bne.n	8005a02 <arm_rfft_fast_f32+0x5e>
 8005a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a72:	edd1 7a00 	vldr	s15, [r1]
 8005a76:	edd1 6a01 	vldr	s13, [r1, #4]
 8005a7a:	6941      	ldr	r1, [r0, #20]
 8005a7c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005a80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a84:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8005a88:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005a8c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005a90:	3e01      	subs	r6, #1
 8005a92:	ed82 7a00 	vstr	s14, [r2]
 8005a96:	edc2 7a01 	vstr	s15, [r2, #4]
 8005a9a:	00f0      	lsls	r0, r6, #3
 8005a9c:	b3ee      	cbz	r6, 8005b1a <arm_rfft_fast_f32+0x176>
 8005a9e:	3808      	subs	r0, #8
 8005aa0:	f101 0e10 	add.w	lr, r1, #16
 8005aa4:	4420      	add	r0, r4
 8005aa6:	f104 0110 	add.w	r1, r4, #16
 8005aaa:	f102 0c10 	add.w	ip, r2, #16
 8005aae:	ed90 7a02 	vldr	s14, [r0, #8]
 8005ab2:	ed51 6a02 	vldr	s13, [r1, #-8]
 8005ab6:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8005aba:	ed90 4a03 	vldr	s8, [r0, #12]
 8005abe:	ed11 5a01 	vldr	s10, [r1, #-4]
 8005ac2:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8005ac6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005aca:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005ace:	ee26 3a27 	vmul.f32	s6, s12, s15
 8005ad2:	ee77 6a26 	vadd.f32	s13, s14, s13
 8005ad6:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005ada:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005ade:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005ae2:	ee77 7a05 	vadd.f32	s15, s14, s10
 8005ae6:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005aea:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005aee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005af2:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8005af6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005afa:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005afe:	3e01      	subs	r6, #1
 8005b00:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8005b04:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8005b08:	f1a0 0008 	sub.w	r0, r0, #8
 8005b0c:	f101 0108 	add.w	r1, r1, #8
 8005b10:	f10e 0e08 	add.w	lr, lr, #8
 8005b14:	f10c 0c08 	add.w	ip, ip, #8
 8005b18:	d1c9      	bne.n	8005aae <arm_rfft_fast_f32+0x10a>
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	461a      	mov	r2, r3
 8005b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b24:	2301      	movs	r3, #1
 8005b26:	f000 bb31 	b.w	800618c <arm_cfft_f32>
 8005b2a:	bf00      	nop

08005b2c <arm_cfft_radix8by2_f32>:
 8005b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b30:	ed2d 8b08 	vpush	{d8-d11}
 8005b34:	f8b0 e000 	ldrh.w	lr, [r0]
 8005b38:	6842      	ldr	r2, [r0, #4]
 8005b3a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8005b3e:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8005b42:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8005b46:	4607      	mov	r7, r0
 8005b48:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8005b4c:	f000 80af 	beq.w	8005cae <arm_cfft_radix8by2_f32+0x182>
 8005b50:	3310      	adds	r3, #16
 8005b52:	18ce      	adds	r6, r1, r3
 8005b54:	3210      	adds	r2, #16
 8005b56:	4443      	add	r3, r8
 8005b58:	f101 0510 	add.w	r5, r1, #16
 8005b5c:	f108 0410 	add.w	r4, r8, #16
 8005b60:	ed54 1a04 	vldr	s3, [r4, #-16]
 8005b64:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005b68:	ed53 3a03 	vldr	s7, [r3, #-12]
 8005b6c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8005b70:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005b74:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005b78:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005b7c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8005b80:	ed56 2a03 	vldr	s5, [r6, #-12]
 8005b84:	ed15 6a03 	vldr	s12, [r5, #-12]
 8005b88:	ed15 7a01 	vldr	s14, [r5, #-4]
 8005b8c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8005b90:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005b94:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005b98:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005b9c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005ba0:	ee73 ba21 	vadd.f32	s23, s6, s3
 8005ba4:	ee36 ba26 	vadd.f32	s22, s12, s13
 8005ba8:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005bac:	ee72 9a04 	vadd.f32	s19, s4, s8
 8005bb0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8005bb4:	ee31 8a05 	vadd.f32	s16, s2, s10
 8005bb8:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005bbc:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8005bc0:	ed45 ba04 	vstr	s23, [r5, #-16]
 8005bc4:	ed05 ba03 	vstr	s22, [r5, #-12]
 8005bc8:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005bcc:	ed05 aa01 	vstr	s20, [r5, #-4]
 8005bd0:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005bd4:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005bd8:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005bdc:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005be0:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005be4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005be8:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005bec:	ed52 2a04 	vldr	s5, [r2, #-16]
 8005bf0:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005bf4:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005bf8:	ee26 8a86 	vmul.f32	s16, s13, s12
 8005bfc:	ee24 2a06 	vmul.f32	s4, s8, s12
 8005c00:	ee63 1a22 	vmul.f32	s3, s6, s5
 8005c04:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005c08:	ee23 3a06 	vmul.f32	s6, s6, s12
 8005c0c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8005c10:	ee23 6a86 	vmul.f32	s12, s7, s12
 8005c14:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005c18:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005c1c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005c20:	ee72 3a63 	vsub.f32	s7, s4, s7
 8005c24:	ee71 2a88 	vadd.f32	s5, s3, s16
 8005c28:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005c2c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8005c30:	ed43 3a04 	vstr	s7, [r3, #-16]
 8005c34:	ed03 6a03 	vstr	s12, [r3, #-12]
 8005c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c3c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8005c40:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005c44:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005c48:	ee35 6a41 	vsub.f32	s12, s10, s2
 8005c4c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8005c50:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005c54:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005c58:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8005c5c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005c60:	ee64 4a87 	vmul.f32	s9, s9, s14
 8005c64:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005c68:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005c6c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005c70:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005c74:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005c78:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005c7c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005c80:	f1be 0e01 	subs.w	lr, lr, #1
 8005c84:	ed44 5a02 	vstr	s11, [r4, #-8]
 8005c88:	f105 0510 	add.w	r5, r5, #16
 8005c8c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005c90:	f106 0610 	add.w	r6, r6, #16
 8005c94:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005c98:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005c9c:	f102 0210 	add.w	r2, r2, #16
 8005ca0:	f104 0410 	add.w	r4, r4, #16
 8005ca4:	f103 0310 	add.w	r3, r3, #16
 8005ca8:	f47f af5a 	bne.w	8005b60 <arm_cfft_radix8by2_f32+0x34>
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	fa1f f48c 	uxth.w	r4, ip
 8005cb2:	4608      	mov	r0, r1
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	f000 fae2 	bl	8006280 <arm_radix8_butterfly_f32>
 8005cbc:	ecbd 8b08 	vpop	{d8-d11}
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ccc:	f000 bad8 	b.w	8006280 <arm_radix8_butterfly_f32>

08005cd0 <arm_cfft_radix8by4_f32>:
 8005cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	ed2d 8b0a 	vpush	{d8-d12}
 8005cd8:	8802      	ldrh	r2, [r0, #0]
 8005cda:	ed91 6a00 	vldr	s12, [r1]
 8005cde:	b08f      	sub	sp, #60	; 0x3c
 8005ce0:	460f      	mov	r7, r1
 8005ce2:	0852      	lsrs	r2, r2, #1
 8005ce4:	0093      	lsls	r3, r2, #2
 8005ce6:	900c      	str	r0, [sp, #48]	; 0x30
 8005ce8:	9103      	str	r1, [sp, #12]
 8005cea:	6841      	ldr	r1, [r0, #4]
 8005cec:	ed97 7a01 	vldr	s14, [r7, #4]
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	4418      	add	r0, r3
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	9009      	str	r0, [sp, #36]	; 0x24
 8005cf8:	4418      	add	r0, r3
 8005cfa:	edd0 6a00 	vldr	s13, [r0]
 8005cfe:	edd6 3a00 	vldr	s7, [r6]
 8005d02:	edd6 2a01 	vldr	s5, [r6, #4]
 8005d06:	edd0 7a01 	vldr	s15, [r0, #4]
 8005d0a:	900a      	str	r0, [sp, #40]	; 0x28
 8005d0c:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005d10:	4604      	mov	r4, r0
 8005d12:	4625      	mov	r5, r4
 8005d14:	441c      	add	r4, r3
 8005d16:	ed94 4a00 	vldr	s8, [r4]
 8005d1a:	ed94 5a01 	vldr	s10, [r4, #4]
 8005d1e:	9401      	str	r4, [sp, #4]
 8005d20:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8005d24:	4630      	mov	r0, r6
 8005d26:	ee74 4a24 	vadd.f32	s9, s8, s9
 8005d2a:	463e      	mov	r6, r7
 8005d2c:	ee14 ea90 	vmov	lr, s9
 8005d30:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005d34:	f846 eb08 	str.w	lr, [r6], #8
 8005d38:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005d3c:	edd0 4a01 	vldr	s9, [r0, #4]
 8005d40:	9604      	str	r6, [sp, #16]
 8005d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d46:	9e01      	ldr	r6, [sp, #4]
 8005d48:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8005d4c:	ed96 2a01 	vldr	s4, [r6, #4]
 8005d50:	ee36 7a24 	vadd.f32	s14, s12, s9
 8005d54:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8005d58:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8005d5c:	ee36 6a62 	vsub.f32	s12, s12, s5
 8005d60:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005d64:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005d68:	ee73 3a45 	vsub.f32	s7, s6, s10
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	ee36 6a45 	vsub.f32	s12, s12, s10
 8005d72:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005d76:	46a3      	mov	fp, r4
 8005d78:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005d7c:	ee34 5a84 	vadd.f32	s10, s9, s8
 8005d80:	ee13 8a90 	vmov	r8, s7
 8005d84:	46a4      	mov	ip, r4
 8005d86:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8005d8a:	ed87 7a01 	vstr	s14, [r7, #4]
 8005d8e:	f84b 8b08 	str.w	r8, [fp], #8
 8005d92:	f1ac 0704 	sub.w	r7, ip, #4
 8005d96:	ed8c 5a01 	vstr	s10, [ip, #4]
 8005d9a:	f101 0c08 	add.w	ip, r1, #8
 8005d9e:	462c      	mov	r4, r5
 8005da0:	f8cd c014 	str.w	ip, [sp, #20]
 8005da4:	ee15 ca90 	vmov	ip, s11
 8005da8:	f844 cb08 	str.w	ip, [r4], #8
 8005dac:	9407      	str	r4, [sp, #28]
 8005dae:	f101 0410 	add.w	r4, r1, #16
 8005db2:	ed85 6a01 	vstr	s12, [r5, #4]
 8005db6:	0852      	lsrs	r2, r2, #1
 8005db8:	9402      	str	r4, [sp, #8]
 8005dba:	462c      	mov	r4, r5
 8005dbc:	f101 0518 	add.w	r5, r1, #24
 8005dc0:	920b      	str	r2, [sp, #44]	; 0x2c
 8005dc2:	46b2      	mov	sl, r6
 8005dc4:	9506      	str	r5, [sp, #24]
 8005dc6:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005dca:	3a02      	subs	r2, #2
 8005dcc:	ee16 5a90 	vmov	r5, s13
 8005dd0:	46b6      	mov	lr, r6
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	0852      	lsrs	r2, r2, #1
 8005dd6:	f84a 5b08 	str.w	r5, [sl], #8
 8005dda:	f1a0 0604 	sub.w	r6, r0, #4
 8005dde:	edce 7a01 	vstr	s15, [lr, #4]
 8005de2:	9208      	str	r2, [sp, #32]
 8005de4:	f000 8130 	beq.w	8006048 <arm_cfft_radix8by4_f32+0x378>
 8005de8:	4691      	mov	r9, r2
 8005dea:	9a03      	ldr	r2, [sp, #12]
 8005dec:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005df0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005df4:	3b08      	subs	r3, #8
 8005df6:	f102 0510 	add.w	r5, r2, #16
 8005dfa:	f101 0c20 	add.w	ip, r1, #32
 8005dfe:	f1a4 020c 	sub.w	r2, r4, #12
 8005e02:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8005e06:	4433      	add	r3, r6
 8005e08:	3410      	adds	r4, #16
 8005e0a:	4650      	mov	r0, sl
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	ed55 3a02 	vldr	s7, [r5, #-8]
 8005e12:	ed14 5a02 	vldr	s10, [r4, #-8]
 8005e16:	ed91 7a00 	vldr	s14, [r1]
 8005e1a:	edd0 7a00 	vldr	s15, [r0]
 8005e1e:	ed15 4a01 	vldr	s8, [r5, #-4]
 8005e22:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005e26:	edd0 6a01 	vldr	s13, [r0, #4]
 8005e2a:	ed91 6a01 	vldr	s12, [r1, #4]
 8005e2e:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005e32:	ee34 0a25 	vadd.f32	s0, s8, s11
 8005e36:	ee78 4a07 	vadd.f32	s9, s16, s14
 8005e3a:	ee74 5a65 	vsub.f32	s11, s8, s11
 8005e3e:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8005e42:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005e46:	ed45 4a02 	vstr	s9, [r5, #-8]
 8005e4a:	edd1 4a01 	vldr	s9, [r1, #4]
 8005e4e:	ed90 4a01 	vldr	s8, [r0, #4]
 8005e52:	ee70 4a24 	vadd.f32	s9, s0, s9
 8005e56:	ee76 aa05 	vadd.f32	s21, s12, s10
 8005e5a:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005e5e:	ee35 aac7 	vsub.f32	s20, s11, s14
 8005e62:	ed45 4a01 	vstr	s9, [r5, #-4]
 8005e66:	edd6 1a00 	vldr	s3, [r6]
 8005e6a:	edd7 0a00 	vldr	s1, [r7]
 8005e6e:	ed92 4a02 	vldr	s8, [r2, #8]
 8005e72:	edd3 3a02 	vldr	s7, [r3, #8]
 8005e76:	ed93 2a01 	vldr	s4, [r3, #4]
 8005e7a:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005e7e:	edd2 2a01 	vldr	s5, [r2, #4]
 8005e82:	ed57 9a01 	vldr	s19, [r7, #-4]
 8005e86:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8005e8a:	ee39 3a81 	vadd.f32	s6, s19, s2
 8005e8e:	ee74 8a84 	vadd.f32	s17, s9, s8
 8005e92:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8005e96:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8005e9a:	ee7a aae6 	vsub.f32	s21, s21, s13
 8005e9e:	ee18 aa90 	vmov	sl, s17
 8005ea2:	f847 a908 	str.w	sl, [r7], #-8
 8005ea6:	edd2 8a01 	vldr	s17, [r2, #4]
 8005eaa:	ed93 9a01 	vldr	s18, [r3, #4]
 8005eae:	ee73 8a28 	vadd.f32	s17, s6, s17
 8005eb2:	ee3a aa27 	vadd.f32	s20, s20, s15
 8005eb6:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005eba:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005ebe:	edc7 8a01 	vstr	s17, [r7, #4]
 8005ec2:	ed18 ba02 	vldr	s22, [r8, #-8]
 8005ec6:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005eca:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005ece:	ee6a ba28 	vmul.f32	s23, s20, s17
 8005ed2:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8005ed6:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005eda:	ee30 9a81 	vadd.f32	s18, s1, s2
 8005ede:	ee79 9a82 	vadd.f32	s19, s19, s4
 8005ee2:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8005ee6:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005eea:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005eee:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8005ef2:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8005ef6:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005efa:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005efe:	ee1c aa10 	vmov	sl, s24
 8005f02:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8005f06:	f841 ab08 	str.w	sl, [r1], #8
 8005f0a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005f0e:	ee3b bacb 	vsub.f32	s22, s23, s22
 8005f12:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8005f16:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005f1a:	ed01 aa01 	vstr	s20, [r1, #-4]
 8005f1e:	edc2 8a01 	vstr	s17, [r2, #4]
 8005f22:	ed82 ba02 	vstr	s22, [r2, #8]
 8005f26:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8005f2a:	ee74 3a63 	vsub.f32	s7, s8, s7
 8005f2e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8005f32:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8005f36:	ee30 0a46 	vsub.f32	s0, s0, s12
 8005f3a:	ee33 3a42 	vsub.f32	s6, s6, s4
 8005f3e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005f42:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005f46:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8005f4a:	ee63 8a04 	vmul.f32	s17, s6, s8
 8005f4e:	ee28 aa24 	vmul.f32	s20, s16, s9
 8005f52:	ee60 9a04 	vmul.f32	s19, s0, s8
 8005f56:	ee28 8a04 	vmul.f32	s16, s16, s8
 8005f5a:	ee20 0a24 	vmul.f32	s0, s0, s9
 8005f5e:	ee63 3a84 	vmul.f32	s7, s7, s8
 8005f62:	ee39 4a68 	vsub.f32	s8, s18, s17
 8005f66:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005f6a:	ee14 aa10 	vmov	sl, s8
 8005f6e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005f72:	ee63 4a24 	vmul.f32	s9, s6, s9
 8005f76:	ed44 9a02 	vstr	s19, [r4, #-8]
 8005f7a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005f7e:	ed04 0a01 	vstr	s0, [r4, #-4]
 8005f82:	f846 a908 	str.w	sl, [r6], #-8
 8005f86:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005f8a:	ee35 7a87 	vadd.f32	s14, s11, s14
 8005f8e:	edc6 3a01 	vstr	s7, [r6, #4]
 8005f92:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f9a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8005f9e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8005fa2:	ee67 5a86 	vmul.f32	s11, s15, s12
 8005fa6:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005faa:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005fae:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005fb2:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8005fb6:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005fba:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005fbe:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fc6:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005fca:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005fce:	ee21 1a07 	vmul.f32	s2, s2, s14
 8005fd2:	ee15 aa90 	vmov	sl, s11
 8005fd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005fda:	f840 ab08 	str.w	sl, [r0], #8
 8005fde:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005fe2:	ee76 2a22 	vadd.f32	s5, s12, s5
 8005fe6:	f1b9 0901 	subs.w	r9, r9, #1
 8005fea:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005fee:	f105 0508 	add.w	r5, r5, #8
 8005ff2:	ed83 1a02 	vstr	s2, [r3, #8]
 8005ff6:	edc3 2a01 	vstr	s5, [r3, #4]
 8005ffa:	f108 0808 	add.w	r8, r8, #8
 8005ffe:	f1a2 0208 	sub.w	r2, r2, #8
 8006002:	f10c 0c10 	add.w	ip, ip, #16
 8006006:	f104 0408 	add.w	r4, r4, #8
 800600a:	f10e 0e18 	add.w	lr, lr, #24
 800600e:	f1a3 0308 	sub.w	r3, r3, #8
 8006012:	f47f aefc 	bne.w	8005e0e <arm_cfft_radix8by4_f32+0x13e>
 8006016:	9908      	ldr	r1, [sp, #32]
 8006018:	9802      	ldr	r0, [sp, #8]
 800601a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800601e:	00cb      	lsls	r3, r1, #3
 8006020:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006024:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006028:	9102      	str	r1, [sp, #8]
 800602a:	9904      	ldr	r1, [sp, #16]
 800602c:	4419      	add	r1, r3
 800602e:	9104      	str	r1, [sp, #16]
 8006030:	9905      	ldr	r1, [sp, #20]
 8006032:	4419      	add	r1, r3
 8006034:	9105      	str	r1, [sp, #20]
 8006036:	9907      	ldr	r1, [sp, #28]
 8006038:	449b      	add	fp, r3
 800603a:	4419      	add	r1, r3
 800603c:	449a      	add	sl, r3
 800603e:	9b06      	ldr	r3, [sp, #24]
 8006040:	9107      	str	r1, [sp, #28]
 8006042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006046:	9306      	str	r3, [sp, #24]
 8006048:	9a04      	ldr	r2, [sp, #16]
 800604a:	9807      	ldr	r0, [sp, #28]
 800604c:	edd2 3a00 	vldr	s7, [r2]
 8006050:	ed90 4a00 	vldr	s8, [r0]
 8006054:	eddb 7a00 	vldr	s15, [fp]
 8006058:	ed9a 3a00 	vldr	s6, [sl]
 800605c:	edd2 4a01 	vldr	s9, [r2, #4]
 8006060:	ed90 7a01 	vldr	s14, [r0, #4]
 8006064:	ed9b 2a01 	vldr	s4, [fp, #4]
 8006068:	edda 5a01 	vldr	s11, [sl, #4]
 800606c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8006070:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006072:	ee73 6a84 	vadd.f32	s13, s7, s8
 8006076:	ee34 6a87 	vadd.f32	s12, s9, s14
 800607a:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800607e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8006082:	ee33 5a05 	vadd.f32	s10, s6, s10
 8006086:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800608a:	ed82 5a00 	vstr	s10, [r2]
 800608e:	ed9b 5a01 	vldr	s10, [fp, #4]
 8006092:	edda 4a01 	vldr	s9, [sl, #4]
 8006096:	ee36 5a05 	vadd.f32	s10, s12, s10
 800609a:	ee72 3a04 	vadd.f32	s7, s4, s8
 800609e:	ee35 5a24 	vadd.f32	s10, s10, s9
 80060a2:	ee77 4a67 	vsub.f32	s9, s14, s15
 80060a6:	ed82 5a01 	vstr	s10, [r2, #4]
 80060aa:	9a05      	ldr	r2, [sp, #20]
 80060ac:	ee34 5a83 	vadd.f32	s10, s9, s6
 80060b0:	edd2 1a00 	vldr	s3, [r2]
 80060b4:	edd2 2a01 	vldr	s5, [r2, #4]
 80060b8:	9a02      	ldr	r2, [sp, #8]
 80060ba:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80060be:	ee36 6a42 	vsub.f32	s12, s12, s4
 80060c2:	ee63 4aa1 	vmul.f32	s9, s7, s3
 80060c6:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80060ca:	ee65 2a22 	vmul.f32	s5, s10, s5
 80060ce:	ee25 5a21 	vmul.f32	s10, s10, s3
 80060d2:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80060d6:	ee35 5a63 	vsub.f32	s10, s10, s7
 80060da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80060de:	edcb 2a00 	vstr	s5, [fp]
 80060e2:	ed8b 5a01 	vstr	s10, [fp, #4]
 80060e6:	edd2 3a01 	vldr	s7, [r2, #4]
 80060ea:	ed92 5a00 	vldr	s10, [r2]
 80060ee:	9a06      	ldr	r2, [sp, #24]
 80060f0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80060f4:	ee36 6a65 	vsub.f32	s12, s12, s11
 80060f8:	ee66 4a85 	vmul.f32	s9, s13, s10
 80060fc:	ee26 5a05 	vmul.f32	s10, s12, s10
 8006100:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006104:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006108:	ee75 6a66 	vsub.f32	s13, s10, s13
 800610c:	ee34 6a86 	vadd.f32	s12, s9, s12
 8006110:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006118:	edc0 6a01 	vstr	s13, [r0, #4]
 800611c:	ed80 6a00 	vstr	s12, [r0]
 8006120:	ed92 6a01 	vldr	s12, [r2, #4]
 8006124:	9803      	ldr	r0, [sp, #12]
 8006126:	ee77 7a43 	vsub.f32	s15, s14, s6
 800612a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800612e:	ed92 7a00 	vldr	s14, [r2]
 8006132:	ee65 6a87 	vmul.f32	s13, s11, s14
 8006136:	ee27 7a87 	vmul.f32	s14, s15, s14
 800613a:	ee65 5a86 	vmul.f32	s11, s11, s12
 800613e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006142:	ee77 5a65 	vsub.f32	s11, s14, s11
 8006146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614a:	edca 5a01 	vstr	s11, [sl, #4]
 800614e:	edca 7a00 	vstr	s15, [sl]
 8006152:	6872      	ldr	r2, [r6, #4]
 8006154:	4621      	mov	r1, r4
 8006156:	2304      	movs	r3, #4
 8006158:	f000 f892 	bl	8006280 <arm_radix8_butterfly_f32>
 800615c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800615e:	6872      	ldr	r2, [r6, #4]
 8006160:	4621      	mov	r1, r4
 8006162:	2304      	movs	r3, #4
 8006164:	f000 f88c 	bl	8006280 <arm_radix8_butterfly_f32>
 8006168:	980a      	ldr	r0, [sp, #40]	; 0x28
 800616a:	6872      	ldr	r2, [r6, #4]
 800616c:	4621      	mov	r1, r4
 800616e:	2304      	movs	r3, #4
 8006170:	f000 f886 	bl	8006280 <arm_radix8_butterfly_f32>
 8006174:	9801      	ldr	r0, [sp, #4]
 8006176:	6872      	ldr	r2, [r6, #4]
 8006178:	4621      	mov	r1, r4
 800617a:	2304      	movs	r3, #4
 800617c:	b00f      	add	sp, #60	; 0x3c
 800617e:	ecbd 8b0a 	vpop	{d8-d12}
 8006182:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006186:	f000 b87b 	b.w	8006280 <arm_radix8_butterfly_f32>
 800618a:	bf00      	nop

0800618c <arm_cfft_f32>:
 800618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006190:	2a01      	cmp	r2, #1
 8006192:	4606      	mov	r6, r0
 8006194:	4617      	mov	r7, r2
 8006196:	460c      	mov	r4, r1
 8006198:	4698      	mov	r8, r3
 800619a:	8805      	ldrh	r5, [r0, #0]
 800619c:	d054      	beq.n	8006248 <arm_cfft_f32+0xbc>
 800619e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80061a2:	d04c      	beq.n	800623e <arm_cfft_f32+0xb2>
 80061a4:	d916      	bls.n	80061d4 <arm_cfft_f32+0x48>
 80061a6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80061aa:	d01a      	beq.n	80061e2 <arm_cfft_f32+0x56>
 80061ac:	d95c      	bls.n	8006268 <arm_cfft_f32+0xdc>
 80061ae:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80061b2:	d044      	beq.n	800623e <arm_cfft_f32+0xb2>
 80061b4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80061b8:	d105      	bne.n	80061c6 <arm_cfft_f32+0x3a>
 80061ba:	4620      	mov	r0, r4
 80061bc:	4629      	mov	r1, r5
 80061be:	6872      	ldr	r2, [r6, #4]
 80061c0:	2301      	movs	r3, #1
 80061c2:	f000 f85d 	bl	8006280 <arm_radix8_butterfly_f32>
 80061c6:	f1b8 0f00 	cmp.w	r8, #0
 80061ca:	d111      	bne.n	80061f0 <arm_cfft_f32+0x64>
 80061cc:	2f01      	cmp	r7, #1
 80061ce:	d016      	beq.n	80061fe <arm_cfft_f32+0x72>
 80061d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d4:	2d20      	cmp	r5, #32
 80061d6:	d032      	beq.n	800623e <arm_cfft_f32+0xb2>
 80061d8:	d94a      	bls.n	8006270 <arm_cfft_f32+0xe4>
 80061da:	2d40      	cmp	r5, #64	; 0x40
 80061dc:	d0ed      	beq.n	80061ba <arm_cfft_f32+0x2e>
 80061de:	2d80      	cmp	r5, #128	; 0x80
 80061e0:	d1f1      	bne.n	80061c6 <arm_cfft_f32+0x3a>
 80061e2:	4630      	mov	r0, r6
 80061e4:	4621      	mov	r1, r4
 80061e6:	f7ff fca1 	bl	8005b2c <arm_cfft_radix8by2_f32>
 80061ea:	f1b8 0f00 	cmp.w	r8, #0
 80061ee:	d0ed      	beq.n	80061cc <arm_cfft_f32+0x40>
 80061f0:	4620      	mov	r0, r4
 80061f2:	89b1      	ldrh	r1, [r6, #12]
 80061f4:	68b2      	ldr	r2, [r6, #8]
 80061f6:	f7f9 ffeb 	bl	80001d0 <arm_bitreversal_32>
 80061fa:	2f01      	cmp	r7, #1
 80061fc:	d1e8      	bne.n	80061d0 <arm_cfft_f32+0x44>
 80061fe:	ee07 5a90 	vmov	s15, r5
 8006202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006206:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800620a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800620e:	2d00      	cmp	r5, #0
 8006210:	d0de      	beq.n	80061d0 <arm_cfft_f32+0x44>
 8006212:	f104 0108 	add.w	r1, r4, #8
 8006216:	2300      	movs	r3, #0
 8006218:	3301      	adds	r3, #1
 800621a:	429d      	cmp	r5, r3
 800621c:	f101 0108 	add.w	r1, r1, #8
 8006220:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006224:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006228:	ee27 7a26 	vmul.f32	s14, s14, s13
 800622c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006230:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006234:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006238:	d1ee      	bne.n	8006218 <arm_cfft_f32+0x8c>
 800623a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800623e:	4630      	mov	r0, r6
 8006240:	4621      	mov	r1, r4
 8006242:	f7ff fd45 	bl	8005cd0 <arm_cfft_radix8by4_f32>
 8006246:	e7be      	b.n	80061c6 <arm_cfft_f32+0x3a>
 8006248:	b1ad      	cbz	r5, 8006276 <arm_cfft_f32+0xea>
 800624a:	f101 030c 	add.w	r3, r1, #12
 800624e:	2200      	movs	r2, #0
 8006250:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006254:	3201      	adds	r2, #1
 8006256:	eef1 7a67 	vneg.f32	s15, s15
 800625a:	4295      	cmp	r5, r2
 800625c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006260:	f103 0308 	add.w	r3, r3, #8
 8006264:	d1f4      	bne.n	8006250 <arm_cfft_f32+0xc4>
 8006266:	e79a      	b.n	800619e <arm_cfft_f32+0x12>
 8006268:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800626c:	d0a5      	beq.n	80061ba <arm_cfft_f32+0x2e>
 800626e:	e7aa      	b.n	80061c6 <arm_cfft_f32+0x3a>
 8006270:	2d10      	cmp	r5, #16
 8006272:	d0b6      	beq.n	80061e2 <arm_cfft_f32+0x56>
 8006274:	e7a7      	b.n	80061c6 <arm_cfft_f32+0x3a>
 8006276:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800627a:	d894      	bhi.n	80061a6 <arm_cfft_f32+0x1a>
 800627c:	e7aa      	b.n	80061d4 <arm_cfft_f32+0x48>
 800627e:	bf00      	nop

08006280 <arm_radix8_butterfly_f32>:
 8006280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	ed2d 8b10 	vpush	{d8-d15}
 8006288:	b09d      	sub	sp, #116	; 0x74
 800628a:	461c      	mov	r4, r3
 800628c:	ed9f bac8 	vldr	s22, [pc, #800]	; 80065b0 <arm_radix8_butterfly_f32+0x330>
 8006290:	921a      	str	r2, [sp, #104]	; 0x68
 8006292:	1d03      	adds	r3, r0, #4
 8006294:	4682      	mov	sl, r0
 8006296:	4689      	mov	r9, r1
 8006298:	468b      	mov	fp, r1
 800629a:	931b      	str	r3, [sp, #108]	; 0x6c
 800629c:	9400      	str	r4, [sp, #0]
 800629e:	469e      	mov	lr, r3
 80062a0:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80062a4:	005a      	lsls	r2, r3, #1
 80062a6:	18d6      	adds	r6, r2, r3
 80062a8:	18f5      	adds	r5, r6, r3
 80062aa:	9203      	str	r2, [sp, #12]
 80062ac:	195a      	adds	r2, r3, r5
 80062ae:	18d0      	adds	r0, r2, r3
 80062b0:	00df      	lsls	r7, r3, #3
 80062b2:	1819      	adds	r1, r3, r0
 80062b4:	463c      	mov	r4, r7
 80062b6:	9701      	str	r7, [sp, #4]
 80062b8:	4457      	add	r7, sl
 80062ba:	930c      	str	r3, [sp, #48]	; 0x30
 80062bc:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 80062c6:	eb07 0c04 	add.w	ip, r7, r4
 80062ca:	9c00      	ldr	r4, [sp, #0]
 80062cc:	9302      	str	r3, [sp, #8]
 80062ce:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 80062d2:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 80062d6:	3204      	adds	r2, #4
 80062d8:	3104      	adds	r1, #4
 80062da:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 80062de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062e2:	f04f 0800 	mov.w	r8, #0
 80062e6:	eddc 7a00 	vldr	s15, [ip]
 80062ea:	edd7 6a00 	vldr	s13, [r7]
 80062ee:	edd6 3a00 	vldr	s7, [r6]
 80062f2:	ed5e aa01 	vldr	s21, [lr, #-4]
 80062f6:	edd5 4a00 	vldr	s9, [r5]
 80062fa:	ed90 2a00 	vldr	s4, [r0]
 80062fe:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006302:	ed51 0a01 	vldr	s1, [r1, #-4]
 8006306:	ee77 8a82 	vadd.f32	s17, s15, s4
 800630a:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800630e:	ee76 1a87 	vadd.f32	s3, s13, s14
 8006312:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8006316:	ee31 6a84 	vadd.f32	s12, s3, s8
 800631a:	ee33 5a28 	vadd.f32	s10, s6, s17
 800631e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006322:	ee75 6a06 	vadd.f32	s13, s10, s12
 8006326:	ee35 5a46 	vsub.f32	s10, s10, s12
 800632a:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800632e:	ed85 5a00 	vstr	s10, [r5]
 8006332:	ed96 1a01 	vldr	s2, [r6, #4]
 8006336:	edd7 5a01 	vldr	s11, [r7, #4]
 800633a:	ed92 aa00 	vldr	s20, [r2]
 800633e:	ed91 6a00 	vldr	s12, [r1]
 8006342:	ed9e 9a00 	vldr	s18, [lr]
 8006346:	ed95 5a01 	vldr	s10, [r5, #4]
 800634a:	eddc 6a01 	vldr	s13, [ip, #4]
 800634e:	edd0 9a01 	vldr	s19, [r0, #4]
 8006352:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8006356:	ee71 2a46 	vsub.f32	s5, s2, s12
 800635a:	ee75 3aca 	vsub.f32	s7, s11, s20
 800635e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8006362:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8006366:	ee37 7a20 	vadd.f32	s14, s14, s1
 800636a:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800636e:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8006372:	ee79 3a05 	vadd.f32	s7, s18, s10
 8006376:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800637a:	ee39 5a45 	vsub.f32	s10, s18, s10
 800637e:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8006382:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8006386:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800638a:	ee31 6a06 	vadd.f32	s12, s2, s12
 800638e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8006392:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8006396:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800639a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800639e:	ee33 3a68 	vsub.f32	s6, s6, s17
 80063a2:	ee36 0a88 	vadd.f32	s0, s13, s16
 80063a6:	ee75 8a86 	vadd.f32	s17, s11, s12
 80063aa:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80063ae:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80063b2:	ee75 6a62 	vsub.f32	s13, s10, s5
 80063b6:	ee33 4ac9 	vsub.f32	s8, s7, s18
 80063ba:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80063be:	ee33 1a89 	vadd.f32	s2, s7, s18
 80063c2:	ee74 5ae0 	vsub.f32	s11, s9, s1
 80063c6:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80063ca:	ee75 4a22 	vadd.f32	s9, s10, s5
 80063ce:	ee32 5a27 	vadd.f32	s10, s4, s15
 80063d2:	ee72 7a67 	vsub.f32	s15, s4, s15
 80063d6:	ee33 8a06 	vadd.f32	s16, s6, s12
 80063da:	ee75 2a87 	vadd.f32	s5, s11, s14
 80063de:	ee31 9a28 	vadd.f32	s18, s2, s17
 80063e2:	ee33 6a46 	vsub.f32	s12, s6, s12
 80063e6:	ee74 0a61 	vsub.f32	s1, s8, s3
 80063ea:	ee33 2a80 	vadd.f32	s4, s7, s0
 80063ee:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80063f2:	ee34 3ac5 	vsub.f32	s6, s9, s10
 80063f6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80063fa:	ee31 1a68 	vsub.f32	s2, s2, s17
 80063fe:	ee34 4a21 	vadd.f32	s8, s8, s3
 8006402:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8006406:	ee74 4a85 	vadd.f32	s9, s9, s10
 800640a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800640e:	44d8      	add	r8, fp
 8006410:	45c1      	cmp	r9, r8
 8006412:	ed8e 9a00 	vstr	s18, [lr]
 8006416:	ed85 1a01 	vstr	s2, [r5, #4]
 800641a:	449e      	add	lr, r3
 800641c:	ed8c 8a00 	vstr	s16, [ip]
 8006420:	441d      	add	r5, r3
 8006422:	ed80 6a00 	vstr	s12, [r0]
 8006426:	edcc 0a01 	vstr	s1, [ip, #4]
 800642a:	ed80 4a01 	vstr	s8, [r0, #4]
 800642e:	449c      	add	ip, r3
 8006430:	ed87 2a00 	vstr	s4, [r7]
 8006434:	4418      	add	r0, r3
 8006436:	ed41 3a01 	vstr	s7, [r1, #-4]
 800643a:	ed42 2a01 	vstr	s5, [r2, #-4]
 800643e:	ed86 7a00 	vstr	s14, [r6]
 8006442:	ed87 3a01 	vstr	s6, [r7, #4]
 8006446:	edc1 4a00 	vstr	s9, [r1]
 800644a:	441f      	add	r7, r3
 800644c:	edc2 5a00 	vstr	s11, [r2]
 8006450:	4419      	add	r1, r3
 8006452:	edc6 6a01 	vstr	s13, [r6, #4]
 8006456:	441a      	add	r2, r3
 8006458:	441e      	add	r6, r3
 800645a:	f63f af44 	bhi.w	80062e6 <arm_radix8_butterfly_f32+0x66>
 800645e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006460:	2907      	cmp	r1, #7
 8006462:	4620      	mov	r0, r4
 8006464:	f240 81e9 	bls.w	800683a <arm_radix8_butterfly_f32+0x5ba>
 8006468:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800646c:	193e      	adds	r6, r7, r4
 800646e:	1935      	adds	r5, r6, r4
 8006470:	9c03      	ldr	r4, [sp, #12]
 8006472:	9000      	str	r0, [sp, #0]
 8006474:	4622      	mov	r2, r4
 8006476:	3201      	adds	r2, #1
 8006478:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800647c:	9900      	ldr	r1, [sp, #0]
 800647e:	1828      	adds	r0, r5, r0
 8006480:	eb00 0e01 	add.w	lr, r0, r1
 8006484:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006486:	440a      	add	r2, r1
 8006488:	eb04 0c01 	add.w	ip, r4, r1
 800648c:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8006490:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8006494:	9a00      	ldr	r2, [sp, #0]
 8006496:	940f      	str	r4, [sp, #60]	; 0x3c
 8006498:	00ed      	lsls	r5, r5, #3
 800649a:	9511      	str	r5, [sp, #68]	; 0x44
 800649c:	00d5      	lsls	r5, r2, #3
 800649e:	950d      	str	r5, [sp, #52]	; 0x34
 80064a0:	9d01      	ldr	r5, [sp, #4]
 80064a2:	3508      	adds	r5, #8
 80064a4:	9516      	str	r5, [sp, #88]	; 0x58
 80064a6:	9d02      	ldr	r5, [sp, #8]
 80064a8:	3508      	adds	r5, #8
 80064aa:	0114      	lsls	r4, r2, #4
 80064ac:	9517      	str	r5, [sp, #92]	; 0x5c
 80064ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064b0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80064b2:	940e      	str	r4, [sp, #56]	; 0x38
 80064b4:	00c0      	lsls	r0, r0, #3
 80064b6:	9010      	str	r0, [sp, #64]	; 0x40
 80064b8:	18aa      	adds	r2, r5, r2
 80064ba:	9207      	str	r2, [sp, #28]
 80064bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80064c0:	18aa      	adds	r2, r5, r2
 80064c2:	9208      	str	r2, [sp, #32]
 80064c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80064c6:	18aa      	adds	r2, r5, r2
 80064c8:	9209      	str	r2, [sp, #36]	; 0x24
 80064ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80064ce:	f10e 0204 	add.w	r2, lr, #4
 80064d2:	920a      	str	r2, [sp, #40]	; 0x28
 80064d4:	00c9      	lsls	r1, r1, #3
 80064d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064d8:	310c      	adds	r1, #12
 80064da:	00f6      	lsls	r6, r6, #3
 80064dc:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 80064e0:	9114      	str	r1, [sp, #80]	; 0x50
 80064e2:	18a9      	adds	r1, r5, r2
 80064e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064e6:	9612      	str	r6, [sp, #72]	; 0x48
 80064e8:	00ff      	lsls	r7, r7, #3
 80064ea:	19ae      	adds	r6, r5, r6
 80064ec:	3008      	adds	r0, #8
 80064ee:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80064f2:	9606      	str	r6, [sp, #24]
 80064f4:	9019      	str	r0, [sp, #100]	; 0x64
 80064f6:	18aa      	adds	r2, r5, r2
 80064f8:	0164      	lsls	r4, r4, #5
 80064fa:	19ee      	adds	r6, r5, r7
 80064fc:	f10c 000c 	add.w	r0, ip, #12
 8006500:	9713      	str	r7, [sp, #76]	; 0x4c
 8006502:	9604      	str	r6, [sp, #16]
 8006504:	9015      	str	r0, [sp, #84]	; 0x54
 8006506:	9103      	str	r1, [sp, #12]
 8006508:	9205      	str	r2, [sp, #20]
 800650a:	f104 0208 	add.w	r2, r4, #8
 800650e:	9218      	str	r2, [sp, #96]	; 0x60
 8006510:	f04f 0801 	mov.w	r8, #1
 8006514:	2200      	movs	r2, #0
 8006516:	f102 0108 	add.w	r1, r2, #8
 800651a:	460f      	mov	r7, r1
 800651c:	910b      	str	r1, [sp, #44]	; 0x2c
 800651e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006520:	188e      	adds	r6, r1, r2
 8006522:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006524:	188d      	adds	r5, r1, r2
 8006526:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006528:	188c      	adds	r4, r1, r2
 800652a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800652c:	1888      	adds	r0, r1, r2
 800652e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006530:	eb01 0c02 	add.w	ip, r1, r2
 8006534:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006536:	440a      	add	r2, r1
 8006538:	9903      	ldr	r1, [sp, #12]
 800653a:	edd1 fa00 	vldr	s31, [r1]
 800653e:	9905      	ldr	r1, [sp, #20]
 8006540:	ed91 fa00 	vldr	s30, [r1]
 8006544:	9904      	ldr	r1, [sp, #16]
 8006546:	edd1 ea00 	vldr	s29, [r1]
 800654a:	9906      	ldr	r1, [sp, #24]
 800654c:	ed91 ea00 	vldr	s28, [r1]
 8006550:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006552:	edd1 da00 	vldr	s27, [r1]
 8006556:	9908      	ldr	r1, [sp, #32]
 8006558:	ed91 da00 	vldr	s26, [r1]
 800655c:	9907      	ldr	r1, [sp, #28]
 800655e:	edd1 ca00 	vldr	s25, [r1]
 8006562:	9903      	ldr	r1, [sp, #12]
 8006564:	ed91 ca01 	vldr	s24, [r1, #4]
 8006568:	9905      	ldr	r1, [sp, #20]
 800656a:	edd1 ba01 	vldr	s23, [r1, #4]
 800656e:	9904      	ldr	r1, [sp, #16]
 8006570:	edd1 aa01 	vldr	s21, [r1, #4]
 8006574:	9906      	ldr	r1, [sp, #24]
 8006576:	ed91 aa01 	vldr	s20, [r1, #4]
 800657a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800657c:	edd1 7a01 	vldr	s15, [r1, #4]
 8006580:	9908      	ldr	r1, [sp, #32]
 8006582:	edcd 7a00 	vstr	s15, [sp]
 8006586:	edd1 7a01 	vldr	s15, [r1, #4]
 800658a:	9907      	ldr	r1, [sp, #28]
 800658c:	edcd 7a01 	vstr	s15, [sp, #4]
 8006590:	edd1 7a01 	vldr	s15, [r1, #4]
 8006594:	eb0a 0e07 	add.w	lr, sl, r7
 8006598:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800659a:	edcd 7a02 	vstr	s15, [sp, #8]
 800659e:	eb0c 010a 	add.w	r1, ip, sl
 80065a2:	4456      	add	r6, sl
 80065a4:	4455      	add	r5, sl
 80065a6:	4454      	add	r4, sl
 80065a8:	4450      	add	r0, sl
 80065aa:	4452      	add	r2, sl
 80065ac:	46c4      	mov	ip, r8
 80065ae:	e001      	b.n	80065b4 <arm_radix8_butterfly_f32+0x334>
 80065b0:	3f3504f3 	.word	0x3f3504f3
 80065b4:	ed96 5a00 	vldr	s10, [r6]
 80065b8:	ed52 9a01 	vldr	s19, [r2, #-4]
 80065bc:	ed11 6a01 	vldr	s12, [r1, #-4]
 80065c0:	edd0 7a00 	vldr	s15, [r0]
 80065c4:	ed17 7a01 	vldr	s14, [r7, #-4]
 80065c8:	edde 3a00 	vldr	s7, [lr]
 80065cc:	ed94 3a00 	vldr	s6, [r4]
 80065d0:	ed95 2a00 	vldr	s4, [r5]
 80065d4:	ed9e 0a01 	vldr	s0, [lr, #4]
 80065d8:	ee33 8a85 	vadd.f32	s16, s7, s10
 80065dc:	ee32 1a06 	vadd.f32	s2, s4, s12
 80065e0:	ee33 4a29 	vadd.f32	s8, s6, s19
 80065e4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80065e8:	ee78 1a04 	vadd.f32	s3, s16, s8
 80065ec:	ee71 6a24 	vadd.f32	s13, s2, s9
 80065f0:	ee32 2a46 	vsub.f32	s4, s4, s12
 80065f4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80065f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065fc:	ed8e 6a00 	vstr	s12, [lr]
 8006600:	edd0 8a01 	vldr	s17, [r0, #4]
 8006604:	ed95 9a01 	vldr	s18, [r5, #4]
 8006608:	edd1 2a00 	vldr	s5, [r1]
 800660c:	ed97 7a00 	vldr	s14, [r7]
 8006610:	edd4 0a01 	vldr	s1, [r4, #4]
 8006614:	ed96 6a01 	vldr	s12, [r6, #4]
 8006618:	edd2 5a00 	vldr	s11, [r2]
 800661c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006620:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006624:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006628:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800662c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006630:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006634:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006638:	ee79 2a22 	vadd.f32	s5, s18, s5
 800663c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8006640:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006644:	ee35 5a29 	vadd.f32	s10, s10, s19
 8006648:	ee72 7a67 	vsub.f32	s15, s4, s15
 800664c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006650:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8006654:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006658:	ee32 9a08 	vadd.f32	s18, s4, s16
 800665c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006660:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006664:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006668:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800666c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8006670:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006674:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006678:	ee30 6a46 	vsub.f32	s12, s0, s12
 800667c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8006680:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006684:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006688:	ee32 7a64 	vsub.f32	s14, s4, s9
 800668c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8006690:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006694:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006698:	ee75 8a85 	vadd.f32	s17, s11, s10
 800669c:	ee74 3a22 	vadd.f32	s7, s8, s5
 80066a0:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80066a4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80066a8:	ee79 1a41 	vsub.f32	s3, s18, s2
 80066ac:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80066b0:	ee76 5a43 	vsub.f32	s11, s12, s6
 80066b4:	ee74 2a62 	vsub.f32	s5, s8, s5
 80066b8:	ee72 4a24 	vadd.f32	s9, s4, s9
 80066bc:	ee30 4a60 	vsub.f32	s8, s0, s1
 80066c0:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80066c4:	ee30 0a20 	vadd.f32	s0, s0, s1
 80066c8:	ee77 9a85 	vadd.f32	s19, s15, s10
 80066cc:	ee36 6a03 	vadd.f32	s12, s12, s6
 80066d0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80066d4:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80066d8:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80066dc:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80066e0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80066e4:	ee39 1a01 	vadd.f32	s2, s18, s2
 80066e8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80066ec:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80066f0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80066f4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80066f8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80066fc:	ee35 3a03 	vadd.f32	s6, s10, s6
 8006700:	ee72 6a66 	vsub.f32	s13, s4, s13
 8006704:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8006708:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800670c:	ed9d 4a02 	vldr	s8, [sp, #8]
 8006710:	ed8e 1a01 	vstr	s2, [lr, #4]
 8006714:	ee77 3a63 	vsub.f32	s7, s14, s7
 8006718:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800671c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006720:	ed86 3a00 	vstr	s6, [r6]
 8006724:	ee30 9a89 	vadd.f32	s18, s1, s18
 8006728:	ee32 2a05 	vadd.f32	s4, s4, s10
 800672c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8006730:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8006734:	ee67 2a22 	vmul.f32	s5, s14, s5
 8006738:	ee64 1a00 	vmul.f32	s3, s8, s0
 800673c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006740:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8006744:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8006748:	ee64 8a28 	vmul.f32	s17, s8, s17
 800674c:	ed9d 4a00 	vldr	s8, [sp]
 8006750:	edc6 6a01 	vstr	s13, [r6, #4]
 8006754:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006758:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800675c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8006760:	ee24 4a25 	vmul.f32	s8, s8, s11
 8006764:	ee30 7a87 	vadd.f32	s14, s1, s14
 8006768:	ee74 4a84 	vadd.f32	s9, s9, s8
 800676c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8006770:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8006774:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8006778:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800677c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8006780:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8006784:	ee75 1a21 	vadd.f32	s3, s10, s3
 8006788:	ee30 0a68 	vsub.f32	s0, s0, s17
 800678c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8006790:	ee70 0a84 	vadd.f32	s1, s1, s8
 8006794:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006798:	44dc      	add	ip, fp
 800679a:	45e1      	cmp	r9, ip
 800679c:	ed84 9a00 	vstr	s18, [r4]
 80067a0:	edc4 3a01 	vstr	s7, [r4, #4]
 80067a4:	449e      	add	lr, r3
 80067a6:	ed02 7a01 	vstr	s14, [r2, #-4]
 80067aa:	edc2 2a00 	vstr	s5, [r2]
 80067ae:	441e      	add	r6, r3
 80067b0:	ed85 2a00 	vstr	s4, [r5]
 80067b4:	ed85 8a01 	vstr	s16, [r5, #4]
 80067b8:	441c      	add	r4, r3
 80067ba:	ed47 1a01 	vstr	s3, [r7, #-4]
 80067be:	ed87 0a00 	vstr	s0, [r7]
 80067c2:	441a      	add	r2, r3
 80067c4:	ed41 4a01 	vstr	s9, [r1, #-4]
 80067c8:	edc1 9a00 	vstr	s19, [r1]
 80067cc:	441d      	add	r5, r3
 80067ce:	edc0 0a00 	vstr	s1, [r0]
 80067d2:	441f      	add	r7, r3
 80067d4:	ed80 6a01 	vstr	s12, [r0, #4]
 80067d8:	4419      	add	r1, r3
 80067da:	4418      	add	r0, r3
 80067dc:	f63f aeea 	bhi.w	80065b4 <arm_radix8_butterfly_f32+0x334>
 80067e0:	9a03      	ldr	r2, [sp, #12]
 80067e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067e4:	440a      	add	r2, r1
 80067e6:	9203      	str	r2, [sp, #12]
 80067e8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80067ea:	9a05      	ldr	r2, [sp, #20]
 80067ec:	440a      	add	r2, r1
 80067ee:	9205      	str	r2, [sp, #20]
 80067f0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80067f2:	9a04      	ldr	r2, [sp, #16]
 80067f4:	440a      	add	r2, r1
 80067f6:	9204      	str	r2, [sp, #16]
 80067f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80067fa:	9a06      	ldr	r2, [sp, #24]
 80067fc:	440a      	add	r2, r1
 80067fe:	9206      	str	r2, [sp, #24]
 8006800:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006804:	440a      	add	r2, r1
 8006806:	9209      	str	r2, [sp, #36]	; 0x24
 8006808:	9910      	ldr	r1, [sp, #64]	; 0x40
 800680a:	9a08      	ldr	r2, [sp, #32]
 800680c:	440a      	add	r2, r1
 800680e:	9208      	str	r2, [sp, #32]
 8006810:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006812:	9a07      	ldr	r2, [sp, #28]
 8006814:	440a      	add	r2, r1
 8006816:	9207      	str	r2, [sp, #28]
 8006818:	990c      	ldr	r1, [sp, #48]	; 0x30
 800681a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800681c:	f108 0801 	add.w	r8, r8, #1
 8006820:	3208      	adds	r2, #8
 8006822:	4588      	cmp	r8, r1
 8006824:	920a      	str	r2, [sp, #40]	; 0x28
 8006826:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006828:	f47f ae75 	bne.w	8006516 <arm_radix8_butterfly_f32+0x296>
 800682c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	46c3      	mov	fp, r8
 8006834:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8006838:	e532      	b.n	80062a0 <arm_radix8_butterfly_f32+0x20>
 800683a:	b01d      	add	sp, #116	; 0x74
 800683c:	ecbd 8b10 	vpop	{d8-d15}
 8006840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006844 <__errno>:
 8006844:	4b01      	ldr	r3, [pc, #4]	; (800684c <__errno+0x8>)
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	20000010 	.word	0x20000010

08006850 <__libc_init_array>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	4d0d      	ldr	r5, [pc, #52]	; (8006888 <__libc_init_array+0x38>)
 8006854:	4c0d      	ldr	r4, [pc, #52]	; (800688c <__libc_init_array+0x3c>)
 8006856:	1b64      	subs	r4, r4, r5
 8006858:	10a4      	asrs	r4, r4, #2
 800685a:	2600      	movs	r6, #0
 800685c:	42a6      	cmp	r6, r4
 800685e:	d109      	bne.n	8006874 <__libc_init_array+0x24>
 8006860:	4d0b      	ldr	r5, [pc, #44]	; (8006890 <__libc_init_array+0x40>)
 8006862:	4c0c      	ldr	r4, [pc, #48]	; (8006894 <__libc_init_array+0x44>)
 8006864:	f000 fe10 	bl	8007488 <_init>
 8006868:	1b64      	subs	r4, r4, r5
 800686a:	10a4      	asrs	r4, r4, #2
 800686c:	2600      	movs	r6, #0
 800686e:	42a6      	cmp	r6, r4
 8006870:	d105      	bne.n	800687e <__libc_init_array+0x2e>
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	f855 3b04 	ldr.w	r3, [r5], #4
 8006878:	4798      	blx	r3
 800687a:	3601      	adds	r6, #1
 800687c:	e7ee      	b.n	800685c <__libc_init_array+0xc>
 800687e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006882:	4798      	blx	r3
 8006884:	3601      	adds	r6, #1
 8006886:	e7f2      	b.n	800686e <__libc_init_array+0x1e>
 8006888:	0801a984 	.word	0x0801a984
 800688c:	0801a984 	.word	0x0801a984
 8006890:	0801a984 	.word	0x0801a984
 8006894:	0801a988 	.word	0x0801a988

08006898 <memset>:
 8006898:	4402      	add	r2, r0
 800689a:	4603      	mov	r3, r0
 800689c:	4293      	cmp	r3, r2
 800689e:	d100      	bne.n	80068a2 <memset+0xa>
 80068a0:	4770      	bx	lr
 80068a2:	f803 1b01 	strb.w	r1, [r3], #1
 80068a6:	e7f9      	b.n	800689c <memset+0x4>

080068a8 <sniprintf>:
 80068a8:	b40c      	push	{r2, r3}
 80068aa:	b530      	push	{r4, r5, lr}
 80068ac:	4b17      	ldr	r3, [pc, #92]	; (800690c <sniprintf+0x64>)
 80068ae:	1e0c      	subs	r4, r1, #0
 80068b0:	681d      	ldr	r5, [r3, #0]
 80068b2:	b09d      	sub	sp, #116	; 0x74
 80068b4:	da08      	bge.n	80068c8 <sniprintf+0x20>
 80068b6:	238b      	movs	r3, #139	; 0x8b
 80068b8:	602b      	str	r3, [r5, #0]
 80068ba:	f04f 30ff 	mov.w	r0, #4294967295
 80068be:	b01d      	add	sp, #116	; 0x74
 80068c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068c4:	b002      	add	sp, #8
 80068c6:	4770      	bx	lr
 80068c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80068cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80068d0:	bf14      	ite	ne
 80068d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80068d6:	4623      	moveq	r3, r4
 80068d8:	9304      	str	r3, [sp, #16]
 80068da:	9307      	str	r3, [sp, #28]
 80068dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068e0:	9002      	str	r0, [sp, #8]
 80068e2:	9006      	str	r0, [sp, #24]
 80068e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80068e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80068ea:	ab21      	add	r3, sp, #132	; 0x84
 80068ec:	a902      	add	r1, sp, #8
 80068ee:	4628      	mov	r0, r5
 80068f0:	9301      	str	r3, [sp, #4]
 80068f2:	f000 f869 	bl	80069c8 <_svfiprintf_r>
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	bfbc      	itt	lt
 80068fa:	238b      	movlt	r3, #139	; 0x8b
 80068fc:	602b      	strlt	r3, [r5, #0]
 80068fe:	2c00      	cmp	r4, #0
 8006900:	d0dd      	beq.n	80068be <sniprintf+0x16>
 8006902:	9b02      	ldr	r3, [sp, #8]
 8006904:	2200      	movs	r2, #0
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	e7d9      	b.n	80068be <sniprintf+0x16>
 800690a:	bf00      	nop
 800690c:	20000010 	.word	0x20000010

08006910 <__ssputs_r>:
 8006910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006914:	688e      	ldr	r6, [r1, #8]
 8006916:	429e      	cmp	r6, r3
 8006918:	4682      	mov	sl, r0
 800691a:	460c      	mov	r4, r1
 800691c:	4690      	mov	r8, r2
 800691e:	461f      	mov	r7, r3
 8006920:	d838      	bhi.n	8006994 <__ssputs_r+0x84>
 8006922:	898a      	ldrh	r2, [r1, #12]
 8006924:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006928:	d032      	beq.n	8006990 <__ssputs_r+0x80>
 800692a:	6825      	ldr	r5, [r4, #0]
 800692c:	6909      	ldr	r1, [r1, #16]
 800692e:	eba5 0901 	sub.w	r9, r5, r1
 8006932:	6965      	ldr	r5, [r4, #20]
 8006934:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006938:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800693c:	3301      	adds	r3, #1
 800693e:	444b      	add	r3, r9
 8006940:	106d      	asrs	r5, r5, #1
 8006942:	429d      	cmp	r5, r3
 8006944:	bf38      	it	cc
 8006946:	461d      	movcc	r5, r3
 8006948:	0553      	lsls	r3, r2, #21
 800694a:	d531      	bpl.n	80069b0 <__ssputs_r+0xa0>
 800694c:	4629      	mov	r1, r5
 800694e:	f000 fb47 	bl	8006fe0 <_malloc_r>
 8006952:	4606      	mov	r6, r0
 8006954:	b950      	cbnz	r0, 800696c <__ssputs_r+0x5c>
 8006956:	230c      	movs	r3, #12
 8006958:	f8ca 3000 	str.w	r3, [sl]
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006962:	81a3      	strh	r3, [r4, #12]
 8006964:	f04f 30ff 	mov.w	r0, #4294967295
 8006968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800696c:	6921      	ldr	r1, [r4, #16]
 800696e:	464a      	mov	r2, r9
 8006970:	f000 fabe 	bl	8006ef0 <memcpy>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800697a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697e:	81a3      	strh	r3, [r4, #12]
 8006980:	6126      	str	r6, [r4, #16]
 8006982:	6165      	str	r5, [r4, #20]
 8006984:	444e      	add	r6, r9
 8006986:	eba5 0509 	sub.w	r5, r5, r9
 800698a:	6026      	str	r6, [r4, #0]
 800698c:	60a5      	str	r5, [r4, #8]
 800698e:	463e      	mov	r6, r7
 8006990:	42be      	cmp	r6, r7
 8006992:	d900      	bls.n	8006996 <__ssputs_r+0x86>
 8006994:	463e      	mov	r6, r7
 8006996:	4632      	mov	r2, r6
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	4641      	mov	r1, r8
 800699c:	f000 fab6 	bl	8006f0c <memmove>
 80069a0:	68a3      	ldr	r3, [r4, #8]
 80069a2:	6822      	ldr	r2, [r4, #0]
 80069a4:	1b9b      	subs	r3, r3, r6
 80069a6:	4432      	add	r2, r6
 80069a8:	60a3      	str	r3, [r4, #8]
 80069aa:	6022      	str	r2, [r4, #0]
 80069ac:	2000      	movs	r0, #0
 80069ae:	e7db      	b.n	8006968 <__ssputs_r+0x58>
 80069b0:	462a      	mov	r2, r5
 80069b2:	f000 fb6f 	bl	8007094 <_realloc_r>
 80069b6:	4606      	mov	r6, r0
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d1e1      	bne.n	8006980 <__ssputs_r+0x70>
 80069bc:	6921      	ldr	r1, [r4, #16]
 80069be:	4650      	mov	r0, sl
 80069c0:	f000 fabe 	bl	8006f40 <_free_r>
 80069c4:	e7c7      	b.n	8006956 <__ssputs_r+0x46>
	...

080069c8 <_svfiprintf_r>:
 80069c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	4698      	mov	r8, r3
 80069ce:	898b      	ldrh	r3, [r1, #12]
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	b09d      	sub	sp, #116	; 0x74
 80069d4:	4607      	mov	r7, r0
 80069d6:	460d      	mov	r5, r1
 80069d8:	4614      	mov	r4, r2
 80069da:	d50e      	bpl.n	80069fa <_svfiprintf_r+0x32>
 80069dc:	690b      	ldr	r3, [r1, #16]
 80069de:	b963      	cbnz	r3, 80069fa <_svfiprintf_r+0x32>
 80069e0:	2140      	movs	r1, #64	; 0x40
 80069e2:	f000 fafd 	bl	8006fe0 <_malloc_r>
 80069e6:	6028      	str	r0, [r5, #0]
 80069e8:	6128      	str	r0, [r5, #16]
 80069ea:	b920      	cbnz	r0, 80069f6 <_svfiprintf_r+0x2e>
 80069ec:	230c      	movs	r3, #12
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	e0d1      	b.n	8006b9a <_svfiprintf_r+0x1d2>
 80069f6:	2340      	movs	r3, #64	; 0x40
 80069f8:	616b      	str	r3, [r5, #20]
 80069fa:	2300      	movs	r3, #0
 80069fc:	9309      	str	r3, [sp, #36]	; 0x24
 80069fe:	2320      	movs	r3, #32
 8006a00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a08:	2330      	movs	r3, #48	; 0x30
 8006a0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006bb4 <_svfiprintf_r+0x1ec>
 8006a0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a12:	f04f 0901 	mov.w	r9, #1
 8006a16:	4623      	mov	r3, r4
 8006a18:	469a      	mov	sl, r3
 8006a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a1e:	b10a      	cbz	r2, 8006a24 <_svfiprintf_r+0x5c>
 8006a20:	2a25      	cmp	r2, #37	; 0x25
 8006a22:	d1f9      	bne.n	8006a18 <_svfiprintf_r+0x50>
 8006a24:	ebba 0b04 	subs.w	fp, sl, r4
 8006a28:	d00b      	beq.n	8006a42 <_svfiprintf_r+0x7a>
 8006a2a:	465b      	mov	r3, fp
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	4629      	mov	r1, r5
 8006a30:	4638      	mov	r0, r7
 8006a32:	f7ff ff6d 	bl	8006910 <__ssputs_r>
 8006a36:	3001      	adds	r0, #1
 8006a38:	f000 80aa 	beq.w	8006b90 <_svfiprintf_r+0x1c8>
 8006a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a3e:	445a      	add	r2, fp
 8006a40:	9209      	str	r2, [sp, #36]	; 0x24
 8006a42:	f89a 3000 	ldrb.w	r3, [sl]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80a2 	beq.w	8006b90 <_svfiprintf_r+0x1c8>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a56:	f10a 0a01 	add.w	sl, sl, #1
 8006a5a:	9304      	str	r3, [sp, #16]
 8006a5c:	9307      	str	r3, [sp, #28]
 8006a5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a62:	931a      	str	r3, [sp, #104]	; 0x68
 8006a64:	4654      	mov	r4, sl
 8006a66:	2205      	movs	r2, #5
 8006a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a6c:	4851      	ldr	r0, [pc, #324]	; (8006bb4 <_svfiprintf_r+0x1ec>)
 8006a6e:	f7f9 fc17 	bl	80002a0 <memchr>
 8006a72:	9a04      	ldr	r2, [sp, #16]
 8006a74:	b9d8      	cbnz	r0, 8006aae <_svfiprintf_r+0xe6>
 8006a76:	06d0      	lsls	r0, r2, #27
 8006a78:	bf44      	itt	mi
 8006a7a:	2320      	movmi	r3, #32
 8006a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a80:	0711      	lsls	r1, r2, #28
 8006a82:	bf44      	itt	mi
 8006a84:	232b      	movmi	r3, #43	; 0x2b
 8006a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a90:	d015      	beq.n	8006abe <_svfiprintf_r+0xf6>
 8006a92:	9a07      	ldr	r2, [sp, #28]
 8006a94:	4654      	mov	r4, sl
 8006a96:	2000      	movs	r0, #0
 8006a98:	f04f 0c0a 	mov.w	ip, #10
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aa2:	3b30      	subs	r3, #48	; 0x30
 8006aa4:	2b09      	cmp	r3, #9
 8006aa6:	d94e      	bls.n	8006b46 <_svfiprintf_r+0x17e>
 8006aa8:	b1b0      	cbz	r0, 8006ad8 <_svfiprintf_r+0x110>
 8006aaa:	9207      	str	r2, [sp, #28]
 8006aac:	e014      	b.n	8006ad8 <_svfiprintf_r+0x110>
 8006aae:	eba0 0308 	sub.w	r3, r0, r8
 8006ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	9304      	str	r3, [sp, #16]
 8006aba:	46a2      	mov	sl, r4
 8006abc:	e7d2      	b.n	8006a64 <_svfiprintf_r+0x9c>
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	1d19      	adds	r1, r3, #4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	9103      	str	r1, [sp, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bfbb      	ittet	lt
 8006aca:	425b      	neglt	r3, r3
 8006acc:	f042 0202 	orrlt.w	r2, r2, #2
 8006ad0:	9307      	strge	r3, [sp, #28]
 8006ad2:	9307      	strlt	r3, [sp, #28]
 8006ad4:	bfb8      	it	lt
 8006ad6:	9204      	strlt	r2, [sp, #16]
 8006ad8:	7823      	ldrb	r3, [r4, #0]
 8006ada:	2b2e      	cmp	r3, #46	; 0x2e
 8006adc:	d10c      	bne.n	8006af8 <_svfiprintf_r+0x130>
 8006ade:	7863      	ldrb	r3, [r4, #1]
 8006ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae2:	d135      	bne.n	8006b50 <_svfiprintf_r+0x188>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	1d1a      	adds	r2, r3, #4
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	9203      	str	r2, [sp, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	bfb8      	it	lt
 8006af0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006af4:	3402      	adds	r4, #2
 8006af6:	9305      	str	r3, [sp, #20]
 8006af8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006bc4 <_svfiprintf_r+0x1fc>
 8006afc:	7821      	ldrb	r1, [r4, #0]
 8006afe:	2203      	movs	r2, #3
 8006b00:	4650      	mov	r0, sl
 8006b02:	f7f9 fbcd 	bl	80002a0 <memchr>
 8006b06:	b140      	cbz	r0, 8006b1a <_svfiprintf_r+0x152>
 8006b08:	2340      	movs	r3, #64	; 0x40
 8006b0a:	eba0 000a 	sub.w	r0, r0, sl
 8006b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b12:	9b04      	ldr	r3, [sp, #16]
 8006b14:	4303      	orrs	r3, r0
 8006b16:	3401      	adds	r4, #1
 8006b18:	9304      	str	r3, [sp, #16]
 8006b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b1e:	4826      	ldr	r0, [pc, #152]	; (8006bb8 <_svfiprintf_r+0x1f0>)
 8006b20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b24:	2206      	movs	r2, #6
 8006b26:	f7f9 fbbb 	bl	80002a0 <memchr>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d038      	beq.n	8006ba0 <_svfiprintf_r+0x1d8>
 8006b2e:	4b23      	ldr	r3, [pc, #140]	; (8006bbc <_svfiprintf_r+0x1f4>)
 8006b30:	bb1b      	cbnz	r3, 8006b7a <_svfiprintf_r+0x1b2>
 8006b32:	9b03      	ldr	r3, [sp, #12]
 8006b34:	3307      	adds	r3, #7
 8006b36:	f023 0307 	bic.w	r3, r3, #7
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	9303      	str	r3, [sp, #12]
 8006b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b40:	4433      	add	r3, r6
 8006b42:	9309      	str	r3, [sp, #36]	; 0x24
 8006b44:	e767      	b.n	8006a16 <_svfiprintf_r+0x4e>
 8006b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	e7a5      	b.n	8006a9c <_svfiprintf_r+0xd4>
 8006b50:	2300      	movs	r3, #0
 8006b52:	3401      	adds	r4, #1
 8006b54:	9305      	str	r3, [sp, #20]
 8006b56:	4619      	mov	r1, r3
 8006b58:	f04f 0c0a 	mov.w	ip, #10
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b62:	3a30      	subs	r2, #48	; 0x30
 8006b64:	2a09      	cmp	r2, #9
 8006b66:	d903      	bls.n	8006b70 <_svfiprintf_r+0x1a8>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0c5      	beq.n	8006af8 <_svfiprintf_r+0x130>
 8006b6c:	9105      	str	r1, [sp, #20]
 8006b6e:	e7c3      	b.n	8006af8 <_svfiprintf_r+0x130>
 8006b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b74:	4604      	mov	r4, r0
 8006b76:	2301      	movs	r3, #1
 8006b78:	e7f0      	b.n	8006b5c <_svfiprintf_r+0x194>
 8006b7a:	ab03      	add	r3, sp, #12
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	462a      	mov	r2, r5
 8006b80:	4b0f      	ldr	r3, [pc, #60]	; (8006bc0 <_svfiprintf_r+0x1f8>)
 8006b82:	a904      	add	r1, sp, #16
 8006b84:	4638      	mov	r0, r7
 8006b86:	f3af 8000 	nop.w
 8006b8a:	1c42      	adds	r2, r0, #1
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	d1d6      	bne.n	8006b3e <_svfiprintf_r+0x176>
 8006b90:	89ab      	ldrh	r3, [r5, #12]
 8006b92:	065b      	lsls	r3, r3, #25
 8006b94:	f53f af2c 	bmi.w	80069f0 <_svfiprintf_r+0x28>
 8006b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b9a:	b01d      	add	sp, #116	; 0x74
 8006b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba0:	ab03      	add	r3, sp, #12
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	462a      	mov	r2, r5
 8006ba6:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <_svfiprintf_r+0x1f8>)
 8006ba8:	a904      	add	r1, sp, #16
 8006baa:	4638      	mov	r0, r7
 8006bac:	f000 f87a 	bl	8006ca4 <_printf_i>
 8006bb0:	e7eb      	b.n	8006b8a <_svfiprintf_r+0x1c2>
 8006bb2:	bf00      	nop
 8006bb4:	0801a948 	.word	0x0801a948
 8006bb8:	0801a952 	.word	0x0801a952
 8006bbc:	00000000 	.word	0x00000000
 8006bc0:	08006911 	.word	0x08006911
 8006bc4:	0801a94e 	.word	0x0801a94e

08006bc8 <_printf_common>:
 8006bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bcc:	4616      	mov	r6, r2
 8006bce:	4699      	mov	r9, r3
 8006bd0:	688a      	ldr	r2, [r1, #8]
 8006bd2:	690b      	ldr	r3, [r1, #16]
 8006bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	bfb8      	it	lt
 8006bdc:	4613      	movlt	r3, r2
 8006bde:	6033      	str	r3, [r6, #0]
 8006be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006be4:	4607      	mov	r7, r0
 8006be6:	460c      	mov	r4, r1
 8006be8:	b10a      	cbz	r2, 8006bee <_printf_common+0x26>
 8006bea:	3301      	adds	r3, #1
 8006bec:	6033      	str	r3, [r6, #0]
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	0699      	lsls	r1, r3, #26
 8006bf2:	bf42      	ittt	mi
 8006bf4:	6833      	ldrmi	r3, [r6, #0]
 8006bf6:	3302      	addmi	r3, #2
 8006bf8:	6033      	strmi	r3, [r6, #0]
 8006bfa:	6825      	ldr	r5, [r4, #0]
 8006bfc:	f015 0506 	ands.w	r5, r5, #6
 8006c00:	d106      	bne.n	8006c10 <_printf_common+0x48>
 8006c02:	f104 0a19 	add.w	sl, r4, #25
 8006c06:	68e3      	ldr	r3, [r4, #12]
 8006c08:	6832      	ldr	r2, [r6, #0]
 8006c0a:	1a9b      	subs	r3, r3, r2
 8006c0c:	42ab      	cmp	r3, r5
 8006c0e:	dc26      	bgt.n	8006c5e <_printf_common+0x96>
 8006c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c14:	1e13      	subs	r3, r2, #0
 8006c16:	6822      	ldr	r2, [r4, #0]
 8006c18:	bf18      	it	ne
 8006c1a:	2301      	movne	r3, #1
 8006c1c:	0692      	lsls	r2, r2, #26
 8006c1e:	d42b      	bmi.n	8006c78 <_printf_common+0xb0>
 8006c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c24:	4649      	mov	r1, r9
 8006c26:	4638      	mov	r0, r7
 8006c28:	47c0      	blx	r8
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d01e      	beq.n	8006c6c <_printf_common+0xa4>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	68e5      	ldr	r5, [r4, #12]
 8006c32:	6832      	ldr	r2, [r6, #0]
 8006c34:	f003 0306 	and.w	r3, r3, #6
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	bf08      	it	eq
 8006c3c:	1aad      	subeq	r5, r5, r2
 8006c3e:	68a3      	ldr	r3, [r4, #8]
 8006c40:	6922      	ldr	r2, [r4, #16]
 8006c42:	bf0c      	ite	eq
 8006c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c48:	2500      	movne	r5, #0
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	bfc4      	itt	gt
 8006c4e:	1a9b      	subgt	r3, r3, r2
 8006c50:	18ed      	addgt	r5, r5, r3
 8006c52:	2600      	movs	r6, #0
 8006c54:	341a      	adds	r4, #26
 8006c56:	42b5      	cmp	r5, r6
 8006c58:	d11a      	bne.n	8006c90 <_printf_common+0xc8>
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	e008      	b.n	8006c70 <_printf_common+0xa8>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	4652      	mov	r2, sl
 8006c62:	4649      	mov	r1, r9
 8006c64:	4638      	mov	r0, r7
 8006c66:	47c0      	blx	r8
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d103      	bne.n	8006c74 <_printf_common+0xac>
 8006c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c74:	3501      	adds	r5, #1
 8006c76:	e7c6      	b.n	8006c06 <_printf_common+0x3e>
 8006c78:	18e1      	adds	r1, r4, r3
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	2030      	movs	r0, #48	; 0x30
 8006c7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c82:	4422      	add	r2, r4
 8006c84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c8c:	3302      	adds	r3, #2
 8006c8e:	e7c7      	b.n	8006c20 <_printf_common+0x58>
 8006c90:	2301      	movs	r3, #1
 8006c92:	4622      	mov	r2, r4
 8006c94:	4649      	mov	r1, r9
 8006c96:	4638      	mov	r0, r7
 8006c98:	47c0      	blx	r8
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d0e6      	beq.n	8006c6c <_printf_common+0xa4>
 8006c9e:	3601      	adds	r6, #1
 8006ca0:	e7d9      	b.n	8006c56 <_printf_common+0x8e>
	...

08006ca4 <_printf_i>:
 8006ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	460c      	mov	r4, r1
 8006caa:	4691      	mov	r9, r2
 8006cac:	7e27      	ldrb	r7, [r4, #24]
 8006cae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006cb0:	2f78      	cmp	r7, #120	; 0x78
 8006cb2:	4680      	mov	r8, r0
 8006cb4:	469a      	mov	sl, r3
 8006cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cba:	d807      	bhi.n	8006ccc <_printf_i+0x28>
 8006cbc:	2f62      	cmp	r7, #98	; 0x62
 8006cbe:	d80a      	bhi.n	8006cd6 <_printf_i+0x32>
 8006cc0:	2f00      	cmp	r7, #0
 8006cc2:	f000 80d8 	beq.w	8006e76 <_printf_i+0x1d2>
 8006cc6:	2f58      	cmp	r7, #88	; 0x58
 8006cc8:	f000 80a3 	beq.w	8006e12 <_printf_i+0x16e>
 8006ccc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cd4:	e03a      	b.n	8006d4c <_printf_i+0xa8>
 8006cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cda:	2b15      	cmp	r3, #21
 8006cdc:	d8f6      	bhi.n	8006ccc <_printf_i+0x28>
 8006cde:	a001      	add	r0, pc, #4	; (adr r0, 8006ce4 <_printf_i+0x40>)
 8006ce0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ce4:	08006d3d 	.word	0x08006d3d
 8006ce8:	08006d51 	.word	0x08006d51
 8006cec:	08006ccd 	.word	0x08006ccd
 8006cf0:	08006ccd 	.word	0x08006ccd
 8006cf4:	08006ccd 	.word	0x08006ccd
 8006cf8:	08006ccd 	.word	0x08006ccd
 8006cfc:	08006d51 	.word	0x08006d51
 8006d00:	08006ccd 	.word	0x08006ccd
 8006d04:	08006ccd 	.word	0x08006ccd
 8006d08:	08006ccd 	.word	0x08006ccd
 8006d0c:	08006ccd 	.word	0x08006ccd
 8006d10:	08006e5d 	.word	0x08006e5d
 8006d14:	08006d81 	.word	0x08006d81
 8006d18:	08006e3f 	.word	0x08006e3f
 8006d1c:	08006ccd 	.word	0x08006ccd
 8006d20:	08006ccd 	.word	0x08006ccd
 8006d24:	08006e7f 	.word	0x08006e7f
 8006d28:	08006ccd 	.word	0x08006ccd
 8006d2c:	08006d81 	.word	0x08006d81
 8006d30:	08006ccd 	.word	0x08006ccd
 8006d34:	08006ccd 	.word	0x08006ccd
 8006d38:	08006e47 	.word	0x08006e47
 8006d3c:	680b      	ldr	r3, [r1, #0]
 8006d3e:	1d1a      	adds	r2, r3, #4
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	600a      	str	r2, [r1, #0]
 8006d44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0a3      	b.n	8006e98 <_printf_i+0x1f4>
 8006d50:	6825      	ldr	r5, [r4, #0]
 8006d52:	6808      	ldr	r0, [r1, #0]
 8006d54:	062e      	lsls	r6, r5, #24
 8006d56:	f100 0304 	add.w	r3, r0, #4
 8006d5a:	d50a      	bpl.n	8006d72 <_printf_i+0xce>
 8006d5c:	6805      	ldr	r5, [r0, #0]
 8006d5e:	600b      	str	r3, [r1, #0]
 8006d60:	2d00      	cmp	r5, #0
 8006d62:	da03      	bge.n	8006d6c <_printf_i+0xc8>
 8006d64:	232d      	movs	r3, #45	; 0x2d
 8006d66:	426d      	negs	r5, r5
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6c:	485e      	ldr	r0, [pc, #376]	; (8006ee8 <_printf_i+0x244>)
 8006d6e:	230a      	movs	r3, #10
 8006d70:	e019      	b.n	8006da6 <_printf_i+0x102>
 8006d72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d76:	6805      	ldr	r5, [r0, #0]
 8006d78:	600b      	str	r3, [r1, #0]
 8006d7a:	bf18      	it	ne
 8006d7c:	b22d      	sxthne	r5, r5
 8006d7e:	e7ef      	b.n	8006d60 <_printf_i+0xbc>
 8006d80:	680b      	ldr	r3, [r1, #0]
 8006d82:	6825      	ldr	r5, [r4, #0]
 8006d84:	1d18      	adds	r0, r3, #4
 8006d86:	6008      	str	r0, [r1, #0]
 8006d88:	0628      	lsls	r0, r5, #24
 8006d8a:	d501      	bpl.n	8006d90 <_printf_i+0xec>
 8006d8c:	681d      	ldr	r5, [r3, #0]
 8006d8e:	e002      	b.n	8006d96 <_printf_i+0xf2>
 8006d90:	0669      	lsls	r1, r5, #25
 8006d92:	d5fb      	bpl.n	8006d8c <_printf_i+0xe8>
 8006d94:	881d      	ldrh	r5, [r3, #0]
 8006d96:	4854      	ldr	r0, [pc, #336]	; (8006ee8 <_printf_i+0x244>)
 8006d98:	2f6f      	cmp	r7, #111	; 0x6f
 8006d9a:	bf0c      	ite	eq
 8006d9c:	2308      	moveq	r3, #8
 8006d9e:	230a      	movne	r3, #10
 8006da0:	2100      	movs	r1, #0
 8006da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006da6:	6866      	ldr	r6, [r4, #4]
 8006da8:	60a6      	str	r6, [r4, #8]
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	bfa2      	ittt	ge
 8006dae:	6821      	ldrge	r1, [r4, #0]
 8006db0:	f021 0104 	bicge.w	r1, r1, #4
 8006db4:	6021      	strge	r1, [r4, #0]
 8006db6:	b90d      	cbnz	r5, 8006dbc <_printf_i+0x118>
 8006db8:	2e00      	cmp	r6, #0
 8006dba:	d04d      	beq.n	8006e58 <_printf_i+0x1b4>
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006dc2:	fb03 5711 	mls	r7, r3, r1, r5
 8006dc6:	5dc7      	ldrb	r7, [r0, r7]
 8006dc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006dcc:	462f      	mov	r7, r5
 8006dce:	42bb      	cmp	r3, r7
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	d9f4      	bls.n	8006dbe <_printf_i+0x11a>
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d10b      	bne.n	8006df0 <_printf_i+0x14c>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	07df      	lsls	r7, r3, #31
 8006ddc:	d508      	bpl.n	8006df0 <_printf_i+0x14c>
 8006dde:	6923      	ldr	r3, [r4, #16]
 8006de0:	6861      	ldr	r1, [r4, #4]
 8006de2:	4299      	cmp	r1, r3
 8006de4:	bfde      	ittt	le
 8006de6:	2330      	movle	r3, #48	; 0x30
 8006de8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006df0:	1b92      	subs	r2, r2, r6
 8006df2:	6122      	str	r2, [r4, #16]
 8006df4:	f8cd a000 	str.w	sl, [sp]
 8006df8:	464b      	mov	r3, r9
 8006dfa:	aa03      	add	r2, sp, #12
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	4640      	mov	r0, r8
 8006e00:	f7ff fee2 	bl	8006bc8 <_printf_common>
 8006e04:	3001      	adds	r0, #1
 8006e06:	d14c      	bne.n	8006ea2 <_printf_i+0x1fe>
 8006e08:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0c:	b004      	add	sp, #16
 8006e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e12:	4835      	ldr	r0, [pc, #212]	; (8006ee8 <_printf_i+0x244>)
 8006e14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	680e      	ldr	r6, [r1, #0]
 8006e1c:	061f      	lsls	r7, r3, #24
 8006e1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e22:	600e      	str	r6, [r1, #0]
 8006e24:	d514      	bpl.n	8006e50 <_printf_i+0x1ac>
 8006e26:	07d9      	lsls	r1, r3, #31
 8006e28:	bf44      	itt	mi
 8006e2a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e2e:	6023      	strmi	r3, [r4, #0]
 8006e30:	b91d      	cbnz	r5, 8006e3a <_printf_i+0x196>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	f023 0320 	bic.w	r3, r3, #32
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	2310      	movs	r3, #16
 8006e3c:	e7b0      	b.n	8006da0 <_printf_i+0xfc>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	f043 0320 	orr.w	r3, r3, #32
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	2378      	movs	r3, #120	; 0x78
 8006e48:	4828      	ldr	r0, [pc, #160]	; (8006eec <_printf_i+0x248>)
 8006e4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e4e:	e7e3      	b.n	8006e18 <_printf_i+0x174>
 8006e50:	065e      	lsls	r6, r3, #25
 8006e52:	bf48      	it	mi
 8006e54:	b2ad      	uxthmi	r5, r5
 8006e56:	e7e6      	b.n	8006e26 <_printf_i+0x182>
 8006e58:	4616      	mov	r6, r2
 8006e5a:	e7bb      	b.n	8006dd4 <_printf_i+0x130>
 8006e5c:	680b      	ldr	r3, [r1, #0]
 8006e5e:	6826      	ldr	r6, [r4, #0]
 8006e60:	6960      	ldr	r0, [r4, #20]
 8006e62:	1d1d      	adds	r5, r3, #4
 8006e64:	600d      	str	r5, [r1, #0]
 8006e66:	0635      	lsls	r5, r6, #24
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	d501      	bpl.n	8006e70 <_printf_i+0x1cc>
 8006e6c:	6018      	str	r0, [r3, #0]
 8006e6e:	e002      	b.n	8006e76 <_printf_i+0x1d2>
 8006e70:	0671      	lsls	r1, r6, #25
 8006e72:	d5fb      	bpl.n	8006e6c <_printf_i+0x1c8>
 8006e74:	8018      	strh	r0, [r3, #0]
 8006e76:	2300      	movs	r3, #0
 8006e78:	6123      	str	r3, [r4, #16]
 8006e7a:	4616      	mov	r6, r2
 8006e7c:	e7ba      	b.n	8006df4 <_printf_i+0x150>
 8006e7e:	680b      	ldr	r3, [r1, #0]
 8006e80:	1d1a      	adds	r2, r3, #4
 8006e82:	600a      	str	r2, [r1, #0]
 8006e84:	681e      	ldr	r6, [r3, #0]
 8006e86:	6862      	ldr	r2, [r4, #4]
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f7f9 fa08 	bl	80002a0 <memchr>
 8006e90:	b108      	cbz	r0, 8006e96 <_printf_i+0x1f2>
 8006e92:	1b80      	subs	r0, r0, r6
 8006e94:	6060      	str	r0, [r4, #4]
 8006e96:	6863      	ldr	r3, [r4, #4]
 8006e98:	6123      	str	r3, [r4, #16]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea0:	e7a8      	b.n	8006df4 <_printf_i+0x150>
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	4632      	mov	r2, r6
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	47d0      	blx	sl
 8006eac:	3001      	adds	r0, #1
 8006eae:	d0ab      	beq.n	8006e08 <_printf_i+0x164>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	079b      	lsls	r3, r3, #30
 8006eb4:	d413      	bmi.n	8006ede <_printf_i+0x23a>
 8006eb6:	68e0      	ldr	r0, [r4, #12]
 8006eb8:	9b03      	ldr	r3, [sp, #12]
 8006eba:	4298      	cmp	r0, r3
 8006ebc:	bfb8      	it	lt
 8006ebe:	4618      	movlt	r0, r3
 8006ec0:	e7a4      	b.n	8006e0c <_printf_i+0x168>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4632      	mov	r2, r6
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	4640      	mov	r0, r8
 8006eca:	47d0      	blx	sl
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d09b      	beq.n	8006e08 <_printf_i+0x164>
 8006ed0:	3501      	adds	r5, #1
 8006ed2:	68e3      	ldr	r3, [r4, #12]
 8006ed4:	9903      	ldr	r1, [sp, #12]
 8006ed6:	1a5b      	subs	r3, r3, r1
 8006ed8:	42ab      	cmp	r3, r5
 8006eda:	dcf2      	bgt.n	8006ec2 <_printf_i+0x21e>
 8006edc:	e7eb      	b.n	8006eb6 <_printf_i+0x212>
 8006ede:	2500      	movs	r5, #0
 8006ee0:	f104 0619 	add.w	r6, r4, #25
 8006ee4:	e7f5      	b.n	8006ed2 <_printf_i+0x22e>
 8006ee6:	bf00      	nop
 8006ee8:	0801a959 	.word	0x0801a959
 8006eec:	0801a96a 	.word	0x0801a96a

08006ef0 <memcpy>:
 8006ef0:	440a      	add	r2, r1
 8006ef2:	4291      	cmp	r1, r2
 8006ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ef8:	d100      	bne.n	8006efc <memcpy+0xc>
 8006efa:	4770      	bx	lr
 8006efc:	b510      	push	{r4, lr}
 8006efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f06:	4291      	cmp	r1, r2
 8006f08:	d1f9      	bne.n	8006efe <memcpy+0xe>
 8006f0a:	bd10      	pop	{r4, pc}

08006f0c <memmove>:
 8006f0c:	4288      	cmp	r0, r1
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	eb01 0402 	add.w	r4, r1, r2
 8006f14:	d902      	bls.n	8006f1c <memmove+0x10>
 8006f16:	4284      	cmp	r4, r0
 8006f18:	4623      	mov	r3, r4
 8006f1a:	d807      	bhi.n	8006f2c <memmove+0x20>
 8006f1c:	1e43      	subs	r3, r0, #1
 8006f1e:	42a1      	cmp	r1, r4
 8006f20:	d008      	beq.n	8006f34 <memmove+0x28>
 8006f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f2a:	e7f8      	b.n	8006f1e <memmove+0x12>
 8006f2c:	4402      	add	r2, r0
 8006f2e:	4601      	mov	r1, r0
 8006f30:	428a      	cmp	r2, r1
 8006f32:	d100      	bne.n	8006f36 <memmove+0x2a>
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f3e:	e7f7      	b.n	8006f30 <memmove+0x24>

08006f40 <_free_r>:
 8006f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f42:	2900      	cmp	r1, #0
 8006f44:	d048      	beq.n	8006fd8 <_free_r+0x98>
 8006f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f4a:	9001      	str	r0, [sp, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f52:	bfb8      	it	lt
 8006f54:	18e4      	addlt	r4, r4, r3
 8006f56:	f000 f8d3 	bl	8007100 <__malloc_lock>
 8006f5a:	4a20      	ldr	r2, [pc, #128]	; (8006fdc <_free_r+0x9c>)
 8006f5c:	9801      	ldr	r0, [sp, #4]
 8006f5e:	6813      	ldr	r3, [r2, #0]
 8006f60:	4615      	mov	r5, r2
 8006f62:	b933      	cbnz	r3, 8006f72 <_free_r+0x32>
 8006f64:	6063      	str	r3, [r4, #4]
 8006f66:	6014      	str	r4, [r2, #0]
 8006f68:	b003      	add	sp, #12
 8006f6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f6e:	f000 b8cd 	b.w	800710c <__malloc_unlock>
 8006f72:	42a3      	cmp	r3, r4
 8006f74:	d90b      	bls.n	8006f8e <_free_r+0x4e>
 8006f76:	6821      	ldr	r1, [r4, #0]
 8006f78:	1862      	adds	r2, r4, r1
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	bf04      	itt	eq
 8006f7e:	681a      	ldreq	r2, [r3, #0]
 8006f80:	685b      	ldreq	r3, [r3, #4]
 8006f82:	6063      	str	r3, [r4, #4]
 8006f84:	bf04      	itt	eq
 8006f86:	1852      	addeq	r2, r2, r1
 8006f88:	6022      	streq	r2, [r4, #0]
 8006f8a:	602c      	str	r4, [r5, #0]
 8006f8c:	e7ec      	b.n	8006f68 <_free_r+0x28>
 8006f8e:	461a      	mov	r2, r3
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	b10b      	cbz	r3, 8006f98 <_free_r+0x58>
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d9fa      	bls.n	8006f8e <_free_r+0x4e>
 8006f98:	6811      	ldr	r1, [r2, #0]
 8006f9a:	1855      	adds	r5, r2, r1
 8006f9c:	42a5      	cmp	r5, r4
 8006f9e:	d10b      	bne.n	8006fb8 <_free_r+0x78>
 8006fa0:	6824      	ldr	r4, [r4, #0]
 8006fa2:	4421      	add	r1, r4
 8006fa4:	1854      	adds	r4, r2, r1
 8006fa6:	42a3      	cmp	r3, r4
 8006fa8:	6011      	str	r1, [r2, #0]
 8006faa:	d1dd      	bne.n	8006f68 <_free_r+0x28>
 8006fac:	681c      	ldr	r4, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	6053      	str	r3, [r2, #4]
 8006fb2:	4421      	add	r1, r4
 8006fb4:	6011      	str	r1, [r2, #0]
 8006fb6:	e7d7      	b.n	8006f68 <_free_r+0x28>
 8006fb8:	d902      	bls.n	8006fc0 <_free_r+0x80>
 8006fba:	230c      	movs	r3, #12
 8006fbc:	6003      	str	r3, [r0, #0]
 8006fbe:	e7d3      	b.n	8006f68 <_free_r+0x28>
 8006fc0:	6825      	ldr	r5, [r4, #0]
 8006fc2:	1961      	adds	r1, r4, r5
 8006fc4:	428b      	cmp	r3, r1
 8006fc6:	bf04      	itt	eq
 8006fc8:	6819      	ldreq	r1, [r3, #0]
 8006fca:	685b      	ldreq	r3, [r3, #4]
 8006fcc:	6063      	str	r3, [r4, #4]
 8006fce:	bf04      	itt	eq
 8006fd0:	1949      	addeq	r1, r1, r5
 8006fd2:	6021      	streq	r1, [r4, #0]
 8006fd4:	6054      	str	r4, [r2, #4]
 8006fd6:	e7c7      	b.n	8006f68 <_free_r+0x28>
 8006fd8:	b003      	add	sp, #12
 8006fda:	bd30      	pop	{r4, r5, pc}
 8006fdc:	200000a0 	.word	0x200000a0

08006fe0 <_malloc_r>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	1ccd      	adds	r5, r1, #3
 8006fe4:	f025 0503 	bic.w	r5, r5, #3
 8006fe8:	3508      	adds	r5, #8
 8006fea:	2d0c      	cmp	r5, #12
 8006fec:	bf38      	it	cc
 8006fee:	250c      	movcc	r5, #12
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	db01      	blt.n	8006ffa <_malloc_r+0x1a>
 8006ff6:	42a9      	cmp	r1, r5
 8006ff8:	d903      	bls.n	8007002 <_malloc_r+0x22>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	6033      	str	r3, [r6, #0]
 8006ffe:	2000      	movs	r0, #0
 8007000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007002:	f000 f87d 	bl	8007100 <__malloc_lock>
 8007006:	4921      	ldr	r1, [pc, #132]	; (800708c <_malloc_r+0xac>)
 8007008:	680a      	ldr	r2, [r1, #0]
 800700a:	4614      	mov	r4, r2
 800700c:	b99c      	cbnz	r4, 8007036 <_malloc_r+0x56>
 800700e:	4f20      	ldr	r7, [pc, #128]	; (8007090 <_malloc_r+0xb0>)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	b923      	cbnz	r3, 800701e <_malloc_r+0x3e>
 8007014:	4621      	mov	r1, r4
 8007016:	4630      	mov	r0, r6
 8007018:	f000 f862 	bl	80070e0 <_sbrk_r>
 800701c:	6038      	str	r0, [r7, #0]
 800701e:	4629      	mov	r1, r5
 8007020:	4630      	mov	r0, r6
 8007022:	f000 f85d 	bl	80070e0 <_sbrk_r>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	d123      	bne.n	8007072 <_malloc_r+0x92>
 800702a:	230c      	movs	r3, #12
 800702c:	6033      	str	r3, [r6, #0]
 800702e:	4630      	mov	r0, r6
 8007030:	f000 f86c 	bl	800710c <__malloc_unlock>
 8007034:	e7e3      	b.n	8006ffe <_malloc_r+0x1e>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	1b5b      	subs	r3, r3, r5
 800703a:	d417      	bmi.n	800706c <_malloc_r+0x8c>
 800703c:	2b0b      	cmp	r3, #11
 800703e:	d903      	bls.n	8007048 <_malloc_r+0x68>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	441c      	add	r4, r3
 8007044:	6025      	str	r5, [r4, #0]
 8007046:	e004      	b.n	8007052 <_malloc_r+0x72>
 8007048:	6863      	ldr	r3, [r4, #4]
 800704a:	42a2      	cmp	r2, r4
 800704c:	bf0c      	ite	eq
 800704e:	600b      	streq	r3, [r1, #0]
 8007050:	6053      	strne	r3, [r2, #4]
 8007052:	4630      	mov	r0, r6
 8007054:	f000 f85a 	bl	800710c <__malloc_unlock>
 8007058:	f104 000b 	add.w	r0, r4, #11
 800705c:	1d23      	adds	r3, r4, #4
 800705e:	f020 0007 	bic.w	r0, r0, #7
 8007062:	1ac2      	subs	r2, r0, r3
 8007064:	d0cc      	beq.n	8007000 <_malloc_r+0x20>
 8007066:	1a1b      	subs	r3, r3, r0
 8007068:	50a3      	str	r3, [r4, r2]
 800706a:	e7c9      	b.n	8007000 <_malloc_r+0x20>
 800706c:	4622      	mov	r2, r4
 800706e:	6864      	ldr	r4, [r4, #4]
 8007070:	e7cc      	b.n	800700c <_malloc_r+0x2c>
 8007072:	1cc4      	adds	r4, r0, #3
 8007074:	f024 0403 	bic.w	r4, r4, #3
 8007078:	42a0      	cmp	r0, r4
 800707a:	d0e3      	beq.n	8007044 <_malloc_r+0x64>
 800707c:	1a21      	subs	r1, r4, r0
 800707e:	4630      	mov	r0, r6
 8007080:	f000 f82e 	bl	80070e0 <_sbrk_r>
 8007084:	3001      	adds	r0, #1
 8007086:	d1dd      	bne.n	8007044 <_malloc_r+0x64>
 8007088:	e7cf      	b.n	800702a <_malloc_r+0x4a>
 800708a:	bf00      	nop
 800708c:	200000a0 	.word	0x200000a0
 8007090:	200000a4 	.word	0x200000a4

08007094 <_realloc_r>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	4607      	mov	r7, r0
 8007098:	4614      	mov	r4, r2
 800709a:	460e      	mov	r6, r1
 800709c:	b921      	cbnz	r1, 80070a8 <_realloc_r+0x14>
 800709e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070a2:	4611      	mov	r1, r2
 80070a4:	f7ff bf9c 	b.w	8006fe0 <_malloc_r>
 80070a8:	b922      	cbnz	r2, 80070b4 <_realloc_r+0x20>
 80070aa:	f7ff ff49 	bl	8006f40 <_free_r>
 80070ae:	4625      	mov	r5, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b4:	f000 f830 	bl	8007118 <_malloc_usable_size_r>
 80070b8:	42a0      	cmp	r0, r4
 80070ba:	d20f      	bcs.n	80070dc <_realloc_r+0x48>
 80070bc:	4621      	mov	r1, r4
 80070be:	4638      	mov	r0, r7
 80070c0:	f7ff ff8e 	bl	8006fe0 <_malloc_r>
 80070c4:	4605      	mov	r5, r0
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d0f2      	beq.n	80070b0 <_realloc_r+0x1c>
 80070ca:	4631      	mov	r1, r6
 80070cc:	4622      	mov	r2, r4
 80070ce:	f7ff ff0f 	bl	8006ef0 <memcpy>
 80070d2:	4631      	mov	r1, r6
 80070d4:	4638      	mov	r0, r7
 80070d6:	f7ff ff33 	bl	8006f40 <_free_r>
 80070da:	e7e9      	b.n	80070b0 <_realloc_r+0x1c>
 80070dc:	4635      	mov	r5, r6
 80070de:	e7e7      	b.n	80070b0 <_realloc_r+0x1c>

080070e0 <_sbrk_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4d06      	ldr	r5, [pc, #24]	; (80070fc <_sbrk_r+0x1c>)
 80070e4:	2300      	movs	r3, #0
 80070e6:	4604      	mov	r4, r0
 80070e8:	4608      	mov	r0, r1
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	f7f9 ffc4 	bl	8001078 <_sbrk>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_sbrk_r+0x1a>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_sbrk_r+0x1a>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	20008640 	.word	0x20008640

08007100 <__malloc_lock>:
 8007100:	4801      	ldr	r0, [pc, #4]	; (8007108 <__malloc_lock+0x8>)
 8007102:	f000 b811 	b.w	8007128 <__retarget_lock_acquire_recursive>
 8007106:	bf00      	nop
 8007108:	20008648 	.word	0x20008648

0800710c <__malloc_unlock>:
 800710c:	4801      	ldr	r0, [pc, #4]	; (8007114 <__malloc_unlock+0x8>)
 800710e:	f000 b80c 	b.w	800712a <__retarget_lock_release_recursive>
 8007112:	bf00      	nop
 8007114:	20008648 	.word	0x20008648

08007118 <_malloc_usable_size_r>:
 8007118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800711c:	1f18      	subs	r0, r3, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfbc      	itt	lt
 8007122:	580b      	ldrlt	r3, [r1, r0]
 8007124:	18c0      	addlt	r0, r0, r3
 8007126:	4770      	bx	lr

08007128 <__retarget_lock_acquire_recursive>:
 8007128:	4770      	bx	lr

0800712a <__retarget_lock_release_recursive>:
 800712a:	4770      	bx	lr

0800712c <log10f>:
 800712c:	b508      	push	{r3, lr}
 800712e:	ed2d 8b02 	vpush	{d8}
 8007132:	eeb0 8a40 	vmov.f32	s16, s0
 8007136:	f000 f855 	bl	80071e4 <__ieee754_log10f>
 800713a:	4b14      	ldr	r3, [pc, #80]	; (800718c <log10f+0x60>)
 800713c:	f993 3000 	ldrsb.w	r3, [r3]
 8007140:	3301      	adds	r3, #1
 8007142:	d014      	beq.n	800716e <log10f+0x42>
 8007144:	eeb4 8a48 	vcmp.f32	s16, s16
 8007148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800714c:	d60f      	bvs.n	800716e <log10f+0x42>
 800714e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007156:	d80a      	bhi.n	800716e <log10f+0x42>
 8007158:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800715c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007160:	d108      	bne.n	8007174 <log10f+0x48>
 8007162:	f7ff fb6f 	bl	8006844 <__errno>
 8007166:	2322      	movs	r3, #34	; 0x22
 8007168:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8007190 <log10f+0x64>
 800716c:	6003      	str	r3, [r0, #0]
 800716e:	ecbd 8b02 	vpop	{d8}
 8007172:	bd08      	pop	{r3, pc}
 8007174:	f7ff fb66 	bl	8006844 <__errno>
 8007178:	ecbd 8b02 	vpop	{d8}
 800717c:	2321      	movs	r3, #33	; 0x21
 800717e:	6003      	str	r3, [r0, #0]
 8007180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007184:	4803      	ldr	r0, [pc, #12]	; (8007194 <log10f+0x68>)
 8007186:	f000 b889 	b.w	800729c <nanf>
 800718a:	bf00      	nop
 800718c:	20000074 	.word	0x20000074
 8007190:	ff800000 	.word	0xff800000
 8007194:	0801a94d 	.word	0x0801a94d

08007198 <sqrtf>:
 8007198:	b508      	push	{r3, lr}
 800719a:	ed2d 8b02 	vpush	{d8}
 800719e:	eeb0 8a40 	vmov.f32	s16, s0
 80071a2:	f000 f877 	bl	8007294 <__ieee754_sqrtf>
 80071a6:	4b0d      	ldr	r3, [pc, #52]	; (80071dc <sqrtf+0x44>)
 80071a8:	f993 3000 	ldrsb.w	r3, [r3]
 80071ac:	3301      	adds	r3, #1
 80071ae:	d011      	beq.n	80071d4 <sqrtf+0x3c>
 80071b0:	eeb4 8a48 	vcmp.f32	s16, s16
 80071b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b8:	d60c      	bvs.n	80071d4 <sqrtf+0x3c>
 80071ba:	eddf 8a09 	vldr	s17, [pc, #36]	; 80071e0 <sqrtf+0x48>
 80071be:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80071c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c6:	d505      	bpl.n	80071d4 <sqrtf+0x3c>
 80071c8:	f7ff fb3c 	bl	8006844 <__errno>
 80071cc:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80071d0:	2321      	movs	r3, #33	; 0x21
 80071d2:	6003      	str	r3, [r0, #0]
 80071d4:	ecbd 8b02 	vpop	{d8}
 80071d8:	bd08      	pop	{r3, pc}
 80071da:	bf00      	nop
 80071dc:	20000074 	.word	0x20000074
 80071e0:	00000000 	.word	0x00000000

080071e4 <__ieee754_log10f>:
 80071e4:	b508      	push	{r3, lr}
 80071e6:	ee10 2a10 	vmov	r2, s0
 80071ea:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80071ee:	ed2d 8b02 	vpush	{d8}
 80071f2:	d108      	bne.n	8007206 <__ieee754_log10f+0x22>
 80071f4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800727c <__ieee754_log10f+0x98>
 80071f8:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007280 <__ieee754_log10f+0x9c>
 80071fc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007200:	ecbd 8b02 	vpop	{d8}
 8007204:	bd08      	pop	{r3, pc}
 8007206:	2a00      	cmp	r2, #0
 8007208:	da02      	bge.n	8007210 <__ieee754_log10f+0x2c>
 800720a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800720e:	e7f3      	b.n	80071f8 <__ieee754_log10f+0x14>
 8007210:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007214:	db02      	blt.n	800721c <__ieee754_log10f+0x38>
 8007216:	ee30 0a00 	vadd.f32	s0, s0, s0
 800721a:	e7f1      	b.n	8007200 <__ieee754_log10f+0x1c>
 800721c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007220:	bfbf      	itttt	lt
 8007222:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8007284 <__ieee754_log10f+0xa0>
 8007226:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800722a:	f06f 0118 	mvnlt.w	r1, #24
 800722e:	ee17 2a90 	vmovlt	r2, s15
 8007232:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007236:	bfa8      	it	ge
 8007238:	2100      	movge	r1, #0
 800723a:	3b7f      	subs	r3, #127	; 0x7f
 800723c:	440b      	add	r3, r1
 800723e:	0fd9      	lsrs	r1, r3, #31
 8007240:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007244:	ee07 3a90 	vmov	s15, r3
 8007248:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800724c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8007250:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007254:	ee00 3a10 	vmov	s0, r3
 8007258:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800725c:	f000 f824 	bl	80072a8 <__ieee754_logf>
 8007260:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007288 <__ieee754_log10f+0xa4>
 8007264:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007268:	eddf 7a08 	vldr	s15, [pc, #32]	; 800728c <__ieee754_log10f+0xa8>
 800726c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007270:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007290 <__ieee754_log10f+0xac>
 8007274:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007278:	e7c2      	b.n	8007200 <__ieee754_log10f+0x1c>
 800727a:	bf00      	nop
 800727c:	cc000000 	.word	0xcc000000
 8007280:	00000000 	.word	0x00000000
 8007284:	4c000000 	.word	0x4c000000
 8007288:	3ede5bd9 	.word	0x3ede5bd9
 800728c:	355427db 	.word	0x355427db
 8007290:	3e9a2080 	.word	0x3e9a2080

08007294 <__ieee754_sqrtf>:
 8007294:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007298:	4770      	bx	lr
	...

0800729c <nanf>:
 800729c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80072a4 <nanf+0x8>
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	7fc00000 	.word	0x7fc00000

080072a8 <__ieee754_logf>:
 80072a8:	ee10 3a10 	vmov	r3, s0
 80072ac:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80072b0:	d106      	bne.n	80072c0 <__ieee754_logf+0x18>
 80072b2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007448 <__ieee754_logf+0x1a0>
 80072b6:	eddf 7a65 	vldr	s15, [pc, #404]	; 800744c <__ieee754_logf+0x1a4>
 80072ba:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80072be:	4770      	bx	lr
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	da02      	bge.n	80072ca <__ieee754_logf+0x22>
 80072c4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80072c8:	e7f5      	b.n	80072b6 <__ieee754_logf+0xe>
 80072ca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80072ce:	db02      	blt.n	80072d6 <__ieee754_logf+0x2e>
 80072d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80072d4:	4770      	bx	lr
 80072d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072da:	bfb8      	it	lt
 80072dc:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8007450 <__ieee754_logf+0x1a8>
 80072e0:	485c      	ldr	r0, [pc, #368]	; (8007454 <__ieee754_logf+0x1ac>)
 80072e2:	bfbe      	ittt	lt
 80072e4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80072e8:	f06f 0118 	mvnlt.w	r1, #24
 80072ec:	ee17 3a90 	vmovlt	r3, s15
 80072f0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80072f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80072f8:	4418      	add	r0, r3
 80072fa:	bfa8      	it	ge
 80072fc:	2100      	movge	r1, #0
 80072fe:	3a7f      	subs	r2, #127	; 0x7f
 8007300:	440a      	add	r2, r1
 8007302:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8007306:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800730a:	4319      	orrs	r1, r3
 800730c:	ee00 1a10 	vmov	s0, r1
 8007310:	4951      	ldr	r1, [pc, #324]	; (8007458 <__ieee754_logf+0x1b0>)
 8007312:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8007316:	f103 000f 	add.w	r0, r3, #15
 800731a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800731e:	4001      	ands	r1, r0
 8007320:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007324:	bb89      	cbnz	r1, 800738a <__ieee754_logf+0xe2>
 8007326:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732e:	d10f      	bne.n	8007350 <__ieee754_logf+0xa8>
 8007330:	2a00      	cmp	r2, #0
 8007332:	f000 8085 	beq.w	8007440 <__ieee754_logf+0x198>
 8007336:	ee07 2a90 	vmov	s15, r2
 800733a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800745c <__ieee754_logf+0x1b4>
 800733e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007460 <__ieee754_logf+0x1b8>
 8007342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007346:	ee27 0a80 	vmul.f32	s0, s15, s0
 800734a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800734e:	4770      	bx	lr
 8007350:	eddf 6a44 	vldr	s13, [pc, #272]	; 8007464 <__ieee754_logf+0x1bc>
 8007354:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007358:	eee0 7a66 	vfms.f32	s15, s0, s13
 800735c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007364:	b912      	cbnz	r2, 800736c <__ieee754_logf+0xc4>
 8007366:	ee30 0a47 	vsub.f32	s0, s0, s14
 800736a:	4770      	bx	lr
 800736c:	ee07 2a90 	vmov	s15, r2
 8007370:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800745c <__ieee754_logf+0x1b4>
 8007374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007378:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800737c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8007380:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8007460 <__ieee754_logf+0x1b8>
 8007384:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8007388:	4770      	bx	lr
 800738a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800738e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007392:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007468 <__ieee754_logf+0x1c0>
 8007396:	eddf 4a35 	vldr	s9, [pc, #212]	; 800746c <__ieee754_logf+0x1c4>
 800739a:	4935      	ldr	r1, [pc, #212]	; (8007470 <__ieee754_logf+0x1c8>)
 800739c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80073a0:	4419      	add	r1, r3
 80073a2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80073a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80073aa:	430b      	orrs	r3, r1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	ee07 2a90 	vmov	s15, r2
 80073b2:	ee26 5a06 	vmul.f32	s10, s12, s12
 80073b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80073ba:	ee25 7a05 	vmul.f32	s14, s10, s10
 80073be:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8007474 <__ieee754_logf+0x1cc>
 80073c2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80073c6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8007478 <__ieee754_logf+0x1d0>
 80073ca:	eee7 5a87 	vfma.f32	s11, s15, s14
 80073ce:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800747c <__ieee754_logf+0x1d4>
 80073d2:	eee7 7a24 	vfma.f32	s15, s14, s9
 80073d6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8007480 <__ieee754_logf+0x1d8>
 80073da:	eee7 4a87 	vfma.f32	s9, s15, s14
 80073de:	eddf 7a29 	vldr	s15, [pc, #164]	; 8007484 <__ieee754_logf+0x1dc>
 80073e2:	eee4 7a87 	vfma.f32	s15, s9, s14
 80073e6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80073ea:	eee5 7a87 	vfma.f32	s15, s11, s14
 80073ee:	dd1c      	ble.n	800742a <__ieee754_logf+0x182>
 80073f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80073f4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80073f8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80073fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007400:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007404:	b922      	cbnz	r2, 8007410 <__ieee754_logf+0x168>
 8007406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800740a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800740e:	4770      	bx	lr
 8007410:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800745c <__ieee754_logf+0x1b4>
 8007414:	eee6 7a86 	vfma.f32	s15, s13, s12
 8007418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800741c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007420:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007460 <__ieee754_logf+0x1b8>
 8007424:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8007428:	4770      	bx	lr
 800742a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800742e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007432:	2a00      	cmp	r2, #0
 8007434:	d0e9      	beq.n	800740a <__ieee754_logf+0x162>
 8007436:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800745c <__ieee754_logf+0x1b4>
 800743a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800743e:	e7ed      	b.n	800741c <__ieee754_logf+0x174>
 8007440:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800744c <__ieee754_logf+0x1a4>
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	cc000000 	.word	0xcc000000
 800744c:	00000000 	.word	0x00000000
 8007450:	4c000000 	.word	0x4c000000
 8007454:	004afb20 	.word	0x004afb20
 8007458:	007ffff0 	.word	0x007ffff0
 800745c:	3717f7d1 	.word	0x3717f7d1
 8007460:	3f317180 	.word	0x3f317180
 8007464:	3eaaaaab 	.word	0x3eaaaaab
 8007468:	3e1cd04f 	.word	0x3e1cd04f
 800746c:	3e178897 	.word	0x3e178897
 8007470:	ffcf5c30 	.word	0xffcf5c30
 8007474:	3e638e29 	.word	0x3e638e29
 8007478:	3ecccccd 	.word	0x3ecccccd
 800747c:	3e3a3325 	.word	0x3e3a3325
 8007480:	3e924925 	.word	0x3e924925
 8007484:	3f2aaaab 	.word	0x3f2aaaab

08007488 <_init>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

08007494 <_fini>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr
